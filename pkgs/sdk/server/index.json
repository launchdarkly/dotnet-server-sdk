{
  "CHANGELOG.html": {
    "href": "CHANGELOG.html",
    "title": "Changelog | LaunchDarkly Dotnet Server SDK",
    "keywords": "Changelog 8.4.0 (2024-04-23) Features add support for a Tracing hook implemented via System.Diagnostics, compatible with OpenTelemetry (d9043db)"
  },
  "api/LaunchDarkly.Cache.CacheBuilder-2.html": {
    "href": "api/LaunchDarkly.Cache.CacheBuilder-2.html",
    "title": "Class CacheBuilder<K, V> | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class CacheBuilder<K, V> Inheritance object CacheBuilderBase<CacheBuilder<K, V>> CacheBuilder<K, V> Inherited Members CacheBuilderBase<CacheBuilder<K, V>>.WithExpiration(TimeSpan?) CacheBuilderBase<CacheBuilder<K, V>>.WithBackgroundPurge(TimeSpan?) object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Cache Assembly: LaunchDarkly.Cache.dll Syntax public class CacheBuilder<K, V> : CacheBuilderBase<CacheBuilder<K, V>> Type Parameters Name Description K V Constructors CacheBuilder() Declaration public CacheBuilder() Methods Build() Declaration public ICache<K, V> Build() Returns Type Description ICache<K, V> WithInitialCapacity(int?) Declaration public CacheBuilder<K, V> WithInitialCapacity(int? initialCapacity) Parameters Type Name Description int? initialCapacity Returns Type Description CacheBuilder<K, V> WithLoader(Func<K, V>) Declaration public CacheBuilder<K, V> WithLoader(Func<K, V> loaderFn) Parameters Type Name Description Func<K, V> loaderFn Returns Type Description CacheBuilder<K, V> WithMaximumEntries(int?) Declaration public CacheBuilder<K, V> WithMaximumEntries(int? maximumEntries) Parameters Type Name Description int? maximumEntries Returns Type Description CacheBuilder<K, V>"
  },
  "api/LaunchDarkly.Cache.CacheBuilderBase-1.html": {
    "href": "api/LaunchDarkly.Cache.CacheBuilderBase-1.html",
    "title": "Class CacheBuilderBase<B> | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class CacheBuilderBase<B> Inheritance object CacheBuilderBase<B> CacheBuilder<K, V> SingleValueCacheBuilder<V> Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Cache Assembly: LaunchDarkly.Cache.dll Syntax public class CacheBuilderBase<B> where B : CacheBuilderBase<B> Type Parameters Name Description B Constructors CacheBuilderBase() Declaration public CacheBuilderBase() Methods WithBackgroundPurge(TimeSpan?) Declaration public B WithBackgroundPurge(TimeSpan? purgeInterval) Parameters Type Name Description TimeSpan? purgeInterval Returns Type Description B WithExpiration(TimeSpan?) Declaration public B WithExpiration(TimeSpan? expiration) Parameters Type Name Description TimeSpan? expiration Returns Type Description B"
  },
  "api/LaunchDarkly.Cache.Caches.html": {
    "href": "api/LaunchDarkly.Cache.Caches.html",
    "title": "Class Caches | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class Caches Inheritance object Caches Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Cache Assembly: LaunchDarkly.Cache.dll Syntax public abstract class Caches Constructors Caches() Declaration protected Caches() Methods KeyValue<K, V>() Declaration public static CacheBuilder<K, V> KeyValue<K, V>() Returns Type Description CacheBuilder<K, V> Type Parameters Name Description K V SingleValue<V>() Declaration public static SingleValueCacheBuilder<V> SingleValue<V>() Returns Type Description SingleValueCacheBuilder<V> Type Parameters Name Description V"
  },
  "api/LaunchDarkly.Cache.ICache-2.html": {
    "href": "api/LaunchDarkly.Cache.ICache-2.html",
    "title": "Interface ICache<K, V> | LaunchDarkly Dotnet Server SDK",
    "keywords": "Interface ICache<K, V> Inherited Members IDisposable.Dispose() Namespace: LaunchDarkly.Cache Assembly: LaunchDarkly.Cache.dll Syntax public interface ICache<K, V> : IDisposable Type Parameters Name Description K V Methods Clear() Declaration void Clear() ContainsKey(K) Declaration bool ContainsKey(K key) Parameters Type Name Description K key Returns Type Description bool Get(K) Declaration V Get(K key) Parameters Type Name Description K key Returns Type Description V Remove(K) Declaration void Remove(K key) Parameters Type Name Description K key Set(K, V) Declaration void Set(K key, V value) Parameters Type Name Description K key V value TryGetValue(K, out V) Declaration bool TryGetValue(K key, out V value) Parameters Type Name Description K key V value Returns Type Description bool"
  },
  "api/LaunchDarkly.Cache.ISingleValueCache-1.html": {
    "href": "api/LaunchDarkly.Cache.ISingleValueCache-1.html",
    "title": "Interface ISingleValueCache<V> | LaunchDarkly Dotnet Server SDK",
    "keywords": "Interface ISingleValueCache<V> Inherited Members IDisposable.Dispose() Namespace: LaunchDarkly.Cache Assembly: LaunchDarkly.Cache.dll Syntax public interface ISingleValueCache<V> : IDisposable Type Parameters Name Description V Properties HasValue Declaration bool HasValue { get; } Property Value Type Description bool Methods Clear() Declaration void Clear() Get() Declaration V Get() Returns Type Description V Set(V) Declaration void Set(V value) Parameters Type Name Description V value TryGetValue(out V) Declaration bool TryGetValue(out V value) Parameters Type Name Description V value Returns Type Description bool"
  },
  "api/LaunchDarkly.Cache.SingleValueCacheBuilder-1.html": {
    "href": "api/LaunchDarkly.Cache.SingleValueCacheBuilder-1.html",
    "title": "Class SingleValueCacheBuilder<V> | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class SingleValueCacheBuilder<V> Inheritance object CacheBuilderBase<SingleValueCacheBuilder<V>> SingleValueCacheBuilder<V> Inherited Members CacheBuilderBase<SingleValueCacheBuilder<V>>.WithExpiration(TimeSpan?) CacheBuilderBase<SingleValueCacheBuilder<V>>.WithBackgroundPurge(TimeSpan?) object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Cache Assembly: LaunchDarkly.Cache.dll Syntax public class SingleValueCacheBuilder<V> : CacheBuilderBase<SingleValueCacheBuilder<V>> Type Parameters Name Description V Constructors SingleValueCacheBuilder() Declaration public SingleValueCacheBuilder() Methods Build() Declaration public ISingleValueCache<V> Build() Returns Type Description ISingleValueCache<V> WithLoader(Func<V>) Declaration public SingleValueCacheBuilder<V> WithLoader(Func<V> loaderFn) Parameters Type Name Description Func<V> loaderFn Returns Type Description SingleValueCacheBuilder<V>"
  },
  "api/LaunchDarkly.Cache.html": {
    "href": "api/LaunchDarkly.Cache.html",
    "title": "Namespace LaunchDarkly.Cache | LaunchDarkly Dotnet Server SDK",
    "keywords": "Namespace LaunchDarkly.Cache Classes CacheBuilderBase<B> CacheBuilder<K, V> Caches SingleValueCacheBuilder<V> Interfaces ICache<K, V> ISingleValueCache<V>"
  },
  "api/LaunchDarkly.EventSource.CommentReceivedEventArgs.html": {
    "href": "api/LaunchDarkly.EventSource.CommentReceivedEventArgs.html",
    "title": "Class CommentReceivedEventArgs | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class CommentReceivedEventArgs Inheritance object EventArgs CommentReceivedEventArgs Inherited Members EventArgs.Empty object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.EventSource Assembly: LaunchDarkly.EventSource.dll Syntax public class CommentReceivedEventArgs : EventArgs Constructors CommentReceivedEventArgs(string) Declaration public CommentReceivedEventArgs(string comment) Parameters Type Name Description string comment Properties Comment Declaration public string Comment { get; } Property Value Type Description string"
  },
  "api/LaunchDarkly.EventSource.Configuration.html": {
    "href": "api/LaunchDarkly.EventSource.Configuration.html",
    "title": "Class Configuration | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class Configuration Inheritance object Configuration Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.EventSource Assembly: LaunchDarkly.EventSource.dll Syntax public sealed class Configuration Fields DefaultBackoffResetThreshold Declaration public static readonly TimeSpan DefaultBackoffResetThreshold Field Value Type Description TimeSpan DefaultConnectionTimeout Declaration [Obsolete(\"Use DefaultResponseStartTimeout\")] public static readonly TimeSpan DefaultConnectionTimeout Field Value Type Description TimeSpan DefaultInitialRetryDelay Declaration public static readonly TimeSpan DefaultInitialRetryDelay Field Value Type Description TimeSpan DefaultLoggerName Declaration public const string DefaultLoggerName = \"EventSource\" Field Value Type Description string DefaultMaxRetryDelay Declaration public static readonly TimeSpan DefaultMaxRetryDelay Field Value Type Description TimeSpan DefaultReadTimeout Declaration public static readonly TimeSpan DefaultReadTimeout Field Value Type Description TimeSpan DefaultResponseStartTimeout Declaration public static readonly TimeSpan DefaultResponseStartTimeout Field Value Type Description TimeSpan Properties BackoffResetThreshold Declaration public TimeSpan BackoffResetThreshold { get; } Property Value Type Description TimeSpan ConnectionTimeout Declaration [Obsolete(\"Use ResponseStartTimeout\")] public TimeSpan ConnectionTimeout { get; } Property Value Type Description TimeSpan HttpClient Declaration public HttpClient HttpClient { get; } Property Value Type Description HttpClient HttpMessageHandler Declaration public HttpMessageHandler HttpMessageHandler { get; } Property Value Type Description HttpMessageHandler HttpRequestModifier Declaration public Action<HttpRequestMessage> HttpRequestModifier { get; } Property Value Type Description Action<HttpRequestMessage> InitialRetryDelay Declaration public TimeSpan InitialRetryDelay { get; } Property Value Type Description TimeSpan LastEventId Declaration public string LastEventId { get; } Property Value Type Description string Logger Declaration public Logger Logger { get; } Property Value Type Description Logger MaxRetryDelay Declaration public TimeSpan MaxRetryDelay { get; } Property Value Type Description TimeSpan Method Declaration public HttpMethod Method { get; } Property Value Type Description HttpMethod PreferDataAsUtf8Bytes Declaration public bool PreferDataAsUtf8Bytes { get; } Property Value Type Description bool ReadTimeout Declaration public TimeSpan ReadTimeout { get; } Property Value Type Description TimeSpan RequestBodyFactory Declaration public Func<HttpContent> RequestBodyFactory { get; } Property Value Type Description Func<HttpContent> RequestHeaders Declaration public IDictionary<string, string> RequestHeaders { get; } Property Value Type Description IDictionary<string, string> ResponseStartTimeout Declaration public TimeSpan ResponseStartTimeout { get; } Property Value Type Description TimeSpan Uri Declaration public Uri Uri { get; } Property Value Type Description Uri Methods Builder(Uri) Declaration public static ConfigurationBuilder Builder(Uri uri) Parameters Type Name Description Uri uri Returns Type Description ConfigurationBuilder"
  },
  "api/LaunchDarkly.EventSource.ConfigurationBuilder.html": {
    "href": "api/LaunchDarkly.EventSource.ConfigurationBuilder.html",
    "title": "Class ConfigurationBuilder | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class ConfigurationBuilder Inheritance object ConfigurationBuilder Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.EventSource Assembly: LaunchDarkly.EventSource.dll Syntax public class ConfigurationBuilder Methods BackoffResetThreshold(TimeSpan) Declaration public ConfigurationBuilder BackoffResetThreshold(TimeSpan backoffResetThreshold) Parameters Type Name Description TimeSpan backoffResetThreshold Returns Type Description ConfigurationBuilder Build() Declaration public Configuration Build() Returns Type Description Configuration ConnectionTimeout(TimeSpan) Declaration [Obsolete(\"Use ResponseStartTimeout\")] public ConfigurationBuilder ConnectionTimeout(TimeSpan responseStartTimeout) Parameters Type Name Description TimeSpan responseStartTimeout Returns Type Description ConfigurationBuilder HttpClient(HttpClient) Declaration public ConfigurationBuilder HttpClient(HttpClient client) Parameters Type Name Description HttpClient client Returns Type Description ConfigurationBuilder HttpMessageHandler(HttpMessageHandler) Declaration public ConfigurationBuilder HttpMessageHandler(HttpMessageHandler handler) Parameters Type Name Description HttpMessageHandler handler Returns Type Description ConfigurationBuilder HttpRequestModifier(Action<HttpRequestMessage>) Declaration public ConfigurationBuilder HttpRequestModifier(Action<HttpRequestMessage> httpRequestModifier) Parameters Type Name Description Action<HttpRequestMessage> httpRequestModifier Returns Type Description ConfigurationBuilder InitialRetryDelay(TimeSpan) Declaration public ConfigurationBuilder InitialRetryDelay(TimeSpan initialRetryDelay) Parameters Type Name Description TimeSpan initialRetryDelay Returns Type Description ConfigurationBuilder LastEventId(string) Declaration public ConfigurationBuilder LastEventId(string lastEventId) Parameters Type Name Description string lastEventId Returns Type Description ConfigurationBuilder LogAdapter(ILogAdapter) Declaration public ConfigurationBuilder LogAdapter(ILogAdapter logAdapter) Parameters Type Name Description ILogAdapter logAdapter Returns Type Description ConfigurationBuilder Logger(Logger) Declaration public ConfigurationBuilder Logger(Logger logger) Parameters Type Name Description Logger logger Returns Type Description ConfigurationBuilder MaxRetryDelay(TimeSpan) Declaration public ConfigurationBuilder MaxRetryDelay(TimeSpan maxRetryDelay) Parameters Type Name Description TimeSpan maxRetryDelay Returns Type Description ConfigurationBuilder Method(HttpMethod) Declaration public ConfigurationBuilder Method(HttpMethod method) Parameters Type Name Description HttpMethod method Returns Type Description ConfigurationBuilder PreferDataAsUtf8Bytes(bool) Declaration public ConfigurationBuilder PreferDataAsUtf8Bytes(bool preferDataAsUtf8Bytes) Parameters Type Name Description bool preferDataAsUtf8Bytes Returns Type Description ConfigurationBuilder ReadTimeout(TimeSpan) Declaration public ConfigurationBuilder ReadTimeout(TimeSpan readTimeout) Parameters Type Name Description TimeSpan readTimeout Returns Type Description ConfigurationBuilder RequestBody(string, string) Declaration public ConfigurationBuilder RequestBody(string bodyString, string contentType) Parameters Type Name Description string bodyString string contentType Returns Type Description ConfigurationBuilder RequestBodyFactory(Func<HttpContent>) Declaration public ConfigurationBuilder RequestBodyFactory(Func<HttpContent> factory) Parameters Type Name Description Func<HttpContent> factory Returns Type Description ConfigurationBuilder RequestHeader(string, string) Declaration public ConfigurationBuilder RequestHeader(string name, string value) Parameters Type Name Description string name string value Returns Type Description ConfigurationBuilder RequestHeaders(IDictionary<string, string>) Declaration public ConfigurationBuilder RequestHeaders(IDictionary<string, string> headers) Parameters Type Name Description IDictionary<string, string> headers Returns Type Description ConfigurationBuilder ResponseStartTimeout(TimeSpan) Declaration public ConfigurationBuilder ResponseStartTimeout(TimeSpan responseStartTimeout) Parameters Type Name Description TimeSpan responseStartTimeout Returns Type Description ConfigurationBuilder"
  },
  "api/LaunchDarkly.EventSource.EventSource.html": {
    "href": "api/LaunchDarkly.EventSource.EventSource.html",
    "title": "Class EventSource | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class EventSource Inheritance object EventSource Implements IEventSource IDisposable Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.EventSource Assembly: LaunchDarkly.EventSource.dll Syntax public class EventSource : IEventSource, IDisposable Constructors EventSource(Configuration) Declaration public EventSource(Configuration configuration) Parameters Type Name Description Configuration configuration EventSource(Uri) Declaration public EventSource(Uri uri) Parameters Type Name Description Uri uri Properties ReadyState Declaration public ReadyState ReadyState { get; } Property Value Type Description ReadyState Methods Close() Declaration public void Close() Dispose() Declaration public void Dispose() Restart(bool) Declaration public void Restart(bool resetBackoffDelay) Parameters Type Name Description bool resetBackoffDelay StartAsync() Declaration public Task StartAsync() Returns Type Description Task Events Closed Declaration public event EventHandler<StateChangedEventArgs> Closed Event Type Type Description EventHandler<StateChangedEventArgs> CommentReceived Declaration public event EventHandler<CommentReceivedEventArgs> CommentReceived Event Type Type Description EventHandler<CommentReceivedEventArgs> Error Declaration public event EventHandler<ExceptionEventArgs> Error Event Type Type Description EventHandler<ExceptionEventArgs> MessageReceived Declaration public event EventHandler<MessageReceivedEventArgs> MessageReceived Event Type Type Description EventHandler<MessageReceivedEventArgs> Opened Declaration public event EventHandler<StateChangedEventArgs> Opened Event Type Type Description EventHandler<StateChangedEventArgs> Implements IEventSource IDisposable"
  },
  "api/LaunchDarkly.EventSource.EventSourceServiceCancelledException.html": {
    "href": "api/LaunchDarkly.EventSource.EventSourceServiceCancelledException.html",
    "title": "Class EventSourceServiceCancelledException | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class EventSourceServiceCancelledException Inheritance object Exception EventSourceServiceCancelledException EventSourceServiceUnsuccessfulResponseException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.EventSource Assembly: LaunchDarkly.EventSource.dll Syntax public class EventSourceServiceCancelledException : Exception, ISerializable Constructors EventSourceServiceCancelledException(string) Declaration public EventSourceServiceCancelledException(string message) Parameters Type Name Description string message EventSourceServiceCancelledException(string, Exception) Declaration public EventSourceServiceCancelledException(string message, Exception innerException) Parameters Type Name Description string message Exception innerException Implements ISerializable"
  },
  "api/LaunchDarkly.EventSource.EventSourceServiceUnsuccessfulResponseException.html": {
    "href": "api/LaunchDarkly.EventSource.EventSourceServiceUnsuccessfulResponseException.html",
    "title": "Class EventSourceServiceUnsuccessfulResponseException | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class EventSourceServiceUnsuccessfulResponseException Inheritance object Exception EventSourceServiceCancelledException EventSourceServiceUnsuccessfulResponseException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.EventSource Assembly: LaunchDarkly.EventSource.dll Syntax public class EventSourceServiceUnsuccessfulResponseException : EventSourceServiceCancelledException, ISerializable Constructors EventSourceServiceUnsuccessfulResponseException(int) Declaration public EventSourceServiceUnsuccessfulResponseException(int statusCode) Parameters Type Name Description int statusCode Properties StatusCode Declaration public int StatusCode { get; } Property Value Type Description int Implements ISerializable"
  },
  "api/LaunchDarkly.EventSource.ExceptionEventArgs.html": {
    "href": "api/LaunchDarkly.EventSource.ExceptionEventArgs.html",
    "title": "Class ExceptionEventArgs | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class ExceptionEventArgs Inheritance object EventArgs ExceptionEventArgs Inherited Members EventArgs.Empty object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.EventSource Assembly: LaunchDarkly.EventSource.dll Syntax public class ExceptionEventArgs : EventArgs Constructors ExceptionEventArgs(Exception) Declaration public ExceptionEventArgs(Exception ex) Parameters Type Name Description Exception ex Properties Exception Declaration public Exception Exception { get; } Property Value Type Description Exception"
  },
  "api/LaunchDarkly.EventSource.IEventSource.html": {
    "href": "api/LaunchDarkly.EventSource.IEventSource.html",
    "title": "Interface IEventSource | LaunchDarkly Dotnet Server SDK",
    "keywords": "Interface IEventSource Namespace: LaunchDarkly.EventSource Assembly: LaunchDarkly.EventSource.dll Syntax public interface IEventSource Properties ReadyState Declaration ReadyState ReadyState { get; } Property Value Type Description ReadyState Methods Close() Declaration void Close() Restart(bool) Declaration void Restart(bool resetBackoffDelay) Parameters Type Name Description bool resetBackoffDelay StartAsync() Declaration Task StartAsync() Returns Type Description Task Events Closed Declaration event EventHandler<StateChangedEventArgs> Closed Event Type Type Description EventHandler<StateChangedEventArgs> CommentReceived Declaration event EventHandler<CommentReceivedEventArgs> CommentReceived Event Type Type Description EventHandler<CommentReceivedEventArgs> Error Declaration event EventHandler<ExceptionEventArgs> Error Event Type Type Description EventHandler<ExceptionEventArgs> MessageReceived Declaration event EventHandler<MessageReceivedEventArgs> MessageReceived Event Type Type Description EventHandler<MessageReceivedEventArgs> Opened Declaration event EventHandler<StateChangedEventArgs> Opened Event Type Type Description EventHandler<StateChangedEventArgs>"
  },
  "api/LaunchDarkly.EventSource.MessageEvent.html": {
    "href": "api/LaunchDarkly.EventSource.MessageEvent.html",
    "title": "Struct MessageEvent | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct MessageEvent Inherited Members ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: LaunchDarkly.EventSource Assembly: LaunchDarkly.EventSource.dll Syntax public struct MessageEvent Constructors MessageEvent(string, Utf8ByteSpan, string, Uri) Declaration public MessageEvent(string name, Utf8ByteSpan dataUtf8Bytes, string lastEventId, Uri origin) Parameters Type Name Description string name Utf8ByteSpan dataUtf8Bytes string lastEventId Uri origin MessageEvent(string, string, string, Uri) Declaration public MessageEvent(string name, string data, string lastEventId, Uri origin) Parameters Type Name Description string name string data string lastEventId Uri origin MessageEvent(string, string, Uri) Declaration public MessageEvent(string name, string data, Uri origin) Parameters Type Name Description string name string data Uri origin Fields DefaultName Declaration public const string DefaultName = \"message\" Field Value Type Description string Properties Data Declaration public string Data { get; } Property Value Type Description string DataUtf8Bytes Declaration public Utf8ByteSpan DataUtf8Bytes { get; } Property Value Type Description Utf8ByteSpan IsDataUtf8Bytes Declaration public bool IsDataUtf8Bytes { get; } Property Value Type Description bool LastEventId Declaration public string LastEventId { get; } Property Value Type Description string Name Declaration public string Name { get; } Property Value Type Description string Origin Declaration public Uri Origin { get; } Property Value Type Description Uri Methods Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides ValueType.Equals(object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode()"
  },
  "api/LaunchDarkly.EventSource.MessageReceivedEventArgs.html": {
    "href": "api/LaunchDarkly.EventSource.MessageReceivedEventArgs.html",
    "title": "Class MessageReceivedEventArgs | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class MessageReceivedEventArgs Inheritance object EventArgs MessageReceivedEventArgs Inherited Members EventArgs.Empty object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.EventSource Assembly: LaunchDarkly.EventSource.dll Syntax public class MessageReceivedEventArgs : EventArgs Constructors MessageReceivedEventArgs(MessageEvent) Declaration public MessageReceivedEventArgs(MessageEvent message) Parameters Type Name Description MessageEvent message Properties EventName Declaration public string EventName { get; } Property Value Type Description string Message Declaration public MessageEvent Message { get; } Property Value Type Description MessageEvent"
  },
  "api/LaunchDarkly.EventSource.ReadTimeoutException.html": {
    "href": "api/LaunchDarkly.EventSource.ReadTimeoutException.html",
    "title": "Class ReadTimeoutException | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class ReadTimeoutException Inheritance object Exception ReadTimeoutException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace Exception.SerializeObjectState object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.EventSource Assembly: LaunchDarkly.EventSource.dll Syntax public class ReadTimeoutException : Exception, ISerializable Constructors ReadTimeoutException() Declaration public ReadTimeoutException() Properties Message Declaration public override string Message { get; } Property Value Type Description string Overrides Exception.Message Implements ISerializable"
  },
  "api/LaunchDarkly.EventSource.ReadyState.html": {
    "href": "api/LaunchDarkly.EventSource.ReadyState.html",
    "title": "Enum ReadyState | LaunchDarkly Dotnet Server SDK",
    "keywords": "Enum ReadyState Namespace: LaunchDarkly.EventSource Assembly: LaunchDarkly.EventSource.dll Syntax public enum ReadyState Fields Name Description Closed Connecting Open Raw Shutdown"
  },
  "api/LaunchDarkly.EventSource.StateChangedEventArgs.html": {
    "href": "api/LaunchDarkly.EventSource.StateChangedEventArgs.html",
    "title": "Class StateChangedEventArgs | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class StateChangedEventArgs Inheritance object EventArgs StateChangedEventArgs Inherited Members EventArgs.Empty object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.EventSource Assembly: LaunchDarkly.EventSource.dll Syntax public class StateChangedEventArgs : EventArgs Constructors StateChangedEventArgs(ReadyState) Declaration public StateChangedEventArgs(ReadyState readyState) Parameters Type Name Description ReadyState readyState Properties ReadyState Declaration public ReadyState ReadyState { get; } Property Value Type Description ReadyState"
  },
  "api/LaunchDarkly.EventSource.Utf8ByteSpan.html": {
    "href": "api/LaunchDarkly.EventSource.Utf8ByteSpan.html",
    "title": "Struct Utf8ByteSpan | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct Utf8ByteSpan Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: LaunchDarkly.EventSource Assembly: LaunchDarkly.EventSource.dll Syntax public struct Utf8ByteSpan Constructors Utf8ByteSpan(byte[], int, int) Declaration public Utf8ByteSpan(byte[] data, int offset, int length) Parameters Type Name Description byte[] data int offset int length Utf8ByteSpan(string) Declaration public Utf8ByteSpan(string s) Parameters Type Name Description string s Properties Data Declaration public byte[] Data { get; } Property Value Type Description byte[] Length Declaration public int Length { get; } Property Value Type Description int Offset Declaration public int Offset { get; } Property Value Type Description int Methods Equals(Utf8ByteSpan) Declaration public bool Equals(Utf8ByteSpan other) Parameters Type Name Description Utf8ByteSpan other Returns Type Description bool Equals(string) Declaration public bool Equals(string s) Parameters Type Name Description string s Returns Type Description bool GetString() Declaration public string GetString() Returns Type Description string"
  },
  "api/LaunchDarkly.EventSource.html": {
    "href": "api/LaunchDarkly.EventSource.html",
    "title": "Namespace LaunchDarkly.EventSource | LaunchDarkly Dotnet Server SDK",
    "keywords": "Namespace LaunchDarkly.EventSource Classes CommentReceivedEventArgs Configuration ConfigurationBuilder EventSource EventSourceServiceCancelledException EventSourceServiceUnsuccessfulResponseException ExceptionEventArgs MessageReceivedEventArgs ReadTimeoutException StateChangedEventArgs Structs MessageEvent Utf8ByteSpan Interfaces IEventSource Enums ReadyState"
  },
  "api/LaunchDarkly.Logging.Extensions.html": {
    "href": "api/LaunchDarkly.Logging.Extensions.html",
    "title": "Class Extensions | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class Extensions Inheritance object Extensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Logging Assembly: LaunchDarkly.Logging.dll Syntax public static class Extensions Methods Uppercase(LogLevel) Declaration public static string Uppercase(this LogLevel level) Parameters Type Name Description LogLevel level Returns Type Description string"
  },
  "api/LaunchDarkly.Logging.IChannel.html": {
    "href": "api/LaunchDarkly.Logging.IChannel.html",
    "title": "Interface IChannel | LaunchDarkly Dotnet Server SDK",
    "keywords": "Interface IChannel Namespace: LaunchDarkly.Logging Assembly: LaunchDarkly.Logging.dll Syntax public interface IChannel Methods IsEnabled(LogLevel) Declaration bool IsEnabled(LogLevel level) Parameters Type Name Description LogLevel level Returns Type Description bool Log(LogLevel, object) Declaration void Log(LogLevel level, object message) Parameters Type Name Description LogLevel level object message Log(LogLevel, string, object) Declaration void Log(LogLevel level, string format, object param) Parameters Type Name Description LogLevel level string format object param Log(LogLevel, string, object, object) Declaration void Log(LogLevel level, string format, object param1, object param2) Parameters Type Name Description LogLevel level string format object param1 object param2 Log(LogLevel, string, params object[]) Declaration void Log(LogLevel level, string format, params object[] allParams) Parameters Type Name Description LogLevel level string format object[] allParams"
  },
  "api/LaunchDarkly.Logging.ILogAdapter.html": {
    "href": "api/LaunchDarkly.Logging.ILogAdapter.html",
    "title": "Interface ILogAdapter | LaunchDarkly Dotnet Server SDK",
    "keywords": "Interface ILogAdapter Namespace: LaunchDarkly.Logging Assembly: LaunchDarkly.Logging.dll Syntax public interface ILogAdapter Methods NewChannel(string) Declaration IChannel NewChannel(string name) Parameters Type Name Description string name Returns Type Description IChannel Extension Methods ILogAdapterExtensions.Level(ILogAdapter, LogLevel) ILogAdapterExtensions.Logger(ILogAdapter, string)"
  },
  "api/LaunchDarkly.Logging.ILogAdapterExtensions.html": {
    "href": "api/LaunchDarkly.Logging.ILogAdapterExtensions.html",
    "title": "Class ILogAdapterExtensions | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class ILogAdapterExtensions Inheritance object ILogAdapterExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Logging Assembly: LaunchDarkly.Logging.dll Syntax public static class ILogAdapterExtensions Methods Level(ILogAdapter, LogLevel) Declaration public static ILogAdapter Level(this ILogAdapter adapter, LogLevel minimumLevel) Parameters Type Name Description ILogAdapter adapter LogLevel minimumLevel Returns Type Description ILogAdapter Logger(ILogAdapter, string) Declaration public static Logger Logger(this ILogAdapter adapter, string name) Parameters Type Name Description ILogAdapter adapter string name Returns Type Description Logger"
  },
  "api/LaunchDarkly.Logging.LogCapture.Message.html": {
    "href": "api/LaunchDarkly.Logging.LogCapture.Message.html",
    "title": "Struct LogCapture.Message | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct LogCapture.Message Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Logging Assembly: LaunchDarkly.Logging.dll Syntax public struct LogCapture.Message Constructors Message(string, LogLevel, string) Declaration public Message(string loggerName, LogLevel level, string text) Parameters Type Name Description string loggerName LogLevel level string text Properties Level Declaration public LogLevel Level { get; } Property Value Type Description LogLevel LoggerName Declaration public string LoggerName { get; } Property Value Type Description string Text Declaration public string Text { get; } Property Value Type Description string Methods ToString() Declaration public override string ToString() Returns Type Description string Overrides ValueType.ToString()"
  },
  "api/LaunchDarkly.Logging.LogCapture.html": {
    "href": "api/LaunchDarkly.Logging.LogCapture.html",
    "title": "Class LogCapture | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class LogCapture Inheritance object LogCapture Implements ILogAdapter Inherited Members object.GetType() object.MemberwiseClone() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Logging Assembly: LaunchDarkly.Logging.dll Syntax public class LogCapture : ILogAdapter Constructors LogCapture() Declaration public LogCapture() Methods GetMessageStrings() Declaration public List<string> GetMessageStrings() Returns Type Description List<string> GetMessages() Declaration public List<LogCapture.Message> GetMessages() Returns Type Description List<LogCapture.Message> HasMessageWithRegex(LogLevel, string) Declaration public bool HasMessageWithRegex(LogLevel level, string pattern) Parameters Type Name Description LogLevel level string pattern Returns Type Description bool HasMessageWithText(LogLevel, string) Declaration public bool HasMessageWithText(LogLevel level, string text) Parameters Type Name Description LogLevel level string text Returns Type Description bool NewChannel(string) Declaration public IChannel NewChannel(string name) Parameters Type Name Description string name Returns Type Description IChannel ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString() Implements ILogAdapter Extension Methods ILogAdapterExtensions.Level(ILogAdapter, LogLevel) ILogAdapterExtensions.Logger(ILogAdapter, string)"
  },
  "api/LaunchDarkly.Logging.LogLevel.html": {
    "href": "api/LaunchDarkly.Logging.LogLevel.html",
    "title": "Enum LogLevel | LaunchDarkly Dotnet Server SDK",
    "keywords": "Enum LogLevel Namespace: LaunchDarkly.Logging Assembly: LaunchDarkly.Logging.dll Syntax public enum LogLevel Fields Name Description Debug Error Info None Warn Extension Methods Extensions.Uppercase(LogLevel)"
  },
  "api/LaunchDarkly.Logging.LogValues.html": {
    "href": "api/LaunchDarkly.Logging.LogValues.html",
    "title": "Class LogValues | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class LogValues Inheritance object LogValues Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Logging Assembly: LaunchDarkly.Logging.dll Syntax public static class LogValues Methods Defer(Func<string>) Declaration public static object Defer(Func<string> stringProvider) Parameters Type Name Description Func<string> stringProvider Returns Type Description object ExceptionSummary(Exception) Declaration public static object ExceptionSummary(Exception e) Parameters Type Name Description Exception e Returns Type Description object ExceptionTrace(Exception) Declaration public static object ExceptionTrace(Exception e) Parameters Type Name Description Exception e Returns Type Description object"
  },
  "api/LaunchDarkly.Logging.Logger.html": {
    "href": "api/LaunchDarkly.Logging.Logger.html",
    "title": "Class Logger | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class Logger Inheritance object Logger Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Logging Assembly: LaunchDarkly.Logging.dll Syntax public sealed class Logger Methods Debug(object) Declaration public void Debug(object message) Parameters Type Name Description object message Debug(string, object) Declaration public void Debug(string format, object param) Parameters Type Name Description string format object param Debug(string, object, object) Declaration public void Debug(string format, object param1, object param2) Parameters Type Name Description string format object param1 object param2 Debug(string, params object[]) Declaration public void Debug(string format, params object[] allParams) Parameters Type Name Description string format object[] allParams Error(object) Declaration public void Error(object message) Parameters Type Name Description object message Error(string, object, object) Declaration public void Error(string format, object param1, object param2) Parameters Type Name Description string format object param1 object param2 Error(string, params object[]) Declaration public void Error(string format, params object[] allParams) Parameters Type Name Description string format object[] allParams Info(object) Declaration public void Info(object message) Parameters Type Name Description object message Info(string, object) Declaration public void Info(string format, object param) Parameters Type Name Description string format object param Info(string, object, object) Declaration public void Info(string format, object param1, object param2) Parameters Type Name Description string format object param1 object param2 Info(string, params object[]) Declaration public void Info(string format, params object[] allParams) Parameters Type Name Description string format object[] allParams IsEnabled(LogLevel) Declaration public bool IsEnabled(LogLevel level) Parameters Type Name Description LogLevel level Returns Type Description bool SubLogger(string) Declaration public Logger SubLogger(string nameSuffix) Parameters Type Name Description string nameSuffix Returns Type Description Logger Warn(object) Declaration public void Warn(object message) Parameters Type Name Description object message Warn(string, object) Declaration public void Warn(string format, object param) Parameters Type Name Description string format object param Warn(string, object, object) Declaration public void Warn(string format, object param1, object param2) Parameters Type Name Description string format object param1 object param2 Warn(string, params object[]) Declaration public void Warn(string format, params object[] allParams) Parameters Type Name Description string format object[] allParams WithAdapter(ILogAdapter, string) Declaration public static Logger WithAdapter(ILogAdapter adapter, string name) Parameters Type Name Description ILogAdapter adapter string name Returns Type Description Logger error(string, object) Declaration public void error(string format, object param) Parameters Type Name Description string format object param"
  },
  "api/LaunchDarkly.Logging.Logs.html": {
    "href": "api/LaunchDarkly.Logging.Logs.html",
    "title": "Class Logs | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class Logs Inheritance object Logs Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Logging Assembly: LaunchDarkly.Logging.dll Syntax public static class Logs Properties Default Declaration public static ILogAdapter Default { get; } Property Value Type Description ILogAdapter None Declaration public static ILogAdapter None { get; } Property Value Type Description ILogAdapter ToConsole Declaration public static SimpleLogging ToConsole { get; } Property Value Type Description SimpleLogging Methods Capture() Declaration public static LogCapture Capture() Returns Type Description LogCapture CoreLogging(ILoggerFactory) Declaration public static ILogAdapter CoreLogging(ILoggerFactory loggerFactory) Parameters Type Name Description ILoggerFactory loggerFactory Returns Type Description ILogAdapter ToMethod(Action<string>) Declaration public static SimpleLogging ToMethod(Action<string> writeLineMethod) Parameters Type Name Description Action<string> writeLineMethod Returns Type Description SimpleLogging ToMultiple(params ILogAdapter[]) Declaration public static ILogAdapter ToMultiple(params ILogAdapter[] logAdapters) Parameters Type Name Description ILogAdapter[] logAdapters Returns Type Description ILogAdapter ToWriter(TextWriter) Declaration public static SimpleLogging ToWriter(TextWriter stream) Parameters Type Name Description TextWriter stream Returns Type Description SimpleLogging"
  },
  "api/LaunchDarkly.Logging.SimpleLogging.html": {
    "href": "api/LaunchDarkly.Logging.SimpleLogging.html",
    "title": "Class SimpleLogging | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class SimpleLogging Inheritance object SimpleLogging Implements ILogAdapter Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Logging Assembly: LaunchDarkly.Logging.dll Syntax public class SimpleLogging : ILogAdapter Fields DefaultDateFormat Declaration public const string DefaultDateFormat = \"yyyy-MM-dd HH:mm:ss.fff zzz\" Field Value Type Description string Methods DateFormat(string) Declaration public SimpleLogging DateFormat(string dateFormat) Parameters Type Name Description string dateFormat Returns Type Description SimpleLogging NewChannel(string) Declaration public IChannel NewChannel(string name) Parameters Type Name Description string name Returns Type Description IChannel Implements ILogAdapter Extension Methods ILogAdapterExtensions.Level(ILogAdapter, LogLevel) ILogAdapterExtensions.Logger(ILogAdapter, string)"
  },
  "api/LaunchDarkly.Logging.html": {
    "href": "api/LaunchDarkly.Logging.html",
    "title": "Namespace LaunchDarkly.Logging | LaunchDarkly Dotnet Server SDK",
    "keywords": "Namespace LaunchDarkly.Logging Classes Extensions ILogAdapterExtensions LogCapture LogValues Logger Logs SimpleLogging Structs LogCapture.Message Interfaces IChannel ILogAdapter Enums LogLevel"
  },
  "api/LaunchDarkly.Sdk.ApplicationInfo.html": {
    "href": "api/LaunchDarkly.Sdk.ApplicationInfo.html",
    "title": "Struct ApplicationInfo | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct ApplicationInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk Assembly: LaunchDarkly.CommonSdk.dll Syntax public readonly struct ApplicationInfo Constructors ApplicationInfo(string, string, string, string) Declaration public ApplicationInfo(string id, string name, string version, string versionName) Parameters Type Name Description string id string name string version string versionName Properties ApplicationId Declaration public string ApplicationId { get; } Property Value Type Description string ApplicationName Declaration public string ApplicationName { get; } Property Value Type Description string ApplicationVersion Declaration public string ApplicationVersion { get; } Property Value Type Description string ApplicationVersionName Declaration public string ApplicationVersionName { get; } Property Value Type Description string"
  },
  "api/LaunchDarkly.Sdk.ApplicationInfoBuilder.html": {
    "href": "api/LaunchDarkly.Sdk.ApplicationInfoBuilder.html",
    "title": "Class ApplicationInfoBuilder | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class ApplicationInfoBuilder Inheritance object ApplicationInfoBuilder Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Sdk Assembly: LaunchDarkly.CommonSdk.dll Syntax public sealed class ApplicationInfoBuilder Constructors ApplicationInfoBuilder() Declaration public ApplicationInfoBuilder() Methods ApplicationId(string) Declaration public ApplicationInfoBuilder ApplicationId(string applicationId) Parameters Type Name Description string applicationId Returns Type Description ApplicationInfoBuilder ApplicationName(string) Declaration public ApplicationInfoBuilder ApplicationName(string applicationName) Parameters Type Name Description string applicationName Returns Type Description ApplicationInfoBuilder ApplicationVersion(string) Declaration public ApplicationInfoBuilder ApplicationVersion(string applicationVersion) Parameters Type Name Description string applicationVersion Returns Type Description ApplicationInfoBuilder ApplicationVersionName(string) Declaration public ApplicationInfoBuilder ApplicationVersionName(string applicationVersionName) Parameters Type Name Description string applicationVersionName Returns Type Description ApplicationInfoBuilder Build() Declaration public ApplicationInfo Build() Returns Type Description ApplicationInfo"
  },
  "api/LaunchDarkly.Sdk.AttributeRef.html": {
    "href": "api/LaunchDarkly.Sdk.AttributeRef.html",
    "title": "Struct AttributeRef | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct AttributeRef Implements IEquatable<AttributeRef> IJsonSerializable Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk Assembly: LaunchDarkly.CommonSdk.dll Syntax [JsonConverter(typeof(LdJsonConverters.AttributeRefConverter))] public readonly struct AttributeRef : IEquatable<AttributeRef>, IJsonSerializable Properties Defined Declaration public bool Defined { get; } Property Value Type Description bool Depth Declaration public int Depth { get; } Property Value Type Description int Error Declaration public string Error { get; } Property Value Type Description string Valid Declaration public bool Valid { get; } Property Value Type Description bool Methods Equals(AttributeRef) Declaration public bool Equals(AttributeRef other) Parameters Type Name Description AttributeRef other Returns Type Description bool Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides ValueType.Equals(object) FromLiteral(string) Declaration public static AttributeRef FromLiteral(string attributeName) Parameters Type Name Description string attributeName Returns Type Description AttributeRef FromPath(string) Declaration public static AttributeRef FromPath(string refPath) Parameters Type Name Description string refPath Returns Type Description AttributeRef GetComponent(int) Declaration public string GetComponent(int index) Parameters Type Name Description int index Returns Type Description string GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode() ToString() Declaration public override string ToString() Returns Type Description string Overrides ValueType.ToString() Implements IEquatable<T> IJsonSerializable"
  },
  "api/LaunchDarkly.Sdk.BigSegmentsStatus.html": {
    "href": "api/LaunchDarkly.Sdk.BigSegmentsStatus.html",
    "title": "Enum BigSegmentsStatus | LaunchDarkly Dotnet Server SDK",
    "keywords": "Enum BigSegmentsStatus Namespace: LaunchDarkly.Sdk Assembly: LaunchDarkly.CommonSdk.dll Syntax [JsonConverter(typeof(LdJsonConverters.BigSegmentsStatusConverter))] public enum BigSegmentsStatus Fields Name Description Healthy NotConfigured Stale StoreError"
  },
  "api/LaunchDarkly.Sdk.Context.html": {
    "href": "api/LaunchDarkly.Sdk.Context.html",
    "title": "Struct Context | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct Context Implements IEquatable<Context> IJsonSerializable Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk Assembly: LaunchDarkly.CommonSdk.dll Syntax [JsonConverter(typeof(LdJsonConverters.ContextConverter))] public readonly struct Context : IEquatable<Context>, IJsonSerializable Properties Anonymous Declaration public bool Anonymous { get; } Property Value Type Description bool Defined Declaration public bool Defined { get; } Property Value Type Description bool Error Declaration public string Error { get; } Property Value Type Description string FullyQualifiedKey Declaration public string FullyQualifiedKey { get; } Property Value Type Description string Key Declaration public string Key { get; } Property Value Type Description string Kind Declaration public ContextKind Kind { get; } Property Value Type Description ContextKind MultiKindContexts Declaration public ImmutableList<Context> MultiKindContexts { get; } Property Value Type Description ImmutableList<Context> Multiple Declaration public bool Multiple { get; } Property Value Type Description bool Name Declaration public string Name { get; } Property Value Type Description string OptionalAttributeNames Declaration public IEnumerable<string> OptionalAttributeNames { get; } Property Value Type Description IEnumerable<string> PrivateAttributes Declaration public ImmutableList<AttributeRef> PrivateAttributes { get; } Property Value Type Description ImmutableList<AttributeRef> Valid Declaration public bool Valid { get; } Property Value Type Description bool Methods Builder(ContextKind, string) Declaration public static ContextBuilder Builder(ContextKind kind, string key) Parameters Type Name Description ContextKind kind string key Returns Type Description ContextBuilder Builder(string) Declaration public static ContextBuilder Builder(string key) Parameters Type Name Description string key Returns Type Description ContextBuilder BuilderFromContext(Context) Declaration public static ContextBuilder BuilderFromContext(Context context) Parameters Type Name Description Context context Returns Type Description ContextBuilder Equals(Context) Declaration public bool Equals(Context other) Parameters Type Name Description Context other Returns Type Description bool Equals(object) Declaration public override bool Equals(object other) Parameters Type Name Description object other Returns Type Description bool Overrides ValueType.Equals(object) FromUser(User) Declaration public static Context FromUser(User user) Parameters Type Name Description User user Returns Type Description Context GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode() GetValue(in AttributeRef) Declaration public LdValue GetValue(in AttributeRef attributeRef) Parameters Type Name Description AttributeRef attributeRef Returns Type Description LdValue GetValue(string) Declaration public LdValue GetValue(string attributeName) Parameters Type Name Description string attributeName Returns Type Description LdValue MultiBuilder() Declaration public static ContextMultiBuilder MultiBuilder() Returns Type Description ContextMultiBuilder New(ContextKind, string) Declaration public static Context New(ContextKind kind, string key) Parameters Type Name Description ContextKind kind string key Returns Type Description Context New(string) Declaration public static Context New(string key) Parameters Type Name Description string key Returns Type Description Context NewMulti(params Context[]) Declaration public static Context NewMulti(params Context[] contexts) Parameters Type Name Description Context[] contexts Returns Type Description Context ToString() Declaration public override string ToString() Returns Type Description string Overrides ValueType.ToString() TryGetContextByKind(ContextKind, out Context) Declaration public bool TryGetContextByKind(ContextKind kind, out Context context) Parameters Type Name Description ContextKind kind Context context Returns Type Description bool Implements IEquatable<T> IJsonSerializable"
  },
  "api/LaunchDarkly.Sdk.ContextBuilder.html": {
    "href": "api/LaunchDarkly.Sdk.ContextBuilder.html",
    "title": "Class ContextBuilder | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class ContextBuilder Inheritance object ContextBuilder Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Sdk Assembly: LaunchDarkly.CommonSdk.dll Syntax public sealed class ContextBuilder Methods Anonymous(bool) Declaration public ContextBuilder Anonymous(bool anonymous) Parameters Type Name Description bool anonymous Returns Type Description ContextBuilder Build() Declaration public Context Build() Returns Type Description Context Key(string) Declaration public ContextBuilder Key(string key) Parameters Type Name Description string key Returns Type Description ContextBuilder Kind(ContextKind) Declaration public ContextBuilder Kind(ContextKind kind) Parameters Type Name Description ContextKind kind Returns Type Description ContextBuilder Kind(string) Declaration public ContextBuilder Kind(string kindString) Parameters Type Name Description string kindString Returns Type Description ContextBuilder Name(string) Declaration public ContextBuilder Name(string name) Parameters Type Name Description string name Returns Type Description ContextBuilder Private(params AttributeRef[]) Declaration public ContextBuilder Private(params AttributeRef[] attributeRefs) Parameters Type Name Description AttributeRef[] attributeRefs Returns Type Description ContextBuilder Private(params string[]) Declaration public ContextBuilder Private(params string[] attributeRefs) Parameters Type Name Description string[] attributeRefs Returns Type Description ContextBuilder Remove(string) Declaration public ContextBuilder Remove(string attributeName) Parameters Type Name Description string attributeName Returns Type Description ContextBuilder Set(string, LdValue) Declaration public ContextBuilder Set(string attributeName, LdValue value) Parameters Type Name Description string attributeName LdValue value Returns Type Description ContextBuilder Set(string, bool) Declaration public ContextBuilder Set(string attributeName, bool value) Parameters Type Name Description string attributeName bool value Returns Type Description ContextBuilder Set(string, double) Declaration public ContextBuilder Set(string attributeName, double value) Parameters Type Name Description string attributeName double value Returns Type Description ContextBuilder Set(string, int) Declaration public ContextBuilder Set(string attributeName, int value) Parameters Type Name Description string attributeName int value Returns Type Description ContextBuilder Set(string, long) Declaration public ContextBuilder Set(string attributeName, long value) Parameters Type Name Description string attributeName long value Returns Type Description ContextBuilder Set(string, string) Declaration public ContextBuilder Set(string attributeName, string value) Parameters Type Name Description string attributeName string value Returns Type Description ContextBuilder TrySet(string, LdValue) Declaration public bool TrySet(string attributeName, LdValue value) Parameters Type Name Description string attributeName LdValue value Returns Type Description bool"
  },
  "api/LaunchDarkly.Sdk.ContextKind.html": {
    "href": "api/LaunchDarkly.Sdk.ContextKind.html",
    "title": "Struct ContextKind | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct ContextKind Implements IEquatable<ContextKind> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk Assembly: LaunchDarkly.CommonSdk.dll Syntax public readonly struct ContextKind : IEquatable<ContextKind> Constructors ContextKind(string) Declaration public ContextKind(string stringValue) Parameters Type Name Description string stringValue Fields Default Declaration public static readonly ContextKind Default Field Value Type Description ContextKind Multi Declaration public static readonly ContextKind Multi Field Value Type Description ContextKind Properties IsDefault Declaration public bool IsDefault { get; } Property Value Type Description bool Value Declaration public string Value { get; } Property Value Type Description string Methods Equals(ContextKind) Declaration public bool Equals(ContextKind other) Parameters Type Name Description ContextKind other Returns Type Description bool Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides ValueType.Equals(object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode() Of(string) Declaration public static ContextKind Of(string stringValue) Parameters Type Name Description string stringValue Returns Type Description ContextKind ToString() Declaration public override string ToString() Returns Type Description string Overrides ValueType.ToString() Operators operator ==(ContextKind, ContextKind) Declaration public static bool operator ==(ContextKind a, ContextKind b) Parameters Type Name Description ContextKind a ContextKind b Returns Type Description bool operator !=(ContextKind, ContextKind) Declaration public static bool operator !=(ContextKind a, ContextKind b) Parameters Type Name Description ContextKind a ContextKind b Returns Type Description bool Implements IEquatable<T>"
  },
  "api/LaunchDarkly.Sdk.ContextMultiBuilder.html": {
    "href": "api/LaunchDarkly.Sdk.ContextMultiBuilder.html",
    "title": "Class ContextMultiBuilder | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class ContextMultiBuilder Inheritance object ContextMultiBuilder Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Sdk Assembly: LaunchDarkly.CommonSdk.dll Syntax public sealed class ContextMultiBuilder Constructors ContextMultiBuilder() Declaration public ContextMultiBuilder() Methods Add(Context) Declaration public ContextMultiBuilder Add(Context context) Parameters Type Name Description Context context Returns Type Description ContextMultiBuilder Build() Declaration public Context Build() Returns Type Description Context"
  },
  "api/LaunchDarkly.Sdk.EnvReporting.ConfigLayerBuilder.html": {
    "href": "api/LaunchDarkly.Sdk.EnvReporting.ConfigLayerBuilder.html",
    "title": "Class ConfigLayerBuilder | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class ConfigLayerBuilder Inheritance object ConfigLayerBuilder Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Sdk.EnvReporting Assembly: LaunchDarkly.CommonSdk.dll Syntax public class ConfigLayerBuilder Constructors ConfigLayerBuilder() Declaration public ConfigLayerBuilder() Methods Build() Declaration public Layer Build() Returns Type Description Layer SetAppInfo(ApplicationInfo) Declaration public ConfigLayerBuilder SetAppInfo(ApplicationInfo info) Parameters Type Name Description ApplicationInfo info Returns Type Description ConfigLayerBuilder"
  },
  "api/LaunchDarkly.Sdk.EnvReporting.EnvironmentReporterBuilder.html": {
    "href": "api/LaunchDarkly.Sdk.EnvReporting.EnvironmentReporterBuilder.html",
    "title": "Class EnvironmentReporterBuilder | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class EnvironmentReporterBuilder Inheritance object EnvironmentReporterBuilder Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Sdk.EnvReporting Assembly: LaunchDarkly.CommonSdk.dll Syntax public sealed class EnvironmentReporterBuilder Constructors EnvironmentReporterBuilder() Declaration public EnvironmentReporterBuilder() Methods Build() Declaration public IEnvironmentReporter Build() Returns Type Description IEnvironmentReporter SetConfigLayer(Layer) Declaration public EnvironmentReporterBuilder SetConfigLayer(Layer config) Parameters Type Name Description Layer config Returns Type Description EnvironmentReporterBuilder SetPlatformLayer(Layer) Declaration public EnvironmentReporterBuilder SetPlatformLayer(Layer platform) Parameters Type Name Description Layer platform Returns Type Description EnvironmentReporterBuilder SetSdkLayer(Layer) Declaration public EnvironmentReporterBuilder SetSdkLayer(Layer sdkLayer) Parameters Type Name Description Layer sdkLayer Returns Type Description EnvironmentReporterBuilder"
  },
  "api/LaunchDarkly.Sdk.EnvReporting.IEnvironmentReporter.html": {
    "href": "api/LaunchDarkly.Sdk.EnvReporting.IEnvironmentReporter.html",
    "title": "Interface IEnvironmentReporter | LaunchDarkly Dotnet Server SDK",
    "keywords": "Interface IEnvironmentReporter Namespace: LaunchDarkly.Sdk.EnvReporting Assembly: LaunchDarkly.CommonSdk.dll Syntax public interface IEnvironmentReporter Properties ApplicationInfo Declaration ApplicationInfo? ApplicationInfo { get; } Property Value Type Description ApplicationInfo? DeviceInfo Declaration DeviceInfo? DeviceInfo { get; } Property Value Type Description DeviceInfo? Locale Declaration string Locale { get; } Property Value Type Description string OsInfo Declaration OsInfo? OsInfo { get; } Property Value Type Description OsInfo?"
  },
  "api/LaunchDarkly.Sdk.EnvReporting.Layer.html": {
    "href": "api/LaunchDarkly.Sdk.EnvReporting.Layer.html",
    "title": "Struct Layer | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct Layer Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk.EnvReporting Assembly: LaunchDarkly.CommonSdk.dll Syntax public readonly struct Layer Constructors Layer(ApplicationInfo?, OsInfo?, DeviceInfo?, string) Declaration public Layer(ApplicationInfo? appInfo, OsInfo? osInfo, DeviceInfo? deviceInfo, string locale) Parameters Type Name Description ApplicationInfo? appInfo OsInfo? osInfo DeviceInfo? deviceInfo string locale Properties ApplicationInfo Declaration public ApplicationInfo? ApplicationInfo { get; } Property Value Type Description ApplicationInfo? DeviceInfo Declaration public DeviceInfo? DeviceInfo { get; } Property Value Type Description DeviceInfo? Locale Declaration public string Locale { get; } Property Value Type Description string OsInfo Declaration public OsInfo? OsInfo { get; } Property Value Type Description OsInfo?"
  },
  "api/LaunchDarkly.Sdk.EnvReporting.LayerModels.DeviceInfo.html": {
    "href": "api/LaunchDarkly.Sdk.EnvReporting.LayerModels.DeviceInfo.html",
    "title": "Struct DeviceInfo | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct DeviceInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk.EnvReporting.LayerModels Assembly: LaunchDarkly.CommonSdk.dll Syntax public readonly struct DeviceInfo Constructors DeviceInfo(string, string) Declaration public DeviceInfo(string manufacturer, string model) Parameters Type Name Description string manufacturer string model Properties Manufacturer Declaration public string Manufacturer { get; } Property Value Type Description string Model Declaration public string Model { get; } Property Value Type Description string"
  },
  "api/LaunchDarkly.Sdk.EnvReporting.LayerModels.OsInfo.html": {
    "href": "api/LaunchDarkly.Sdk.EnvReporting.LayerModels.OsInfo.html",
    "title": "Struct OsInfo | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct OsInfo Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk.EnvReporting.LayerModels Assembly: LaunchDarkly.CommonSdk.dll Syntax public readonly struct OsInfo Constructors OsInfo(string, string, string) Declaration public OsInfo(string family, string name, string version) Parameters Type Name Description string family string name string version Properties Family Declaration public string Family { get; } Property Value Type Description string Name Declaration public string Name { get; } Property Value Type Description string Version Declaration public string Version { get; } Property Value Type Description string"
  },
  "api/LaunchDarkly.Sdk.EnvReporting.LayerModels.html": {
    "href": "api/LaunchDarkly.Sdk.EnvReporting.LayerModels.html",
    "title": "Namespace LaunchDarkly.Sdk.EnvReporting.LayerModels | LaunchDarkly Dotnet Server SDK",
    "keywords": "Namespace LaunchDarkly.Sdk.EnvReporting.LayerModels Structs DeviceInfo OsInfo"
  },
  "api/LaunchDarkly.Sdk.EnvReporting.html": {
    "href": "api/LaunchDarkly.Sdk.EnvReporting.html",
    "title": "Namespace LaunchDarkly.Sdk.EnvReporting | LaunchDarkly Dotnet Server SDK",
    "keywords": "Namespace LaunchDarkly.Sdk.EnvReporting Classes ConfigLayerBuilder EnvironmentReporterBuilder Structs Layer Interfaces IEnvironmentReporter"
  },
  "api/LaunchDarkly.Sdk.EvaluationDetail-1.html": {
    "href": "api/LaunchDarkly.Sdk.EvaluationDetail-1.html",
    "title": "Struct EvaluationDetail<T> | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct EvaluationDetail<T> Inherited Members ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk Assembly: LaunchDarkly.CommonSdk.dll Syntax public struct EvaluationDetail<T> Type Parameters Name Description T Constructors EvaluationDetail(T, int?, EvaluationReason) Declaration public EvaluationDetail(T value, int? variationIndex, EvaluationReason reason) Parameters Type Name Description T value int? variationIndex EvaluationReason reason Properties IsDefaultValue Declaration public bool IsDefaultValue { get; } Property Value Type Description bool Reason Declaration public EvaluationReason Reason { get; } Property Value Type Description EvaluationReason Value Declaration public T Value { get; } Property Value Type Description T VariationIndex Declaration public int? VariationIndex { get; } Property Value Type Description int? Methods Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides ValueType.Equals(object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode()"
  },
  "api/LaunchDarkly.Sdk.EvaluationErrorKind.html": {
    "href": "api/LaunchDarkly.Sdk.EvaluationErrorKind.html",
    "title": "Enum EvaluationErrorKind | LaunchDarkly Dotnet Server SDK",
    "keywords": "Enum EvaluationErrorKind Namespace: LaunchDarkly.Sdk Assembly: LaunchDarkly.CommonSdk.dll Syntax [JsonConverter(typeof(LdJsonConverters.EvaluationErrorKindConverter))] public enum EvaluationErrorKind Fields Name Description ClientNotReady Exception FlagNotFound MalformedFlag UserNotSpecified WrongType"
  },
  "api/LaunchDarkly.Sdk.EvaluationReason.html": {
    "href": "api/LaunchDarkly.Sdk.EvaluationReason.html",
    "title": "Struct EvaluationReason | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct EvaluationReason Implements IJsonSerializable Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk Assembly: LaunchDarkly.CommonSdk.dll Syntax [JsonConverter(typeof(LdJsonConverters.EvaluationReasonConverter))] public struct EvaluationReason : IJsonSerializable Properties BigSegmentsStatus Declaration public BigSegmentsStatus? BigSegmentsStatus { get; } Property Value Type Description BigSegmentsStatus? ErrorKind Declaration public EvaluationErrorKind? ErrorKind { get; } Property Value Type Description EvaluationErrorKind? FallthroughReason Declaration public static EvaluationReason FallthroughReason { get; } Property Value Type Description EvaluationReason InExperiment Declaration public bool InExperiment { get; } Property Value Type Description bool Kind Declaration public EvaluationReasonKind Kind { get; } Property Value Type Description EvaluationReasonKind OffReason Declaration public static EvaluationReason OffReason { get; } Property Value Type Description EvaluationReason PrerequisiteKey Declaration public string PrerequisiteKey { get; } Property Value Type Description string RuleId Declaration public string RuleId { get; } Property Value Type Description string RuleIndex Declaration public int? RuleIndex { get; } Property Value Type Description int? TargetMatchReason Declaration public static EvaluationReason TargetMatchReason { get; } Property Value Type Description EvaluationReason Methods Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides ValueType.Equals(object) ErrorReason(EvaluationErrorKind) Declaration public static EvaluationReason ErrorReason(EvaluationErrorKind errorKind) Parameters Type Name Description EvaluationErrorKind errorKind Returns Type Description EvaluationReason GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode() PrerequisiteFailedReason(string) Declaration public static EvaluationReason PrerequisiteFailedReason(string key) Parameters Type Name Description string key Returns Type Description EvaluationReason RuleMatchReason(int, string) Declaration public static EvaluationReason RuleMatchReason(int ruleIndex, string ruleId) Parameters Type Name Description int ruleIndex string ruleId Returns Type Description EvaluationReason ToString() Declaration public override string ToString() Returns Type Description string Overrides ValueType.ToString() WithBigSegmentsStatus(BigSegmentsStatus?) Declaration public EvaluationReason WithBigSegmentsStatus(BigSegmentsStatus? bigSegmentsStatus) Parameters Type Name Description BigSegmentsStatus? bigSegmentsStatus Returns Type Description EvaluationReason WithInExperiment(bool) Declaration public EvaluationReason WithInExperiment(bool inExperiment) Parameters Type Name Description bool inExperiment Returns Type Description EvaluationReason Implements IJsonSerializable"
  },
  "api/LaunchDarkly.Sdk.EvaluationReasonKind.html": {
    "href": "api/LaunchDarkly.Sdk.EvaluationReasonKind.html",
    "title": "Enum EvaluationReasonKind | LaunchDarkly Dotnet Server SDK",
    "keywords": "Enum EvaluationReasonKind Namespace: LaunchDarkly.Sdk Assembly: LaunchDarkly.CommonSdk.dll Syntax [JsonConverter(typeof(LdJsonConverters.EvaluationReasonKindConverter))] public enum EvaluationReasonKind Fields Name Description Error Fallthrough Off PrerequisiteFailed RuleMatch TargetMatch"
  },
  "api/LaunchDarkly.Sdk.Helpers.ValidationUtils.html": {
    "href": "api/LaunchDarkly.Sdk.Helpers.ValidationUtils.html",
    "title": "Class ValidationUtils | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class ValidationUtils Inheritance object ValidationUtils Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Sdk.Helpers Assembly: LaunchDarkly.CommonSdk.dll Syntax public static class ValidationUtils Methods SanitizeSpaces(string) Declaration public static string SanitizeSpaces(string s) Parameters Type Name Description string s Returns Type Description string ValidateStringValue(string) Declaration public static string ValidateStringValue(string s) Parameters Type Name Description string s Returns Type Description string"
  },
  "api/LaunchDarkly.Sdk.Helpers.html": {
    "href": "api/LaunchDarkly.Sdk.Helpers.html",
    "title": "Namespace LaunchDarkly.Sdk.Helpers | LaunchDarkly Dotnet Server SDK",
    "keywords": "Namespace LaunchDarkly.Sdk.Helpers Classes ValidationUtils"
  },
  "api/LaunchDarkly.Sdk.IUserBuilder.html": {
    "href": "api/LaunchDarkly.Sdk.IUserBuilder.html",
    "title": "Interface IUserBuilder | LaunchDarkly Dotnet Server SDK",
    "keywords": "Interface IUserBuilder Namespace: LaunchDarkly.Sdk Assembly: LaunchDarkly.CommonSdk.dll Syntax public interface IUserBuilder Methods Anonymous(bool) Declaration IUserBuilder Anonymous(bool anonymous) Parameters Type Name Description bool anonymous Returns Type Description IUserBuilder Avatar(string) Declaration IUserBuilderCanMakeAttributePrivate Avatar(string avatar) Parameters Type Name Description string avatar Returns Type Description IUserBuilderCanMakeAttributePrivate Build() Declaration User Build() Returns Type Description User Country(string) Declaration IUserBuilderCanMakeAttributePrivate Country(string country) Parameters Type Name Description string country Returns Type Description IUserBuilderCanMakeAttributePrivate Custom(string, LdValue) Declaration IUserBuilderCanMakeAttributePrivate Custom(string name, LdValue value) Parameters Type Name Description string name LdValue value Returns Type Description IUserBuilderCanMakeAttributePrivate Custom(string, bool) Declaration IUserBuilderCanMakeAttributePrivate Custom(string name, bool value) Parameters Type Name Description string name bool value Returns Type Description IUserBuilderCanMakeAttributePrivate Custom(string, double) Declaration IUserBuilderCanMakeAttributePrivate Custom(string name, double value) Parameters Type Name Description string name double value Returns Type Description IUserBuilderCanMakeAttributePrivate Custom(string, int) Declaration IUserBuilderCanMakeAttributePrivate Custom(string name, int value) Parameters Type Name Description string name int value Returns Type Description IUserBuilderCanMakeAttributePrivate Custom(string, long) Declaration IUserBuilderCanMakeAttributePrivate Custom(string name, long value) Parameters Type Name Description string name long value Returns Type Description IUserBuilderCanMakeAttributePrivate Custom(string, float) Declaration IUserBuilderCanMakeAttributePrivate Custom(string name, float value) Parameters Type Name Description string name float value Returns Type Description IUserBuilderCanMakeAttributePrivate Custom(string, string) Declaration IUserBuilderCanMakeAttributePrivate Custom(string name, string value) Parameters Type Name Description string name string value Returns Type Description IUserBuilderCanMakeAttributePrivate Email(string) Declaration IUserBuilderCanMakeAttributePrivate Email(string email) Parameters Type Name Description string email Returns Type Description IUserBuilderCanMakeAttributePrivate FirstName(string) Declaration IUserBuilderCanMakeAttributePrivate FirstName(string firstName) Parameters Type Name Description string firstName Returns Type Description IUserBuilderCanMakeAttributePrivate IPAddress(string) Declaration IUserBuilderCanMakeAttributePrivate IPAddress(string ipAddress) Parameters Type Name Description string ipAddress Returns Type Description IUserBuilderCanMakeAttributePrivate Key(string) Declaration IUserBuilder Key(string key) Parameters Type Name Description string key Returns Type Description IUserBuilder LastName(string) Declaration IUserBuilderCanMakeAttributePrivate LastName(string lastName) Parameters Type Name Description string lastName Returns Type Description IUserBuilderCanMakeAttributePrivate Name(string) Declaration IUserBuilderCanMakeAttributePrivate Name(string name) Parameters Type Name Description string name Returns Type Description IUserBuilderCanMakeAttributePrivate"
  },
  "api/LaunchDarkly.Sdk.IUserBuilderCanMakeAttributePrivate.html": {
    "href": "api/LaunchDarkly.Sdk.IUserBuilderCanMakeAttributePrivate.html",
    "title": "Interface IUserBuilderCanMakeAttributePrivate | LaunchDarkly Dotnet Server SDK",
    "keywords": "Interface IUserBuilderCanMakeAttributePrivate Inherited Members IUserBuilder.Build() IUserBuilder.Key(string) IUserBuilder.IPAddress(string) IUserBuilder.Country(string) IUserBuilder.FirstName(string) IUserBuilder.LastName(string) IUserBuilder.Name(string) IUserBuilder.Avatar(string) IUserBuilder.Email(string) IUserBuilder.Anonymous(bool) IUserBuilder.Custom(string, LdValue) IUserBuilder.Custom(string, bool) IUserBuilder.Custom(string, string) IUserBuilder.Custom(string, int) IUserBuilder.Custom(string, long) IUserBuilder.Custom(string, float) IUserBuilder.Custom(string, double) Namespace: LaunchDarkly.Sdk Assembly: LaunchDarkly.CommonSdk.dll Syntax public interface IUserBuilderCanMakeAttributePrivate : IUserBuilder Methods AsPrivateAttribute() Declaration IUserBuilder AsPrivateAttribute() Returns Type Description IUserBuilder"
  },
  "api/LaunchDarkly.Sdk.Internal.AssemblyVersions.html": {
    "href": "api/LaunchDarkly.Sdk.Internal.AssemblyVersions.html",
    "title": "Class AssemblyVersions | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class AssemblyVersions Inheritance object AssemblyVersions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Sdk.Internal Assembly: LaunchDarkly.InternalSdk.dll Syntax public static class AssemblyVersions Methods GetAssemblyVersionForType(Type) Declaration public static Version GetAssemblyVersionForType(Type t) Parameters Type Name Description Type t Returns Type Description Version GetAssemblyVersionStringForType(Type) Declaration public static string GetAssemblyVersionStringForType(Type t) Parameters Type Name Description Type t Returns Type Description string"
  },
  "api/LaunchDarkly.Sdk.Internal.Concurrent.AsyncUtils.html": {
    "href": "api/LaunchDarkly.Sdk.Internal.Concurrent.AsyncUtils.html",
    "title": "Class AsyncUtils | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class AsyncUtils Inheritance object AsyncUtils Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Sdk.Internal.Concurrent Assembly: LaunchDarkly.InternalSdk.dll Syntax public static class AsyncUtils Methods UnwrapAggregateException(AggregateException) Declaration public static Exception UnwrapAggregateException(AggregateException e) Parameters Type Name Description AggregateException e Returns Type Description Exception WaitSafely(Func<Task>) Declaration public static void WaitSafely(Func<Task> taskFn) Parameters Type Name Description Func<Task> taskFn WaitSafely(Func<Task>, TimeSpan) Declaration public static bool WaitSafely(Func<Task> taskFn, TimeSpan timeout) Parameters Type Name Description Func<Task> taskFn TimeSpan timeout Returns Type Description bool WaitSafely<T>(Func<Task<T>>) Declaration public static T WaitSafely<T>(Func<Task<T>> taskFn) Parameters Type Name Description Func<Task<T>> taskFn Returns Type Description T Type Parameters Name Description T"
  },
  "api/LaunchDarkly.Sdk.Internal.Concurrent.AtomicBoolean.html": {
    "href": "api/LaunchDarkly.Sdk.Internal.Concurrent.AtomicBoolean.html",
    "title": "Class AtomicBoolean | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class AtomicBoolean Inheritance object AtomicBoolean Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Sdk.Internal.Concurrent Assembly: LaunchDarkly.InternalSdk.dll Syntax public sealed class AtomicBoolean Constructors AtomicBoolean(bool) Declaration public AtomicBoolean(bool value) Parameters Type Name Description bool value Methods Get() Declaration public bool Get() Returns Type Description bool GetAndSet(bool) Declaration public bool GetAndSet(bool newValue) Parameters Type Name Description bool newValue Returns Type Description bool"
  },
  "api/LaunchDarkly.Sdk.Internal.Concurrent.StateMonitor-2.html": {
    "href": "api/LaunchDarkly.Sdk.Internal.Concurrent.StateMonitor-2.html",
    "title": "Class StateMonitor<StateT, UpdateT> | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class StateMonitor<StateT, UpdateT> Inheritance object StateMonitor<StateT, UpdateT> Implements IDisposable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Sdk.Internal.Concurrent Assembly: LaunchDarkly.InternalSdk.dll Syntax public sealed class StateMonitor<StateT, UpdateT> : IDisposable where StateT : struct Type Parameters Name Description StateT UpdateT Constructors StateMonitor(StateT, Func<StateT, UpdateT, StateT?>, Logger) Declaration public StateMonitor(StateT initial, Func<StateT, UpdateT, StateT?> updateFn, Logger log) Parameters Type Name Description StateT initial Func<StateT, UpdateT, StateT?> updateFn Logger log Properties Current Declaration public StateT Current { get; } Property Value Type Description StateT Methods Dispose() Declaration public void Dispose() Update(UpdateT, out StateT) Declaration public bool Update(UpdateT update, out StateT newState) Parameters Type Name Description UpdateT update StateT newState Returns Type Description bool WaitFor(Func<StateT, bool>, TimeSpan) Declaration public StateT? WaitFor(Func<StateT, bool> testFn, TimeSpan timeout) Parameters Type Name Description Func<StateT, bool> testFn TimeSpan timeout Returns Type Description StateT? WaitForAsync(Func<StateT, bool>, TimeSpan) Declaration public Task<StateT?> WaitForAsync(Func<StateT, bool> testFn, TimeSpan timeout) Parameters Type Name Description Func<StateT, bool> testFn TimeSpan timeout Returns Type Description Task<StateT?> Implements IDisposable"
  },
  "api/LaunchDarkly.Sdk.Internal.Concurrent.html": {
    "href": "api/LaunchDarkly.Sdk.Internal.Concurrent.html",
    "title": "Namespace LaunchDarkly.Sdk.Internal.Concurrent | LaunchDarkly Dotnet Server SDK",
    "keywords": "Namespace LaunchDarkly.Sdk.Internal.Concurrent Classes AsyncUtils AtomicBoolean StateMonitor<StateT, UpdateT>"
  },
  "api/LaunchDarkly.Sdk.Internal.Events.DefaultEventSender.html": {
    "href": "api/LaunchDarkly.Sdk.Internal.Events.DefaultEventSender.html",
    "title": "Class DefaultEventSender | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class DefaultEventSender Inheritance object DefaultEventSender Implements IEventSender IDisposable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Sdk.Internal.Events Assembly: LaunchDarkly.InternalSdk.dll Syntax public sealed class DefaultEventSender : IEventSender, IDisposable Constructors DefaultEventSender(HttpProperties, EventsConfiguration, Logger) Declaration public DefaultEventSender(HttpProperties httpProperties, EventsConfiguration config, Logger logger) Parameters Type Name Description HttpProperties httpProperties EventsConfiguration config Logger logger Fields DefaultRetryInterval Declaration public static readonly TimeSpan DefaultRetryInterval Field Value Type Description TimeSpan Methods Dispose() Declaration public void Dispose() SendEventDataAsync(EventDataKind, byte[], int) Declaration public Task<EventSenderResult> SendEventDataAsync(EventDataKind kind, byte[] data, int eventCount) Parameters Type Name Description EventDataKind kind byte[] data int eventCount Returns Type Description Task<EventSenderResult> Implements IEventSender IDisposable"
  },
  "api/LaunchDarkly.Sdk.Internal.Events.DeliveryStatus.html": {
    "href": "api/LaunchDarkly.Sdk.Internal.Events.DeliveryStatus.html",
    "title": "Enum DeliveryStatus | LaunchDarkly Dotnet Server SDK",
    "keywords": "Enum DeliveryStatus Namespace: LaunchDarkly.Sdk.Internal.Events Assembly: LaunchDarkly.InternalSdk.dll Syntax public enum DeliveryStatus Fields Name Description Failed FailedAndMustShutDown Succeeded"
  },
  "api/LaunchDarkly.Sdk.Internal.Events.DiagnosticConfigProperties.html": {
    "href": "api/LaunchDarkly.Sdk.Internal.Events.DiagnosticConfigProperties.html",
    "title": "Class DiagnosticConfigProperties | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class DiagnosticConfigProperties Inheritance object DiagnosticConfigProperties Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Sdk.Internal.Events Assembly: LaunchDarkly.InternalSdk.dll Syntax public static class DiagnosticConfigProperties Methods WithEventProperties(ObjectBuilder, EventsConfiguration, bool) Declaration public static LdValue.ObjectBuilder WithEventProperties(this LdValue.ObjectBuilder builder, EventsConfiguration config, bool customEventsBaseUri) Parameters Type Name Description LdValue.ObjectBuilder builder EventsConfiguration config bool customEventsBaseUri Returns Type Description LdValue.ObjectBuilder WithHttpProperties(ObjectBuilder, HttpProperties) Declaration public static LdValue.ObjectBuilder WithHttpProperties(this LdValue.ObjectBuilder builder, HttpProperties props) Parameters Type Name Description LdValue.ObjectBuilder builder HttpProperties props Returns Type Description LdValue.ObjectBuilder WithPollingProperties(ObjectBuilder, bool, TimeSpan) Declaration public static LdValue.ObjectBuilder WithPollingProperties(this LdValue.ObjectBuilder builder, bool customPollingBaseUri, TimeSpan pollingInterval) Parameters Type Name Description LdValue.ObjectBuilder builder bool customPollingBaseUri TimeSpan pollingInterval Returns Type Description LdValue.ObjectBuilder WithStartWaitTime(ObjectBuilder, TimeSpan) Declaration public static LdValue.ObjectBuilder WithStartWaitTime(this LdValue.ObjectBuilder builder, TimeSpan value) Parameters Type Name Description LdValue.ObjectBuilder builder TimeSpan value Returns Type Description LdValue.ObjectBuilder WithStreamingProperties(ObjectBuilder, bool, bool, TimeSpan) Declaration public static LdValue.ObjectBuilder WithStreamingProperties(this LdValue.ObjectBuilder builder, bool customStreamingBaseUri, bool customPollingBaseUri, TimeSpan initialReconnectDelay) Parameters Type Name Description LdValue.ObjectBuilder builder bool customStreamingBaseUri bool customPollingBaseUri TimeSpan initialReconnectDelay Returns Type Description LdValue.ObjectBuilder"
  },
  "api/LaunchDarkly.Sdk.Internal.Events.DiagnosticEvent.html": {
    "href": "api/LaunchDarkly.Sdk.Internal.Events.DiagnosticEvent.html",
    "title": "Struct DiagnosticEvent | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct DiagnosticEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk.Internal.Events Assembly: LaunchDarkly.InternalSdk.dll Syntax public struct DiagnosticEvent Constructors DiagnosticEvent(LdValue) Declaration public DiagnosticEvent(LdValue jsonValue) Parameters Type Name Description LdValue jsonValue Properties JsonValue Declaration public LdValue JsonValue { get; } Property Value Type Description LdValue"
  },
  "api/LaunchDarkly.Sdk.Internal.Events.DiagnosticId.html": {
    "href": "api/LaunchDarkly.Sdk.Internal.Events.DiagnosticId.html",
    "title": "Class DiagnosticId | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class DiagnosticId Inheritance object DiagnosticId Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Sdk.Internal.Events Assembly: LaunchDarkly.InternalSdk.dll Syntax public sealed class DiagnosticId Constructors DiagnosticId(string, Guid) Declaration public DiagnosticId(string sdkKey, Guid diagnosticId) Parameters Type Name Description string sdkKey Guid diagnosticId Fields Id Declaration public readonly Guid Id Field Value Type Description Guid SdkKeySuffix Declaration public readonly string SdkKeySuffix Field Value Type Description string"
  },
  "api/LaunchDarkly.Sdk.Internal.Events.DiagnosticStoreBase.html": {
    "href": "api/LaunchDarkly.Sdk.Internal.Events.DiagnosticStoreBase.html",
    "title": "Class DiagnosticStoreBase | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class DiagnosticStoreBase Inheritance object DiagnosticStoreBase Implements IDiagnosticStore Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Sdk.Internal.Events Assembly: LaunchDarkly.InternalSdk.dll Syntax public abstract class DiagnosticStoreBase : IDiagnosticStore Constructors DiagnosticStoreBase() Declaration protected DiagnosticStoreBase() Properties ConfigProperties Declaration protected abstract IEnumerable<LdValue> ConfigProperties { get; } Property Value Type Description IEnumerable<LdValue> DataSince Declaration public DateTime DataSince { get; } Property Value Type Description DateTime DotNetTargetFramework Declaration protected abstract string DotNetTargetFramework { get; } Property Value Type Description string HttpProperties Declaration protected abstract HttpProperties HttpProperties { get; } Property Value Type Description HttpProperties InitEvent Declaration public DiagnosticEvent? InitEvent { get; } Property Value Type Description DiagnosticEvent? PersistedUnsentEvent Declaration public DiagnosticEvent? PersistedUnsentEvent { get; } Property Value Type Description DiagnosticEvent? SdkKeyOrMobileKey Declaration protected abstract string SdkKeyOrMobileKey { get; } Property Value Type Description string SdkName Declaration protected abstract string SdkName { get; } Property Value Type Description string TypeOfLdClient Declaration protected abstract Type TypeOfLdClient { get; } Property Value Type Description Type Methods AddStreamInit(DateTime, TimeSpan, bool) Declaration public void AddStreamInit(DateTime timestamp, TimeSpan duration, bool failed) Parameters Type Name Description DateTime timestamp TimeSpan duration bool failed CreateEventAndReset() Declaration public DiagnosticEvent CreateEventAndReset() Returns Type Description DiagnosticEvent IncrementDeduplicatedUsers() Declaration public void IncrementDeduplicatedUsers() IncrementDroppedEvents() Declaration public void IncrementDroppedEvents() RecordEventsInBatch(long) Declaration public void RecordEventsInBatch(long eventsInBatch) Parameters Type Name Description long eventsInBatch Implements IDiagnosticStore"
  },
  "api/LaunchDarkly.Sdk.Internal.Events.DisabledChangedArgs.html": {
    "href": "api/LaunchDarkly.Sdk.Internal.Events.DisabledChangedArgs.html",
    "title": "Class DisabledChangedArgs | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class DisabledChangedArgs Inheritance object EventArgs DisabledChangedArgs Inherited Members EventArgs.Empty object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Sdk.Internal.Events Assembly: LaunchDarkly.InternalSdk.dll Syntax public class DisabledChangedArgs : EventArgs Constructors DisabledChangedArgs(bool) Declaration public DisabledChangedArgs(bool disabled) Parameters Type Name Description bool disabled Properties Disabled Declaration public bool Disabled { get; } Property Value Type Description bool"
  },
  "api/LaunchDarkly.Sdk.Internal.Events.EventDataKind.html": {
    "href": "api/LaunchDarkly.Sdk.Internal.Events.EventDataKind.html",
    "title": "Enum EventDataKind | LaunchDarkly Dotnet Server SDK",
    "keywords": "Enum EventDataKind Namespace: LaunchDarkly.Sdk.Internal.Events Assembly: LaunchDarkly.InternalSdk.dll Syntax public enum EventDataKind Fields Name Description AnalyticsEvents DiagnosticEvent"
  },
  "api/LaunchDarkly.Sdk.Internal.Events.EventProcessor.html": {
    "href": "api/LaunchDarkly.Sdk.Internal.Events.EventProcessor.html",
    "title": "Class EventProcessor | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class EventProcessor Inheritance object EventProcessor Implements IDisposable Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Sdk.Internal.Events Assembly: LaunchDarkly.InternalSdk.dll Syntax public sealed class EventProcessor : IDisposable Constructors EventProcessor(EventsConfiguration, IEventSender, IContextDeduplicator, IDiagnosticStore, IDiagnosticDisabler, Logger, Action) Declaration public EventProcessor(EventsConfiguration config, IEventSender eventSender, IContextDeduplicator contextDeduplicator, IDiagnosticStore diagnosticStore, IDiagnosticDisabler diagnosticDisabler, Logger logger, Action testActionOnDiagnosticSend) Parameters Type Name Description EventsConfiguration config IEventSender eventSender IContextDeduplicator contextDeduplicator IDiagnosticStore diagnosticStore IDiagnosticDisabler diagnosticDisabler Logger logger Action testActionOnDiagnosticSend Methods Dispose() Declaration public void Dispose() Flush() Declaration public void Flush() FlushAndWait(TimeSpan) Declaration public bool FlushAndWait(TimeSpan timeout) Parameters Type Name Description TimeSpan timeout Returns Type Description bool FlushAndWaitAsync(TimeSpan) Declaration public Task<bool> FlushAndWaitAsync(TimeSpan timeout) Parameters Type Name Description TimeSpan timeout Returns Type Description Task<bool> RecordCustomEvent(in CustomEvent) Declaration public void RecordCustomEvent(in EventTypes.CustomEvent e) Parameters Type Name Description EventTypes.CustomEvent e RecordEvaluationEvent(in EvaluationEvent) Declaration public void RecordEvaluationEvent(in EventTypes.EvaluationEvent e) Parameters Type Name Description EventTypes.EvaluationEvent e RecordIdentifyEvent(in IdentifyEvent) Declaration public void RecordIdentifyEvent(in EventTypes.IdentifyEvent e) Parameters Type Name Description EventTypes.IdentifyEvent e RecordMigrationOpEvent(in MigrationOpEvent) Declaration public void RecordMigrationOpEvent(in EventTypes.MigrationOpEvent e) Parameters Type Name Description EventTypes.MigrationOpEvent e SetOffline(bool) Declaration public void SetOffline(bool offline) Parameters Type Name Description bool offline Implements IDisposable"
  },
  "api/LaunchDarkly.Sdk.Internal.Events.EventSenderResult.html": {
    "href": "api/LaunchDarkly.Sdk.Internal.Events.EventSenderResult.html",
    "title": "Struct EventSenderResult | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct EventSenderResult Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk.Internal.Events Assembly: LaunchDarkly.InternalSdk.dll Syntax public struct EventSenderResult Constructors EventSenderResult(DeliveryStatus, DateTime?) Declaration public EventSenderResult(DeliveryStatus status, DateTime? timeFromServer) Parameters Type Name Description DeliveryStatus status DateTime? timeFromServer Properties Status Declaration public DeliveryStatus Status { get; } Property Value Type Description DeliveryStatus TimeFromServer Declaration public DateTime? TimeFromServer { get; } Property Value Type Description DateTime?"
  },
  "api/LaunchDarkly.Sdk.Internal.Events.EventTypes.CustomEvent.html": {
    "href": "api/LaunchDarkly.Sdk.Internal.Events.EventTypes.CustomEvent.html",
    "title": "Struct EventTypes.CustomEvent | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct EventTypes.CustomEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk.Internal.Events Assembly: LaunchDarkly.InternalSdk.dll Syntax public struct EventTypes.CustomEvent Fields Context Declaration public Context Context Field Value Type Description Context Data Declaration public LdValue Data Field Value Type Description LdValue EventKey Declaration public string EventKey Field Value Type Description string MetricValue Declaration public double? MetricValue Field Value Type Description double? Timestamp Declaration public UnixMillisecondTime Timestamp Field Value Type Description UnixMillisecondTime"
  },
  "api/LaunchDarkly.Sdk.Internal.Events.EventTypes.EvaluationEvent.html": {
    "href": "api/LaunchDarkly.Sdk.Internal.Events.EventTypes.EvaluationEvent.html",
    "title": "Struct EventTypes.EvaluationEvent | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct EventTypes.EvaluationEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk.Internal.Events Assembly: LaunchDarkly.InternalSdk.dll Syntax public struct EventTypes.EvaluationEvent Fields Context Declaration public Context Context Field Value Type Description Context DebugEventsUntilDate Declaration public UnixMillisecondTime? DebugEventsUntilDate Field Value Type Description UnixMillisecondTime? Default Declaration public LdValue Default Field Value Type Description LdValue ExcludeFromSummaries Declaration public bool ExcludeFromSummaries Field Value Type Description bool FlagKey Declaration public string FlagKey Field Value Type Description string FlagVersion Declaration public int? FlagVersion Field Value Type Description int? PrereqOf Declaration public string PrereqOf Field Value Type Description string Reason Declaration public EvaluationReason? Reason Field Value Type Description EvaluationReason? SamplingRatio Declaration public long? SamplingRatio Field Value Type Description long? Timestamp Declaration public UnixMillisecondTime Timestamp Field Value Type Description UnixMillisecondTime TrackEvents Declaration public bool TrackEvents Field Value Type Description bool Value Declaration public LdValue Value Field Value Type Description LdValue Variation Declaration public int? Variation Field Value Type Description int?"
  },
  "api/LaunchDarkly.Sdk.Internal.Events.EventTypes.IdentifyEvent.html": {
    "href": "api/LaunchDarkly.Sdk.Internal.Events.EventTypes.IdentifyEvent.html",
    "title": "Struct EventTypes.IdentifyEvent | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct EventTypes.IdentifyEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk.Internal.Events Assembly: LaunchDarkly.InternalSdk.dll Syntax public struct EventTypes.IdentifyEvent Fields Context Declaration public Context Context Field Value Type Description Context Timestamp Declaration public UnixMillisecondTime Timestamp Field Value Type Description UnixMillisecondTime"
  },
  "api/LaunchDarkly.Sdk.Internal.Events.EventTypes.MigrationOpEvent.ConsistentMeasurement.html": {
    "href": "api/LaunchDarkly.Sdk.Internal.Events.EventTypes.MigrationOpEvent.ConsistentMeasurement.html",
    "title": "Struct EventTypes.MigrationOpEvent.ConsistentMeasurement | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct EventTypes.MigrationOpEvent.ConsistentMeasurement Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk.Internal.Events Assembly: LaunchDarkly.InternalSdk.dll Syntax public struct EventTypes.MigrationOpEvent.ConsistentMeasurement Fields IsConsistent Declaration public bool IsConsistent Field Value Type Description bool SamplingRatio Declaration public long SamplingRatio Field Value Type Description long"
  },
  "api/LaunchDarkly.Sdk.Internal.Events.EventTypes.MigrationOpEvent.ErrorMeasurement.html": {
    "href": "api/LaunchDarkly.Sdk.Internal.Events.EventTypes.MigrationOpEvent.ErrorMeasurement.html",
    "title": "Struct EventTypes.MigrationOpEvent.ErrorMeasurement | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct EventTypes.MigrationOpEvent.ErrorMeasurement Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk.Internal.Events Assembly: LaunchDarkly.InternalSdk.dll Syntax public struct EventTypes.MigrationOpEvent.ErrorMeasurement Fields New Declaration public bool New Field Value Type Description bool Old Declaration public bool Old Field Value Type Description bool"
  },
  "api/LaunchDarkly.Sdk.Internal.Events.EventTypes.MigrationOpEvent.InvokedMeasurement.html": {
    "href": "api/LaunchDarkly.Sdk.Internal.Events.EventTypes.MigrationOpEvent.InvokedMeasurement.html",
    "title": "Struct EventTypes.MigrationOpEvent.InvokedMeasurement | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct EventTypes.MigrationOpEvent.InvokedMeasurement Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk.Internal.Events Assembly: LaunchDarkly.InternalSdk.dll Syntax public struct EventTypes.MigrationOpEvent.InvokedMeasurement Fields New Declaration public bool New Field Value Type Description bool Old Declaration public bool Old Field Value Type Description bool"
  },
  "api/LaunchDarkly.Sdk.Internal.Events.EventTypes.MigrationOpEvent.LatencyMeasurement.html": {
    "href": "api/LaunchDarkly.Sdk.Internal.Events.EventTypes.MigrationOpEvent.LatencyMeasurement.html",
    "title": "Struct EventTypes.MigrationOpEvent.LatencyMeasurement | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct EventTypes.MigrationOpEvent.LatencyMeasurement Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk.Internal.Events Assembly: LaunchDarkly.InternalSdk.dll Syntax public struct EventTypes.MigrationOpEvent.LatencyMeasurement Fields New Declaration public long? New Field Value Type Description long? Old Declaration public long? Old Field Value Type Description long?"
  },
  "api/LaunchDarkly.Sdk.Internal.Events.EventTypes.MigrationOpEvent.html": {
    "href": "api/LaunchDarkly.Sdk.Internal.Events.EventTypes.MigrationOpEvent.html",
    "title": "Struct EventTypes.MigrationOpEvent | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct EventTypes.MigrationOpEvent Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk.Internal.Events Assembly: LaunchDarkly.InternalSdk.dll Syntax public struct EventTypes.MigrationOpEvent Fields Consistent Declaration public EventTypes.MigrationOpEvent.ConsistentMeasurement? Consistent Field Value Type Description EventTypes.MigrationOpEvent.ConsistentMeasurement? Context Declaration public Context Context Field Value Type Description Context Default Declaration public LdValue Default Field Value Type Description LdValue Error Declaration public EventTypes.MigrationOpEvent.ErrorMeasurement? Error Field Value Type Description EventTypes.MigrationOpEvent.ErrorMeasurement? FlagKey Declaration public string FlagKey Field Value Type Description string FlagVersion Declaration public int? FlagVersion Field Value Type Description int? Invoked Declaration public EventTypes.MigrationOpEvent.InvokedMeasurement Invoked Field Value Type Description EventTypes.MigrationOpEvent.InvokedMeasurement Latency Declaration public EventTypes.MigrationOpEvent.LatencyMeasurement? Latency Field Value Type Description EventTypes.MigrationOpEvent.LatencyMeasurement? Operation Declaration public string Operation Field Value Type Description string Reason Declaration public EvaluationReason? Reason Field Value Type Description EvaluationReason? SamplingRatio Declaration public long SamplingRatio Field Value Type Description long Timestamp Declaration public UnixMillisecondTime Timestamp Field Value Type Description UnixMillisecondTime Value Declaration public LdValue Value Field Value Type Description LdValue Variation Declaration public int? Variation Field Value Type Description int?"
  },
  "api/LaunchDarkly.Sdk.Internal.Events.EventTypes.html": {
    "href": "api/LaunchDarkly.Sdk.Internal.Events.EventTypes.html",
    "title": "Class EventTypes | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class EventTypes Inheritance object EventTypes Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Sdk.Internal.Events Assembly: LaunchDarkly.InternalSdk.dll Syntax public static class EventTypes"
  },
  "api/LaunchDarkly.Sdk.Internal.Events.EventsConfiguration.html": {
    "href": "api/LaunchDarkly.Sdk.Internal.Events.EventsConfiguration.html",
    "title": "Class EventsConfiguration | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class EventsConfiguration Inheritance object EventsConfiguration Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Sdk.Internal.Events Assembly: LaunchDarkly.InternalSdk.dll Syntax public sealed class EventsConfiguration Constructors EventsConfiguration() Declaration public EventsConfiguration() Properties AllAttributesPrivate Declaration public bool AllAttributesPrivate { get; set; } Property Value Type Description bool DiagnosticRecordingInterval Declaration public TimeSpan DiagnosticRecordingInterval { get; set; } Property Value Type Description TimeSpan DiagnosticUri Declaration public Uri DiagnosticUri { get; set; } Property Value Type Description Uri EventCapacity Declaration public int EventCapacity { get; set; } Property Value Type Description int EventFlushInterval Declaration public TimeSpan EventFlushInterval { get; set; } Property Value Type Description TimeSpan EventsUri Declaration public Uri EventsUri { get; set; } Property Value Type Description Uri PrivateAttributes Declaration public IImmutableSet<AttributeRef> PrivateAttributes { get; set; } Property Value Type Description IImmutableSet<AttributeRef> RetryInterval Declaration public TimeSpan? RetryInterval { get; set; } Property Value Type Description TimeSpan?"
  },
  "api/LaunchDarkly.Sdk.Internal.Events.IContextDeduplicator.html": {
    "href": "api/LaunchDarkly.Sdk.Internal.Events.IContextDeduplicator.html",
    "title": "Interface IContextDeduplicator | LaunchDarkly Dotnet Server SDK",
    "keywords": "Interface IContextDeduplicator Namespace: LaunchDarkly.Sdk.Internal.Events Assembly: LaunchDarkly.InternalSdk.dll Syntax public interface IContextDeduplicator Properties FlushInterval Declaration TimeSpan? FlushInterval { get; } Property Value Type Description TimeSpan? Methods Flush() Declaration void Flush() ProcessContext(in Context) Declaration bool ProcessContext(in Context context) Parameters Type Name Description Context context Returns Type Description bool"
  },
  "api/LaunchDarkly.Sdk.Internal.Events.IDiagnosticDisabler.html": {
    "href": "api/LaunchDarkly.Sdk.Internal.Events.IDiagnosticDisabler.html",
    "title": "Interface IDiagnosticDisabler | LaunchDarkly Dotnet Server SDK",
    "keywords": "Interface IDiagnosticDisabler Namespace: LaunchDarkly.Sdk.Internal.Events Assembly: LaunchDarkly.InternalSdk.dll Syntax public interface IDiagnosticDisabler Properties Disabled Declaration bool Disabled { get; } Property Value Type Description bool Events DisabledChanged Declaration event EventHandler<DisabledChangedArgs> DisabledChanged Event Type Type Description EventHandler<DisabledChangedArgs>"
  },
  "api/LaunchDarkly.Sdk.Internal.Events.IDiagnosticStore.html": {
    "href": "api/LaunchDarkly.Sdk.Internal.Events.IDiagnosticStore.html",
    "title": "Interface IDiagnosticStore | LaunchDarkly Dotnet Server SDK",
    "keywords": "Interface IDiagnosticStore Namespace: LaunchDarkly.Sdk.Internal.Events Assembly: LaunchDarkly.InternalSdk.dll Syntax public interface IDiagnosticStore Properties DataSince Declaration DateTime DataSince { get; } Property Value Type Description DateTime InitEvent Declaration DiagnosticEvent? InitEvent { get; } Property Value Type Description DiagnosticEvent? PersistedUnsentEvent Declaration DiagnosticEvent? PersistedUnsentEvent { get; } Property Value Type Description DiagnosticEvent? Methods AddStreamInit(DateTime, TimeSpan, bool) Declaration void AddStreamInit(DateTime timestamp, TimeSpan duration, bool failed) Parameters Type Name Description DateTime timestamp TimeSpan duration bool failed CreateEventAndReset() Declaration DiagnosticEvent CreateEventAndReset() Returns Type Description DiagnosticEvent IncrementDeduplicatedUsers() Declaration void IncrementDeduplicatedUsers() IncrementDroppedEvents() Declaration void IncrementDroppedEvents() RecordEventsInBatch(long) Declaration void RecordEventsInBatch(long eventsInBatch) Parameters Type Name Description long eventsInBatch"
  },
  "api/LaunchDarkly.Sdk.Internal.Events.IEventSender.html": {
    "href": "api/LaunchDarkly.Sdk.Internal.Events.IEventSender.html",
    "title": "Interface IEventSender | LaunchDarkly Dotnet Server SDK",
    "keywords": "Interface IEventSender Inherited Members IDisposable.Dispose() Namespace: LaunchDarkly.Sdk.Internal.Events Assembly: LaunchDarkly.InternalSdk.dll Syntax public interface IEventSender : IDisposable Methods SendEventDataAsync(EventDataKind, byte[], int) Declaration Task<EventSenderResult> SendEventDataAsync(EventDataKind kind, byte[] data, int eventCount) Parameters Type Name Description EventDataKind kind byte[] data int eventCount Returns Type Description Task<EventSenderResult>"
  },
  "api/LaunchDarkly.Sdk.Internal.Events.Sampler.html": {
    "href": "api/LaunchDarkly.Sdk.Internal.Events.Sampler.html",
    "title": "Class Sampler | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class Sampler Inheritance object Sampler Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Sdk.Internal.Events Assembly: LaunchDarkly.InternalSdk.dll Syntax public static class Sampler Methods Sample(long) Declaration public static bool Sample(long samplingRatio) Parameters Type Name Description long samplingRatio Returns Type Description bool"
  },
  "api/LaunchDarkly.Sdk.Internal.Events.html": {
    "href": "api/LaunchDarkly.Sdk.Internal.Events.html",
    "title": "Namespace LaunchDarkly.Sdk.Internal.Events | LaunchDarkly Dotnet Server SDK",
    "keywords": "Namespace LaunchDarkly.Sdk.Internal.Events Classes DefaultEventSender DiagnosticConfigProperties DiagnosticId DiagnosticStoreBase DisabledChangedArgs EventProcessor EventTypes EventsConfiguration Sampler Structs DiagnosticEvent EventSenderResult EventTypes.CustomEvent EventTypes.EvaluationEvent EventTypes.IdentifyEvent EventTypes.MigrationOpEvent EventTypes.MigrationOpEvent.ConsistentMeasurement EventTypes.MigrationOpEvent.ErrorMeasurement EventTypes.MigrationOpEvent.InvokedMeasurement EventTypes.MigrationOpEvent.LatencyMeasurement Interfaces IContextDeduplicator IDiagnosticDisabler IDiagnosticStore IEventSender Enums DeliveryStatus EventDataKind"
  },
  "api/LaunchDarkly.Sdk.Internal.HashCodeBuilder.html": {
    "href": "api/LaunchDarkly.Sdk.Internal.HashCodeBuilder.html",
    "title": "Struct HashCodeBuilder | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct HashCodeBuilder Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk.Internal Assembly: LaunchDarkly.InternalSdk.dll Syntax public struct HashCodeBuilder Properties Value Declaration public int Value { get; } Property Value Type Description int Methods New() Declaration public static HashCodeBuilder New() Returns Type Description HashCodeBuilder With(object) Declaration public HashCodeBuilder With(object o) Parameters Type Name Description object o Returns Type Description HashCodeBuilder"
  },
  "api/LaunchDarkly.Sdk.Internal.Http.HttpErrors.html": {
    "href": "api/LaunchDarkly.Sdk.Internal.Http.HttpErrors.html",
    "title": "Class HttpErrors | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class HttpErrors Inheritance object HttpErrors Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Sdk.Internal.Http Assembly: LaunchDarkly.InternalSdk.dll Syntax public static class HttpErrors Methods ErrorMessage(int, string, string) Declaration public static string ErrorMessage(int status, string context, string recoverableMessage) Parameters Type Name Description int status string context string recoverableMessage Returns Type Description string ErrorMessageBase(int) Declaration public static string ErrorMessageBase(int status) Parameters Type Name Description int status Returns Type Description string IsRecoverable(int) Declaration public static bool IsRecoverable(int status) Parameters Type Name Description int status Returns Type Description bool"
  },
  "api/LaunchDarkly.Sdk.Internal.Http.HttpProperties.html": {
    "href": "api/LaunchDarkly.Sdk.Internal.Http.HttpProperties.html",
    "title": "Struct HttpProperties | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct HttpProperties Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk.Internal.Http Assembly: LaunchDarkly.InternalSdk.dll Syntax public struct HttpProperties Fields DefaultConnectTimeout Declaration public static readonly TimeSpan DefaultConnectTimeout Field Value Type Description TimeSpan DefaultReadTimeout Declaration public static readonly TimeSpan DefaultReadTimeout Field Value Type Description TimeSpan Properties BaseHeaders Declaration public ImmutableList<KeyValuePair<string, string>> BaseHeaders { get; } Property Value Type Description ImmutableList<KeyValuePair<string, string>> ConnectTimeout Declaration public TimeSpan ConnectTimeout { get; } Property Value Type Description TimeSpan Default Declaration public static HttpProperties Default { get; } Property Value Type Description HttpProperties HttpExceptionConverter Declaration public Func<Exception, Exception> HttpExceptionConverter { get; } Property Value Type Description Func<Exception, Exception> HttpMessageHandlerFactory Declaration public Func<HttpProperties, HttpMessageHandler> HttpMessageHandlerFactory { get; } Property Value Type Description Func<HttpProperties, HttpMessageHandler> Proxy Declaration public IWebProxy Proxy { get; } Property Value Type Description IWebProxy ReadTimeout Declaration public TimeSpan ReadTimeout { get; } Property Value Type Description TimeSpan Methods AddHeaders(HttpRequestMessage) Declaration public void AddHeaders(HttpRequestMessage req) Parameters Type Name Description HttpRequestMessage req NewHttpClient() Declaration public HttpClient NewHttpClient() Returns Type Description HttpClient NewHttpMessageHandler() Declaration public HttpMessageHandler NewHttpMessageHandler() Returns Type Description HttpMessageHandler WithApplicationTags(ApplicationInfo) Declaration public HttpProperties WithApplicationTags(ApplicationInfo applicationInfo) Parameters Type Name Description ApplicationInfo applicationInfo Returns Type Description HttpProperties WithAuthorizationKey(string) Declaration public HttpProperties WithAuthorizationKey(string key) Parameters Type Name Description string key Returns Type Description HttpProperties WithConnectTimeout(TimeSpan) Declaration public HttpProperties WithConnectTimeout(TimeSpan newConnectTimeout) Parameters Type Name Description TimeSpan newConnectTimeout Returns Type Description HttpProperties WithHeader(string, string) Declaration public HttpProperties WithHeader(string name, string value) Parameters Type Name Description string name string value Returns Type Description HttpProperties WithHttpExceptionConverter(Func<Exception, Exception>) Declaration public HttpProperties WithHttpExceptionConverter(Func<Exception, Exception> newHttpExceptionConverter) Parameters Type Name Description Func<Exception, Exception> newHttpExceptionConverter Returns Type Description HttpProperties WithHttpMessageHandlerFactory(Func<HttpProperties, HttpMessageHandler>) Declaration public HttpProperties WithHttpMessageHandlerFactory(Func<HttpProperties, HttpMessageHandler> factory) Parameters Type Name Description Func<HttpProperties, HttpMessageHandler> factory Returns Type Description HttpProperties WithProxy(IWebProxy) Declaration public HttpProperties WithProxy(IWebProxy newProxy) Parameters Type Name Description IWebProxy newProxy Returns Type Description HttpProperties WithReadTimeout(TimeSpan) Declaration public HttpProperties WithReadTimeout(TimeSpan newReadTimeout) Parameters Type Name Description TimeSpan newReadTimeout Returns Type Description HttpProperties WithUserAgent(string) Declaration public HttpProperties WithUserAgent(string userAgent) Parameters Type Name Description string userAgent Returns Type Description HttpProperties WithUserAgent(string, string) Declaration public HttpProperties WithUserAgent(string userAgentName, string userAgentVersion) Parameters Type Name Description string userAgentName string userAgentVersion Returns Type Description HttpProperties WithWrapper(string, string) Declaration public HttpProperties WithWrapper(string wrapperName, string wrapperVersion) Parameters Type Name Description string wrapperName string wrapperVersion Returns Type Description HttpProperties"
  },
  "api/LaunchDarkly.Sdk.Internal.Http.UnsuccessfulResponseException.html": {
    "href": "api/LaunchDarkly.Sdk.Internal.Http.UnsuccessfulResponseException.html",
    "title": "Class UnsuccessfulResponseException | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class UnsuccessfulResponseException Inheritance object Exception UnsuccessfulResponseException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.ToString() Exception.GetType() Exception.TargetSite Exception.Message Exception.Data Exception.InnerException Exception.HelpLink Exception.Source Exception.HResult Exception.StackTrace object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Sdk.Internal.Http Assembly: LaunchDarkly.InternalSdk.dll Syntax public sealed class UnsuccessfulResponseException : Exception, ISerializable Constructors UnsuccessfulResponseException(int) Declaration public UnsuccessfulResponseException(int statusCode) Parameters Type Name Description int statusCode Properties StatusCode Declaration public int StatusCode { get; } Property Value Type Description int Implements ISerializable"
  },
  "api/LaunchDarkly.Sdk.Internal.Http.html": {
    "href": "api/LaunchDarkly.Sdk.Internal.Http.html",
    "title": "Namespace LaunchDarkly.Sdk.Internal.Http | LaunchDarkly Dotnet Server SDK",
    "keywords": "Namespace LaunchDarkly.Sdk.Internal.Http Classes HttpErrors UnsuccessfulResponseException Structs HttpProperties"
  },
  "api/LaunchDarkly.Sdk.Internal.JsonConverterHelpers.ArrayHelper.html": {
    "href": "api/LaunchDarkly.Sdk.Internal.JsonConverterHelpers.ArrayHelper.html",
    "title": "Struct JsonConverterHelpers.ArrayHelper | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct JsonConverterHelpers.ArrayHelper Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk.Internal Assembly: LaunchDarkly.InternalSdk.dll Syntax public ref struct JsonConverterHelpers.ArrayHelper Methods Next(ref Utf8JsonReader) Declaration public bool Next(ref Utf8JsonReader reader) Parameters Type Name Description Utf8JsonReader reader Returns Type Description bool"
  },
  "api/LaunchDarkly.Sdk.Internal.JsonConverterHelpers.ObjectHelper.html": {
    "href": "api/LaunchDarkly.Sdk.Internal.JsonConverterHelpers.ObjectHelper.html",
    "title": "Struct JsonConverterHelpers.ObjectHelper | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct JsonConverterHelpers.ObjectHelper Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk.Internal Assembly: LaunchDarkly.InternalSdk.dll Syntax public ref struct JsonConverterHelpers.ObjectHelper Properties Name Declaration public string Name { get; } Property Value Type Description string Methods Next(ref Utf8JsonReader) Declaration public bool Next(ref Utf8JsonReader reader) Parameters Type Name Description Utf8JsonReader reader Returns Type Description bool WithRequiredProperties(params string[]) Declaration public JsonConverterHelpers.ObjectHelper WithRequiredProperties(params string[] propertyNames) Parameters Type Name Description string[] propertyNames Returns Type Description JsonConverterHelpers.ObjectHelper"
  },
  "api/LaunchDarkly.Sdk.Internal.JsonConverterHelpers.html": {
    "href": "api/LaunchDarkly.Sdk.Internal.JsonConverterHelpers.html",
    "title": "Class JsonConverterHelpers | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class JsonConverterHelpers Inheritance object JsonConverterHelpers Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Sdk.Internal Assembly: LaunchDarkly.InternalSdk.dll Syntax public static class JsonConverterHelpers Methods GetIntOrNull(ref Utf8JsonReader) Declaration public static int? GetIntOrNull(ref Utf8JsonReader reader) Parameters Type Name Description Utf8JsonReader reader Returns Type Description int? GetLongOrNull(ref Utf8JsonReader) Declaration public static long? GetLongOrNull(ref Utf8JsonReader reader) Parameters Type Name Description Utf8JsonReader reader Returns Type Description long? GetTimeOrNull(ref Utf8JsonReader) Declaration public static UnixMillisecondTime? GetTimeOrNull(ref Utf8JsonReader reader) Parameters Type Name Description Utf8JsonReader reader Returns Type Description UnixMillisecondTime? RequireArray(ref Utf8JsonReader) Declaration public static JsonConverterHelpers.ArrayHelper RequireArray(ref Utf8JsonReader reader) Parameters Type Name Description Utf8JsonReader reader Returns Type Description JsonConverterHelpers.ArrayHelper RequireArrayOrNull(ref Utf8JsonReader) Declaration public static JsonConverterHelpers.ArrayHelper RequireArrayOrNull(ref Utf8JsonReader reader) Parameters Type Name Description Utf8JsonReader reader Returns Type Description JsonConverterHelpers.ArrayHelper RequireObject(ref Utf8JsonReader) Declaration public static JsonConverterHelpers.ObjectHelper RequireObject(ref Utf8JsonReader reader) Parameters Type Name Description Utf8JsonReader reader Returns Type Description JsonConverterHelpers.ObjectHelper RequireObjectOrNull(ref Utf8JsonReader) Declaration public static JsonConverterHelpers.ObjectHelper RequireObjectOrNull(ref Utf8JsonReader reader) Parameters Type Name Description Utf8JsonReader reader Returns Type Description JsonConverterHelpers.ObjectHelper RequireTokenType(ref Utf8JsonReader, JsonTokenType) Declaration public static void RequireTokenType(ref Utf8JsonReader reader, JsonTokenType expectedType) Parameters Type Name Description Utf8JsonReader reader JsonTokenType expectedType WriteBooleanIfTrue(Utf8JsonWriter, string, bool) Declaration public static void WriteBooleanIfTrue(Utf8JsonWriter w, string name, bool value) Parameters Type Name Description Utf8JsonWriter w string name bool value WriteIntIfNotNull(Utf8JsonWriter, string, int?) Declaration public static void WriteIntIfNotNull(Utf8JsonWriter w, string name, int? value) Parameters Type Name Description Utf8JsonWriter w string name int? value WriteJsonAsString(Action<Utf8JsonWriter>) Declaration public static string WriteJsonAsString(Action<Utf8JsonWriter> action) Parameters Type Name Description Action<Utf8JsonWriter> action Returns Type Description string WriteLdValue(Utf8JsonWriter, string, LdValue) Declaration public static void WriteLdValue(Utf8JsonWriter w, string name, LdValue value) Parameters Type Name Description Utf8JsonWriter w string name LdValue value WriteLdValueIfNotNull(Utf8JsonWriter, string, LdValue) Declaration public static void WriteLdValueIfNotNull(Utf8JsonWriter w, string name, LdValue value) Parameters Type Name Description Utf8JsonWriter w string name LdValue value WriteStringIfNotNull(Utf8JsonWriter, string, string) Declaration public static void WriteStringIfNotNull(Utf8JsonWriter w, string name, string value) Parameters Type Name Description Utf8JsonWriter w string name string value WriteTimeIfNotNull(Utf8JsonWriter, string, UnixMillisecondTime?) Declaration public static void WriteTimeIfNotNull(Utf8JsonWriter w, string name, UnixMillisecondTime? value) Parameters Type Name Description Utf8JsonWriter w string name UnixMillisecondTime? value"
  },
  "api/LaunchDarkly.Sdk.Internal.LogHelpers.html": {
    "href": "api/LaunchDarkly.Sdk.Internal.LogHelpers.html",
    "title": "Class LogHelpers | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class LogHelpers Inheritance object LogHelpers Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Sdk.Internal Assembly: LaunchDarkly.InternalSdk.dll Syntax public static class LogHelpers Methods LogException(Logger, string, Exception) Declaration public static void LogException(Logger logger, string message, Exception e) Parameters Type Name Description Logger logger string message Exception e"
  },
  "api/LaunchDarkly.Sdk.Internal.TaskExecutor.html": {
    "href": "api/LaunchDarkly.Sdk.Internal.TaskExecutor.html",
    "title": "Class TaskExecutor | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class TaskExecutor Inheritance object TaskExecutor Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Sdk.Internal Assembly: LaunchDarkly.InternalSdk.dll Syntax public sealed class TaskExecutor Constructors TaskExecutor(object, Logger) Declaration public TaskExecutor(object eventSender, Logger log) Parameters Type Name Description object eventSender Logger log TaskExecutor(object, Action<Action>, Logger) Declaration public TaskExecutor(object eventSender, Action<Action> eventHandlerDispatcher, Logger log) Parameters Type Name Description object eventSender Action<Action> eventHandlerDispatcher Logger log Methods ScheduleEvent<T>(T, EventHandler<T>) Declaration public void ScheduleEvent<T>(T eventArgs, EventHandler<T> handlers) Parameters Type Name Description T eventArgs EventHandler<T> handlers Type Parameters Name Description T StartRepeatingTask(TimeSpan, TimeSpan, Func<Task>) Declaration public CancellationTokenSource StartRepeatingTask(TimeSpan initialDelay, TimeSpan interval, Func<Task> taskFn) Parameters Type Name Description TimeSpan initialDelay TimeSpan interval Func<Task> taskFn Returns Type Description CancellationTokenSource"
  },
  "api/LaunchDarkly.Sdk.Internal.UriExtensions.html": {
    "href": "api/LaunchDarkly.Sdk.Internal.UriExtensions.html",
    "title": "Class UriExtensions | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class UriExtensions Inheritance object UriExtensions Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Sdk.Internal Assembly: LaunchDarkly.InternalSdk.dll Syntax public static class UriExtensions Methods AddPath(Uri, string) Declaration public static Uri AddPath(this Uri baseUri, string path) Parameters Type Name Description Uri baseUri string path Returns Type Description Uri AddQuery(Uri, string) Declaration public static Uri AddQuery(this Uri baseUri, string query) Parameters Type Name Description Uri baseUri string query Returns Type Description Uri"
  },
  "api/LaunchDarkly.Sdk.Internal.html": {
    "href": "api/LaunchDarkly.Sdk.Internal.html",
    "title": "Namespace LaunchDarkly.Sdk.Internal | LaunchDarkly Dotnet Server SDK",
    "keywords": "Namespace LaunchDarkly.Sdk.Internal Classes AssemblyVersions JsonConverterHelpers LogHelpers TaskExecutor UriExtensions Structs HashCodeBuilder JsonConverterHelpers.ArrayHelper JsonConverterHelpers.ObjectHelper"
  },
  "api/LaunchDarkly.Sdk.Json.IJsonSerializable.html": {
    "href": "api/LaunchDarkly.Sdk.Json.IJsonSerializable.html",
    "title": "Interface IJsonSerializable | LaunchDarkly Dotnet Server SDK",
    "keywords": "Interface IJsonSerializable Namespace: LaunchDarkly.Sdk.Json Assembly: LaunchDarkly.CommonSdk.dll Syntax public interface IJsonSerializable"
  },
  "api/LaunchDarkly.Sdk.Json.LdJsonConverters.AttributeRefConverter.html": {
    "href": "api/LaunchDarkly.Sdk.Json.LdJsonConverters.AttributeRefConverter.html",
    "title": "Class LdJsonConverters.AttributeRefConverter | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class LdJsonConverters.AttributeRefConverter Inheritance object JsonConverter JsonConverter<AttributeRef> LdJsonConverters.AttributeRefConverter Inherited Members JsonConverter<AttributeRef>.CanConvert(Type) JsonConverter<AttributeRef>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<AttributeRef>.WriteAsPropertyName(Utf8JsonWriter, AttributeRef, JsonSerializerOptions) JsonConverter<AttributeRef>.HandleNull object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Sdk.Json Assembly: LaunchDarkly.CommonSdk.dll Syntax public sealed class LdJsonConverters.AttributeRefConverter : JsonConverter<AttributeRef> Constructors AttributeRefConverter() Declaration public AttributeRefConverter() Methods Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Declaration public override AttributeRef Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonReader reader Type typeToConvert JsonSerializerOptions options Returns Type Description AttributeRef Overrides JsonConverter<AttributeRef>.Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Write(Utf8JsonWriter, AttributeRef, JsonSerializerOptions) Declaration public override void Write(Utf8JsonWriter writer, AttributeRef value, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonWriter writer AttributeRef value JsonSerializerOptions options Overrides JsonConverter<AttributeRef>.Write(Utf8JsonWriter, AttributeRef, JsonSerializerOptions)"
  },
  "api/LaunchDarkly.Sdk.Json.LdJsonConverters.BigSegmentsStatusConverter.html": {
    "href": "api/LaunchDarkly.Sdk.Json.LdJsonConverters.BigSegmentsStatusConverter.html",
    "title": "Class LdJsonConverters.BigSegmentsStatusConverter | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class LdJsonConverters.BigSegmentsStatusConverter Inheritance object JsonConverter JsonConverter<BigSegmentsStatus> LdJsonConverters.BigSegmentsStatusConverter Inherited Members JsonConverter<BigSegmentsStatus>.CanConvert(Type) JsonConverter<BigSegmentsStatus>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<BigSegmentsStatus>.WriteAsPropertyName(Utf8JsonWriter, BigSegmentsStatus, JsonSerializerOptions) JsonConverter<BigSegmentsStatus>.HandleNull object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Sdk.Json Assembly: LaunchDarkly.CommonSdk.dll Syntax public sealed class LdJsonConverters.BigSegmentsStatusConverter : JsonConverter<BigSegmentsStatus> Constructors BigSegmentsStatusConverter() Declaration public BigSegmentsStatusConverter() Methods Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Declaration public override BigSegmentsStatus Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonReader reader Type typeToConvert JsonSerializerOptions options Returns Type Description BigSegmentsStatus Overrides JsonConverter<BigSegmentsStatus>.Read(ref Utf8JsonReader, Type, JsonSerializerOptions) ReadJsonValue(ref Utf8JsonReader) Declaration public static BigSegmentsStatus ReadJsonValue(ref Utf8JsonReader reader) Parameters Type Name Description Utf8JsonReader reader Returns Type Description BigSegmentsStatus Write(Utf8JsonWriter, BigSegmentsStatus, JsonSerializerOptions) Declaration public override void Write(Utf8JsonWriter writer, BigSegmentsStatus value, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonWriter writer BigSegmentsStatus value JsonSerializerOptions options Overrides JsonConverter<BigSegmentsStatus>.Write(Utf8JsonWriter, BigSegmentsStatus, JsonSerializerOptions) WriteJsonValue(BigSegmentsStatus, Utf8JsonWriter) Declaration public static void WriteJsonValue(BigSegmentsStatus instance, Utf8JsonWriter writer) Parameters Type Name Description BigSegmentsStatus instance Utf8JsonWriter writer"
  },
  "api/LaunchDarkly.Sdk.Json.LdJsonConverters.ContextConverter.html": {
    "href": "api/LaunchDarkly.Sdk.Json.LdJsonConverters.ContextConverter.html",
    "title": "Class LdJsonConverters.ContextConverter | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class LdJsonConverters.ContextConverter Inheritance object JsonConverter JsonConverter<Context> LdJsonConverters.ContextConverter Inherited Members JsonConverter<Context>.CanConvert(Type) JsonConverter<Context>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<Context>.WriteAsPropertyName(Utf8JsonWriter, Context, JsonSerializerOptions) JsonConverter<Context>.HandleNull object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Sdk.Json Assembly: LaunchDarkly.CommonSdk.dll Syntax public sealed class LdJsonConverters.ContextConverter : JsonConverter<Context> Constructors ContextConverter() Declaration public ContextConverter() Methods Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Declaration public override Context Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonReader reader Type typeToConvert JsonSerializerOptions options Returns Type Description Context Overrides JsonConverter<Context>.Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Write(Utf8JsonWriter, Context, JsonSerializerOptions) Declaration public override void Write(Utf8JsonWriter writer, Context c, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonWriter writer Context c JsonSerializerOptions options Overrides JsonConverter<Context>.Write(Utf8JsonWriter, Context, JsonSerializerOptions)"
  },
  "api/LaunchDarkly.Sdk.Json.LdJsonConverters.EvaluationErrorKindConverter.html": {
    "href": "api/LaunchDarkly.Sdk.Json.LdJsonConverters.EvaluationErrorKindConverter.html",
    "title": "Class LdJsonConverters.EvaluationErrorKindConverter | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class LdJsonConverters.EvaluationErrorKindConverter Inheritance object JsonConverter JsonConverter<EvaluationErrorKind> LdJsonConverters.EvaluationErrorKindConverter Inherited Members JsonConverter<EvaluationErrorKind>.CanConvert(Type) JsonConverter<EvaluationErrorKind>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<EvaluationErrorKind>.WriteAsPropertyName(Utf8JsonWriter, EvaluationErrorKind, JsonSerializerOptions) JsonConverter<EvaluationErrorKind>.HandleNull object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Sdk.Json Assembly: LaunchDarkly.CommonSdk.dll Syntax public sealed class LdJsonConverters.EvaluationErrorKindConverter : JsonConverter<EvaluationErrorKind> Constructors EvaluationErrorKindConverter() Declaration public EvaluationErrorKindConverter() Methods Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Declaration public override EvaluationErrorKind Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonReader reader Type typeToConvert JsonSerializerOptions options Returns Type Description EvaluationErrorKind Overrides JsonConverter<EvaluationErrorKind>.Read(ref Utf8JsonReader, Type, JsonSerializerOptions) ReadJsonValue(ref Utf8JsonReader) Declaration public static EvaluationErrorKind ReadJsonValue(ref Utf8JsonReader reader) Parameters Type Name Description Utf8JsonReader reader Returns Type Description EvaluationErrorKind Write(Utf8JsonWriter, EvaluationErrorKind, JsonSerializerOptions) Declaration public override void Write(Utf8JsonWriter writer, EvaluationErrorKind value, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonWriter writer EvaluationErrorKind value JsonSerializerOptions options Overrides JsonConverter<EvaluationErrorKind>.Write(Utf8JsonWriter, EvaluationErrorKind, JsonSerializerOptions) WriteJsonValue(EvaluationErrorKind, Utf8JsonWriter) Declaration public static void WriteJsonValue(EvaluationErrorKind instance, Utf8JsonWriter writer) Parameters Type Name Description EvaluationErrorKind instance Utf8JsonWriter writer"
  },
  "api/LaunchDarkly.Sdk.Json.LdJsonConverters.EvaluationReasonConverter.html": {
    "href": "api/LaunchDarkly.Sdk.Json.LdJsonConverters.EvaluationReasonConverter.html",
    "title": "Class LdJsonConverters.EvaluationReasonConverter | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class LdJsonConverters.EvaluationReasonConverter Inheritance object JsonConverter JsonConverter<EvaluationReason> LdJsonConverters.EvaluationReasonConverter Inherited Members JsonConverter<EvaluationReason>.CanConvert(Type) JsonConverter<EvaluationReason>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<EvaluationReason>.WriteAsPropertyName(Utf8JsonWriter, EvaluationReason, JsonSerializerOptions) JsonConverter<EvaluationReason>.HandleNull object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Sdk.Json Assembly: LaunchDarkly.CommonSdk.dll Syntax public sealed class LdJsonConverters.EvaluationReasonConverter : JsonConverter<EvaluationReason> Constructors EvaluationReasonConverter() Declaration public EvaluationReasonConverter() Methods Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Declaration public override EvaluationReason Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonReader reader Type typeToConvert JsonSerializerOptions options Returns Type Description EvaluationReason Overrides JsonConverter<EvaluationReason>.Read(ref Utf8JsonReader, Type, JsonSerializerOptions) ReadJsonValue(ref Utf8JsonReader) Declaration public static EvaluationReason ReadJsonValue(ref Utf8JsonReader reader) Parameters Type Name Description Utf8JsonReader reader Returns Type Description EvaluationReason Write(Utf8JsonWriter, EvaluationReason, JsonSerializerOptions) Declaration public override void Write(Utf8JsonWriter writer, EvaluationReason value, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonWriter writer EvaluationReason value JsonSerializerOptions options Overrides JsonConverter<EvaluationReason>.Write(Utf8JsonWriter, EvaluationReason, JsonSerializerOptions) WriteJsonValue(EvaluationReason, Utf8JsonWriter) Declaration public static void WriteJsonValue(EvaluationReason value, Utf8JsonWriter writer) Parameters Type Name Description EvaluationReason value Utf8JsonWriter writer"
  },
  "api/LaunchDarkly.Sdk.Json.LdJsonConverters.EvaluationReasonKindConverter.html": {
    "href": "api/LaunchDarkly.Sdk.Json.LdJsonConverters.EvaluationReasonKindConverter.html",
    "title": "Class LdJsonConverters.EvaluationReasonKindConverter | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class LdJsonConverters.EvaluationReasonKindConverter Inheritance object JsonConverter JsonConverter<EvaluationReasonKind> LdJsonConverters.EvaluationReasonKindConverter Inherited Members JsonConverter<EvaluationReasonKind>.CanConvert(Type) JsonConverter<EvaluationReasonKind>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<EvaluationReasonKind>.WriteAsPropertyName(Utf8JsonWriter, EvaluationReasonKind, JsonSerializerOptions) JsonConverter<EvaluationReasonKind>.HandleNull object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Sdk.Json Assembly: LaunchDarkly.CommonSdk.dll Syntax public sealed class LdJsonConverters.EvaluationReasonKindConverter : JsonConverter<EvaluationReasonKind> Constructors EvaluationReasonKindConverter() Declaration public EvaluationReasonKindConverter() Methods Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Declaration public override EvaluationReasonKind Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonReader reader Type typeToConvert JsonSerializerOptions options Returns Type Description EvaluationReasonKind Overrides JsonConverter<EvaluationReasonKind>.Read(ref Utf8JsonReader, Type, JsonSerializerOptions) ReadJsonValue(ref Utf8JsonReader) Declaration public EvaluationReasonKind ReadJsonValue(ref Utf8JsonReader reader) Parameters Type Name Description Utf8JsonReader reader Returns Type Description EvaluationReasonKind Write(Utf8JsonWriter, EvaluationReasonKind, JsonSerializerOptions) Declaration public override void Write(Utf8JsonWriter writer, EvaluationReasonKind value, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonWriter writer EvaluationReasonKind value JsonSerializerOptions options Overrides JsonConverter<EvaluationReasonKind>.Write(Utf8JsonWriter, EvaluationReasonKind, JsonSerializerOptions) WriteJsonValue(EvaluationReasonKind, Utf8JsonWriter) Declaration public void WriteJsonValue(EvaluationReasonKind instance, Utf8JsonWriter writer) Parameters Type Name Description EvaluationReasonKind instance Utf8JsonWriter writer"
  },
  "api/LaunchDarkly.Sdk.Json.LdJsonConverters.LdValueConverter.html": {
    "href": "api/LaunchDarkly.Sdk.Json.LdJsonConverters.LdValueConverter.html",
    "title": "Class LdJsonConverters.LdValueConverter | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class LdJsonConverters.LdValueConverter Inheritance object JsonConverter JsonConverter<LdValue> LdJsonConverters.LdValueConverter Inherited Members JsonConverter<LdValue>.CanConvert(Type) JsonConverter<LdValue>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<LdValue>.WriteAsPropertyName(Utf8JsonWriter, LdValue, JsonSerializerOptions) JsonConverter<LdValue>.HandleNull object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Sdk.Json Assembly: LaunchDarkly.CommonSdk.dll Syntax public sealed class LdJsonConverters.LdValueConverter : JsonConverter<LdValue> Constructors LdValueConverter() Declaration public LdValueConverter() Methods Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Declaration public override LdValue Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonReader reader Type typeToConvert JsonSerializerOptions options Returns Type Description LdValue Overrides JsonConverter<LdValue>.Read(ref Utf8JsonReader, Type, JsonSerializerOptions) ReadJsonValue(ref Utf8JsonReader) Declaration public static LdValue ReadJsonValue(ref Utf8JsonReader reader) Parameters Type Name Description Utf8JsonReader reader Returns Type Description LdValue Write(Utf8JsonWriter, LdValue, JsonSerializerOptions) Declaration public override void Write(Utf8JsonWriter writer, LdValue value, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonWriter writer LdValue value JsonSerializerOptions options Overrides JsonConverter<LdValue>.Write(Utf8JsonWriter, LdValue, JsonSerializerOptions) WriteJsonValue(LdValue, Utf8JsonWriter) Declaration public static void WriteJsonValue(LdValue value, Utf8JsonWriter writer) Parameters Type Name Description LdValue value Utf8JsonWriter writer"
  },
  "api/LaunchDarkly.Sdk.Json.LdJsonConverters.UnixMillisecondTimeConverter.html": {
    "href": "api/LaunchDarkly.Sdk.Json.LdJsonConverters.UnixMillisecondTimeConverter.html",
    "title": "Class LdJsonConverters.UnixMillisecondTimeConverter | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class LdJsonConverters.UnixMillisecondTimeConverter Inheritance object JsonConverter JsonConverter<UnixMillisecondTime> LdJsonConverters.UnixMillisecondTimeConverter Inherited Members JsonConverter<UnixMillisecondTime>.CanConvert(Type) JsonConverter<UnixMillisecondTime>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<UnixMillisecondTime>.WriteAsPropertyName(Utf8JsonWriter, UnixMillisecondTime, JsonSerializerOptions) JsonConverter<UnixMillisecondTime>.HandleNull object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Sdk.Json Assembly: LaunchDarkly.CommonSdk.dll Syntax public sealed class LdJsonConverters.UnixMillisecondTimeConverter : JsonConverter<UnixMillisecondTime> Constructors UnixMillisecondTimeConverter() Declaration public UnixMillisecondTimeConverter() Methods Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Declaration public override UnixMillisecondTime Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonReader reader Type typeToConvert JsonSerializerOptions options Returns Type Description UnixMillisecondTime Overrides JsonConverter<UnixMillisecondTime>.Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Write(Utf8JsonWriter, UnixMillisecondTime, JsonSerializerOptions) Declaration public override void Write(Utf8JsonWriter writer, UnixMillisecondTime value, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonWriter writer UnixMillisecondTime value JsonSerializerOptions options Overrides JsonConverter<UnixMillisecondTime>.Write(Utf8JsonWriter, UnixMillisecondTime, JsonSerializerOptions)"
  },
  "api/LaunchDarkly.Sdk.Json.LdJsonConverters.UserConverter.html": {
    "href": "api/LaunchDarkly.Sdk.Json.LdJsonConverters.UserConverter.html",
    "title": "Class LdJsonConverters.UserConverter | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class LdJsonConverters.UserConverter Inheritance object JsonConverter JsonConverter<User> LdJsonConverters.UserConverter Inherited Members JsonConverter<User>.CanConvert(Type) JsonConverter<User>.ReadAsPropertyName(ref Utf8JsonReader, Type, JsonSerializerOptions) JsonConverter<User>.WriteAsPropertyName(Utf8JsonWriter, User, JsonSerializerOptions) JsonConverter<User>.HandleNull object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Sdk.Json Assembly: LaunchDarkly.CommonSdk.dll Syntax public sealed class LdJsonConverters.UserConverter : JsonConverter<User> Constructors UserConverter() Declaration public UserConverter() Methods Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Declaration public override User Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonReader reader Type typeToConvert JsonSerializerOptions options Returns Type Description User Overrides JsonConverter<User>.Read(ref Utf8JsonReader, Type, JsonSerializerOptions) Write(Utf8JsonWriter, User, JsonSerializerOptions) Declaration public override void Write(Utf8JsonWriter writer, User u, JsonSerializerOptions options) Parameters Type Name Description Utf8JsonWriter writer User u JsonSerializerOptions options Overrides JsonConverter<User>.Write(Utf8JsonWriter, User, JsonSerializerOptions)"
  },
  "api/LaunchDarkly.Sdk.Json.LdJsonConverters.html": {
    "href": "api/LaunchDarkly.Sdk.Json.LdJsonConverters.html",
    "title": "Class LdJsonConverters | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class LdJsonConverters Inheritance object LdJsonConverters Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Sdk.Json Assembly: LaunchDarkly.CommonSdk.dll Syntax public static class LdJsonConverters"
  },
  "api/LaunchDarkly.Sdk.Json.LdJsonSerialization.html": {
    "href": "api/LaunchDarkly.Sdk.Json.LdJsonSerialization.html",
    "title": "Class LdJsonSerialization | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class LdJsonSerialization Inheritance object LdJsonSerialization Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Sdk.Json Assembly: LaunchDarkly.CommonSdk.dll Syntax public static class LdJsonSerialization Methods DeserializeObject<T>(string) Declaration public static T DeserializeObject<T>(string json) where T : IJsonSerializable Parameters Type Name Description string json Returns Type Description T Type Parameters Name Description T SerializeObjectToUtf8Bytes<T>(T) Declaration public static byte[] SerializeObjectToUtf8Bytes<T>(T instance) where T : IJsonSerializable Parameters Type Name Description T instance Returns Type Description byte[] Type Parameters Name Description T SerializeObject<T>(T) Declaration public static string SerializeObject<T>(T instance) where T : IJsonSerializable Parameters Type Name Description T instance Returns Type Description string Type Parameters Name Description T"
  },
  "api/LaunchDarkly.Sdk.Json.html": {
    "href": "api/LaunchDarkly.Sdk.Json.html",
    "title": "Namespace LaunchDarkly.Sdk.Json | LaunchDarkly Dotnet Server SDK",
    "keywords": "Namespace LaunchDarkly.Sdk.Json Classes LdJsonConverters LdJsonConverters.AttributeRefConverter LdJsonConverters.BigSegmentsStatusConverter LdJsonConverters.ContextConverter LdJsonConverters.EvaluationErrorKindConverter LdJsonConverters.EvaluationReasonConverter LdJsonConverters.EvaluationReasonKindConverter LdJsonConverters.LdValueConverter LdJsonConverters.UnixMillisecondTimeConverter LdJsonConverters.UserConverter LdJsonSerialization Interfaces IJsonSerializable"
  },
  "api/LaunchDarkly.Sdk.LdValue.ArrayBuilder.html": {
    "href": "api/LaunchDarkly.Sdk.LdValue.ArrayBuilder.html",
    "title": "Class LdValue.ArrayBuilder | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class LdValue.ArrayBuilder Inheritance object LdValue.ArrayBuilder Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Sdk Assembly: LaunchDarkly.CommonSdk.dll Syntax public sealed class LdValue.ArrayBuilder Methods Add(LdValue) Declaration public LdValue.ArrayBuilder Add(LdValue value) Parameters Type Name Description LdValue value Returns Type Description LdValue.ArrayBuilder Add(bool) Declaration public LdValue.ArrayBuilder Add(bool value) Parameters Type Name Description bool value Returns Type Description LdValue.ArrayBuilder Add(double) Declaration public LdValue.ArrayBuilder Add(double value) Parameters Type Name Description double value Returns Type Description LdValue.ArrayBuilder Add(long) Declaration public LdValue.ArrayBuilder Add(long value) Parameters Type Name Description long value Returns Type Description LdValue.ArrayBuilder Add(string) Declaration public LdValue.ArrayBuilder Add(string value) Parameters Type Name Description string value Returns Type Description LdValue.ArrayBuilder Build() Declaration public LdValue Build() Returns Type Description LdValue"
  },
  "api/LaunchDarkly.Sdk.LdValue.Convert.html": {
    "href": "api/LaunchDarkly.Sdk.LdValue.Convert.html",
    "title": "Class LdValue.Convert | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class LdValue.Convert Inheritance object LdValue.Convert Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Sdk Assembly: LaunchDarkly.CommonSdk.dll Syntax public static class LdValue.Convert Fields Bool Declaration public static readonly LdValue.Converter<bool> Bool Field Value Type Description LdValue.Converter<bool> Double Declaration public static readonly LdValue.Converter<double> Double Field Value Type Description LdValue.Converter<double> Float Declaration public static readonly LdValue.Converter<float> Float Field Value Type Description LdValue.Converter<float> Int Declaration public static readonly LdValue.Converter<int> Int Field Value Type Description LdValue.Converter<int> Json Declaration public static readonly LdValue.Converter<LdValue> Json Field Value Type Description LdValue.Converter<LdValue> Long Declaration public static readonly LdValue.Converter<long> Long Field Value Type Description LdValue.Converter<long> String Declaration public static readonly LdValue.Converter<string> String Field Value Type Description LdValue.Converter<string>"
  },
  "api/LaunchDarkly.Sdk.LdValue.Converter-1.html": {
    "href": "api/LaunchDarkly.Sdk.LdValue.Converter-1.html",
    "title": "Class LdValue.Converter<T> | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class LdValue.Converter<T> Inheritance object LdValue.Converter<T> Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Sdk Assembly: LaunchDarkly.CommonSdk.dll Syntax public abstract class LdValue.Converter<T> Type Parameters Name Description T Constructors Converter() Declaration protected Converter() Methods ArrayFrom(IEnumerable<T>) Declaration public LdValue ArrayFrom(IEnumerable<T> values) Parameters Type Name Description IEnumerable<T> values Returns Type Description LdValue ArrayOf(params T[]) Declaration public LdValue ArrayOf(params T[] values) Parameters Type Name Description T[] values Returns Type Description LdValue FromType(T) Declaration public abstract LdValue FromType(T valueOfType) Parameters Type Name Description T valueOfType Returns Type Description LdValue ObjectFrom(IReadOnlyDictionary<string, T>) Declaration public LdValue ObjectFrom(IReadOnlyDictionary<string, T> dictionary) Parameters Type Name Description IReadOnlyDictionary<string, T> dictionary Returns Type Description LdValue ToType(LdValue) Declaration public abstract T ToType(LdValue jsonValue) Parameters Type Name Description LdValue jsonValue Returns Type Description T"
  },
  "api/LaunchDarkly.Sdk.LdValue.ObjectBuilder.html": {
    "href": "api/LaunchDarkly.Sdk.LdValue.ObjectBuilder.html",
    "title": "Class LdValue.ObjectBuilder | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class LdValue.ObjectBuilder Inheritance object LdValue.ObjectBuilder Inherited Members object.GetType() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() Namespace: LaunchDarkly.Sdk Assembly: LaunchDarkly.CommonSdk.dll Syntax public sealed class LdValue.ObjectBuilder Methods Add(string, LdValue) Declaration public LdValue.ObjectBuilder Add(string key, LdValue value) Parameters Type Name Description string key LdValue value Returns Type Description LdValue.ObjectBuilder Add(string, bool) Declaration public LdValue.ObjectBuilder Add(string key, bool value) Parameters Type Name Description string key bool value Returns Type Description LdValue.ObjectBuilder Add(string, double) Declaration public LdValue.ObjectBuilder Add(string key, double value) Parameters Type Name Description string key double value Returns Type Description LdValue.ObjectBuilder Add(string, long) Declaration public LdValue.ObjectBuilder Add(string key, long value) Parameters Type Name Description string key long value Returns Type Description LdValue.ObjectBuilder Add(string, string) Declaration public LdValue.ObjectBuilder Add(string key, string value) Parameters Type Name Description string key string value Returns Type Description LdValue.ObjectBuilder Build() Declaration public LdValue Build() Returns Type Description LdValue Copy(LdValue) Declaration public LdValue.ObjectBuilder Copy(LdValue fromObject) Parameters Type Name Description LdValue fromObject Returns Type Description LdValue.ObjectBuilder Remove(string) Declaration public LdValue.ObjectBuilder Remove(string key) Parameters Type Name Description string key Returns Type Description LdValue.ObjectBuilder Set(string, LdValue) Declaration public LdValue.ObjectBuilder Set(string key, LdValue value) Parameters Type Name Description string key LdValue value Returns Type Description LdValue.ObjectBuilder Set(string, bool) Declaration public LdValue.ObjectBuilder Set(string key, bool value) Parameters Type Name Description string key bool value Returns Type Description LdValue.ObjectBuilder Set(string, double) Declaration public LdValue.ObjectBuilder Set(string key, double value) Parameters Type Name Description string key double value Returns Type Description LdValue.ObjectBuilder Set(string, long) Declaration public LdValue.ObjectBuilder Set(string key, long value) Parameters Type Name Description string key long value Returns Type Description LdValue.ObjectBuilder Set(string, string) Declaration public LdValue.ObjectBuilder Set(string key, string value) Parameters Type Name Description string key string value Returns Type Description LdValue.ObjectBuilder"
  },
  "api/LaunchDarkly.Sdk.LdValue.html": {
    "href": "api/LaunchDarkly.Sdk.LdValue.html",
    "title": "Struct LdValue | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct LdValue Implements IEquatable<LdValue> IJsonSerializable Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk Assembly: LaunchDarkly.CommonSdk.dll Syntax [JsonConverter(typeof(LdJsonConverters.LdValueConverter))] public struct LdValue : IEquatable<LdValue>, IJsonSerializable Properties AsBool Declaration public bool AsBool { get; } Property Value Type Description bool AsDouble Declaration public double AsDouble { get; } Property Value Type Description double AsFloat Declaration public float AsFloat { get; } Property Value Type Description float AsInt Declaration public int AsInt { get; } Property Value Type Description int AsLong Declaration public long AsLong { get; } Property Value Type Description long AsString Declaration public string AsString { get; } Property Value Type Description string Count Declaration public int Count { get; } Property Value Type Description int Dictionary Declaration public ImmutableDictionary<string, LdValue> Dictionary { get; } Property Value Type Description ImmutableDictionary<string, LdValue> IsInt Declaration public bool IsInt { get; } Property Value Type Description bool IsNull Declaration public bool IsNull { get; } Property Value Type Description bool IsNumber Declaration public bool IsNumber { get; } Property Value Type Description bool IsString Declaration public bool IsString { get; } Property Value Type Description bool List Declaration public ImmutableList<LdValue> List { get; } Property Value Type Description ImmutableList<LdValue> Null Declaration public static LdValue Null { get; } Property Value Type Description LdValue Type Declaration public LdValueType Type { get; } Property Value Type Description LdValueType Methods ArrayFrom(IEnumerable<LdValue>) Declaration public static LdValue ArrayFrom(IEnumerable<LdValue> values) Parameters Type Name Description IEnumerable<LdValue> values Returns Type Description LdValue ArrayOf(params LdValue[]) Declaration public static LdValue ArrayOf(params LdValue[] values) Parameters Type Name Description LdValue[] values Returns Type Description LdValue AsDictionary<T>(Converter<T>) Declaration public IReadOnlyDictionary<string, T> AsDictionary<T>(LdValue.Converter<T> desiredType) Parameters Type Name Description LdValue.Converter<T> desiredType Returns Type Description IReadOnlyDictionary<string, T> Type Parameters Name Description T AsList<T>(Converter<T>) Declaration public IReadOnlyList<T> AsList<T>(LdValue.Converter<T> desiredType) Parameters Type Name Description LdValue.Converter<T> desiredType Returns Type Description IReadOnlyList<T> Type Parameters Name Description T BuildArray() Declaration public static LdValue.ArrayBuilder BuildArray() Returns Type Description LdValue.ArrayBuilder BuildObject() Declaration public static LdValue.ObjectBuilder BuildObject() Returns Type Description LdValue.ObjectBuilder Equals(LdValue) Declaration public bool Equals(LdValue o) Parameters Type Name Description LdValue o Returns Type Description bool Equals(object) Declaration public override bool Equals(object o) Parameters Type Name Description object o Returns Type Description bool Overrides ValueType.Equals(object) Get(int) Declaration public LdValue Get(int index) Parameters Type Name Description int index Returns Type Description LdValue Get(string) Declaration public LdValue Get(string key) Parameters Type Name Description string key Returns Type Description LdValue GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode() ObjectFrom(IReadOnlyDictionary<string, LdValue>) Declaration public static LdValue ObjectFrom(IReadOnlyDictionary<string, LdValue> dictionary) Parameters Type Name Description IReadOnlyDictionary<string, LdValue> dictionary Returns Type Description LdValue Of(bool) Declaration public static LdValue Of(bool value) Parameters Type Name Description bool value Returns Type Description LdValue Of(double) Declaration public static LdValue Of(double value) Parameters Type Name Description double value Returns Type Description LdValue Of(int) Declaration public static LdValue Of(int value) Parameters Type Name Description int value Returns Type Description LdValue Of(long) Declaration public static LdValue Of(long value) Parameters Type Name Description long value Returns Type Description LdValue Of(float) Declaration public static LdValue Of(float value) Parameters Type Name Description float value Returns Type Description LdValue Of(string) Declaration public static LdValue Of(string value) Parameters Type Name Description string value Returns Type Description LdValue Parse(string) Declaration public static LdValue Parse(string jsonString) Parameters Type Name Description string jsonString Returns Type Description LdValue ToJsonString() Declaration public string ToJsonString() Returns Type Description string ToString() Declaration public override string ToString() Returns Type Description string Overrides ValueType.ToString() Operators operator ==(LdValue, LdValue) Declaration public static bool operator ==(LdValue a, LdValue b) Parameters Type Name Description LdValue a LdValue b Returns Type Description bool operator !=(LdValue, LdValue) Declaration public static bool operator !=(LdValue a, LdValue b) Parameters Type Name Description LdValue a LdValue b Returns Type Description bool Implements IEquatable<T> IJsonSerializable"
  },
  "api/LaunchDarkly.Sdk.LdValueType.html": {
    "href": "api/LaunchDarkly.Sdk.LdValueType.html",
    "title": "Enum LdValueType | LaunchDarkly Dotnet Server SDK",
    "keywords": "Enum LdValueType Namespace: LaunchDarkly.Sdk Assembly: LaunchDarkly.CommonSdk.dll Syntax public enum LdValueType Fields Name Description Array Bool Null Number Object String"
  },
  "api/LaunchDarkly.Sdk.Server.Components.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Components.html",
    "title": "Class Components | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class Components Provides factories for the standard implementations of LaunchDarkly component interfaces. Inheritance object Components Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server Assembly: LaunchDarkly.ServerSdk.dll Syntax public static class Components Remarks Some of the configuration options in ConfigurationBuilder affect the entire SDK, but others are specific to one area of functionality, such as how the SDK receives feature flag updates or processes analytics events. For the latter, the standard way to specify a configuration is to call one of the static methods in Components (such as StreamingDataSource()), apply any desired configuration change to the object that that method returns (such as InitialReconnectDelay(TimeSpan)), and then use the corresponding method in ConfigurationBuilder (such as DataSource(IComponentConfigurer<IDataSource>)) to use that configured component in the SDK. Properties | Edit this page View Source ExternalUpdatesOnly Returns a configuration object that disables direct connection with LaunchDarkly for feature flag updates. Declaration public static IComponentConfigurer<IDataSource> ExternalUpdatesOnly { get; } Property Value Type Description IComponentConfigurer<IDataSource> Remarks Passing this to DataSource(IComponentConfigurer<IDataSource>) causes the SDK not to retrieve feature flag data from LaunchDarkly, regardless of any other configuration. This is normally done if you are using the Relay Proxy in \"daemon mode\", where an external process-- the Relay Proxy-- connects to LaunchDarkly and populates a persistent data store with the feature flag data. The data store could also be populated by another process that is running the LaunchDarkly SDK. If there is no external process updating the data store, then the SDK will not have any feature flag data and will return application default values only. Examples var config = Configuration.Builder(sdkKey) .DataSource(Components.ExternalUpdatesOnly) .DataStore(Components.PersistentDataStore(Redis.DataStore())) // assuming the Relay Proxy is using Redis .Build(); | Edit this page View Source InMemoryDataStore Returns a factory for the default in-memory implementation of IDataStore. Declaration public static IComponentConfigurer<IDataStore> InMemoryDataStore { get; } Property Value Type Description IComponentConfigurer<IDataStore> Remarks Since it is the default, you do not normally need to call this method, unless you need to create a data store instance for testing purposes. | Edit this page View Source NoEvents Returns a configuration object that disables analytics events. Declaration public static IComponentConfigurer<IEventProcessor> NoEvents { get; } Property Value Type Description IComponentConfigurer<IEventProcessor> Remarks Passing this to Events(IComponentConfigurer<IEventProcessor>) causes the SDK to discard all analytics events and not send them to LaunchDarkly, regardless of any other configuration. Examples var config = Configuration.Builder(sdkKey) .Events(Components.NoEvents) .Build(); | Edit this page View Source NoLogging A configuration object that disables logging. Declaration public static IComponentConfigurer<LoggingConfiguration> NoLogging { get; } Property Value Type Description IComponentConfigurer<LoggingConfiguration> Remarks This is the same as Logging(LaunchDarkly.Logging.Logs.None). Examples var config = Configuration.Builder(sdkKey) .Logging(Components.NoLogging) .Build(); Methods | Edit this page View Source ApplicationInfo() Returns a configurable builder for the SDK's application metadata. Declaration public static ApplicationInfoBuilder ApplicationInfo() Returns Type Description ApplicationInfoBuilder a configuration builder Remarks Passing this to ApplicationInfo(ApplicationInfoBuilder) after setting any desired properties on the builder, applies this configuration to the SDK. Examples var config = Configuration.Builder(sdkKey) .ApplicationInfo( Components.ApplicationInfo().ApplicationID(\"MyApplication\").ApplicationVersion(\"version123abc\") ) .Build(); | Edit this page View Source BigSegments(IComponentConfigurer<IBigSegmentStore>) Returns a configuration builder for the SDK's Big Segments feature. Declaration public static BigSegmentsConfigurationBuilder BigSegments(IComponentConfigurer<IBigSegmentStore> storeConfig) Parameters Type Name Description IComponentConfigurer<IBigSegmentStore> storeConfig the factory/configuration builder for the underlying data store Returns Type Description BigSegmentsConfigurationBuilder a configuration builder Remarks \"Big Segments\" are a specific type of segments. For more information, read the LaunchDarkly documentation about segments: https://docs.launchdarkly.com/home/users/segments After configuring this object, use BigSegments(IComponentConfigurer<BigSegmentsConfiguration>) to store it in your SDK configuration. For example, using the Redis integration: var config = Configuration.Builder(sdkKey) .BigSegments(Components.BigSegments(Redis.DataStore().Prefix(\"app1\")) .ContextCacheSize(2000)) .Build(); You must always specify the storeConfig parameter, to tell the SDK what database you are using. Several database integrations exist for the LaunchDarkly SDK, each with its own behavior and options specific to that database; this is described via some implementation of IComponentConfigurer<IBigSegmentStore>. The BigSegmentsConfigurationBuilder adds configuration options for aspects of SDK behavior that are independent of the database. In the example above, Prefix is an option specifically for the Redis integration, whereas ContextCacheSize is an option that can be used for any data store type. | Edit this page View Source Hooks() Returns a configuration builder for the SDK's hook configuration. var config = Configuration.Builder(sdkKey) .Hooks(Components.Hooks() .Add(new MyHook(...)) .Add(new MyOtherHook(...)) ).Build(); Declaration public static HookConfigurationBuilder Hooks() Returns Type Description HookConfigurationBuilder a configuration builder | Edit this page View Source Hooks(IEnumerable<Hook>) Returns a configuration builder for the SDK's hook configuration, with an initial set of hooks given as a parameter. Use this instead of Hooks() if you already have an existing collection of hooks satisfying the IEnumerable interface. var listOfHooks = ...; var config = Configuration.Builder(sdkKey) .Hooks(Components.Hooks(listOfHooks)).Build(); Declaration public static HookConfigurationBuilder Hooks(IEnumerable<Hook> hooks) Parameters Type Name Description IEnumerable<Hook> hooks a collection of hooks Returns Type Description HookConfigurationBuilder a configuration builder | Edit this page View Source HttpConfiguration() Returns a configuration builder for the SDK's networking configuration. Declaration public static HttpConfigurationBuilder HttpConfiguration() Returns Type Description HttpConfigurationBuilder a configuration builder Remarks Passing this to Http(IComponentConfigurer<HttpConfiguration>), after setting any desired properties on the builder, applies this configuration to all HTTP/HTTPS requests made by the SDK. Examples var config = Configuration.Builder(sdkKey) .Http( Components.HttpConfiguration() .ConnectTimeout(TimeSpan.FromMilliseconds(3000)) ) .Build(); | Edit this page View Source Logging() Returns a configuration builder for the SDK's logging configuration. Declaration public static LoggingConfigurationBuilder Logging() Returns Type Description LoggingConfigurationBuilder a configuration builder Remarks Passing this to Logging(IComponentConfigurer<LoggingConfiguration>), after setting any desired properties on the builder, applies this configuration to the SDK. The default behavior, if you do not change any properties, is to send log output to Error, with a minimum level of Info (that is, Debug logging is disabled). For more about how logging works in the SDK, see the SDK SDK reference guide. Examples var config = Configuration.Builder(\"my-sdk-key\") .Logging(Components.Logging().Level(LogLevel.Warn))) .Build(); See Also Logging(IComponentConfigurer<LoggingConfiguration>) Logging(ILogAdapter) NoLogging | Edit this page View Source Logging(ILogAdapter) Returns a configuration builder for the SDK's logging configuration, specifying the logging implementation. Declaration public static LoggingConfigurationBuilder Logging(ILogAdapter adapter) Parameters Type Name Description ILogAdapter adapter an ILogAdapter for the desired logging implementation Returns Type Description LoggingConfigurationBuilder a configuration builder Remarks This is a shortcut for calling Logging() and then Adapter(ILogAdapter), to specify a logging implementation other than the default one. For instance, in a .NET Core application you can use LaunchDarkly.Logging.Logs.CoreLogging to use the standard .NET Core logging framework. If you do not also specify a minimum logging level with Level(LogLevel), or with some other filtering mechanism that is defined by an external logging framework, then the log output will show all logging levels including Debug. For more about log adapters, see Adapter(ILogAdapter). For more about how logging works in the SDK, see the SDK SDK reference guide. Examples var config = Configuration.Builder(sdkKey) .Logging(Components.Logging(Logs.CoreLogging(coreLoggingFactory))) .Build(); See Also Logging(IComponentConfigurer<LoggingConfiguration>) Adapter(ILogAdapter) Logging() NoLogging | Edit this page View Source PersistentDataStore(IComponentConfigurer<IPersistentDataStoreAsync>) Returns a configurable factory for a persistent data store. Declaration public static PersistentDataStoreBuilder PersistentDataStore(IComponentConfigurer<IPersistentDataStoreAsync> storeConfig) Parameters Type Name Description IComponentConfigurer<IPersistentDataStoreAsync> storeConfig the configuration builder/factory for the underlying data store Returns Type Description PersistentDataStoreBuilder a configuration builder Remarks This method takes a configuration builder that is provided by some persistent data store implementation (i.e. a database integration), and converts it to a PersistentDataStoreBuilder which can be used to add caching behavior. You can then pass the PersistentDataStoreBuilder object to DataStore(IComponentConfigurer<IDataStore>) to use this configuration in the SDK. Example usage: var myStore = Components.PersistentDataStore(Redis.FeatureStore()) .CacheTtl(TimeSpan.FromSeconds(45)); var config = Configuration.Builder(sdkKey) .DataStore(myStore) .Build(); The method is overloaded because some persistent data store implementations use IPersistentDataStore while others use IPersistentDataStoreAsync. | Edit this page View Source PersistentDataStore(IComponentConfigurer<IPersistentDataStore>) Returns a configurable factory for a persistent data store. Declaration public static PersistentDataStoreBuilder PersistentDataStore(IComponentConfigurer<IPersistentDataStore> storeConfig) Parameters Type Name Description IComponentConfigurer<IPersistentDataStore> storeConfig the configuration builder/factory for the underlying data store Returns Type Description PersistentDataStoreBuilder a configuration builder Remarks This method takes a configuration builder that is provided by some persistent data store implementation (i.e. a database integration), and converts it to a PersistentDataStoreBuilder which can be used to add caching behavior. You can then pass the PersistentDataStoreBuilder object to DataStore(IComponentConfigurer<IDataStore>) to use this configuration in the SDK. Example usage: var myStore = Components.PersistentDataStore(Redis.FeatureStore()) .CacheTtl(TimeSpan.FromSeconds(45)); var config = Configuration.Builder(sdkKey) .DataStore(myStore) .Build(); The method is overloaded because some persistent data store implementations use IPersistentDataStore while others use IPersistentDataStoreAsync. | Edit this page View Source PollingDataSource() Returns a configurable factory for using polling mode to get feature flag data. Declaration public static PollingDataSourceBuilder PollingDataSource() Returns Type Description PollingDataSourceBuilder a builder for setting polling connection properties Remarks This is not the default behavior; by default, the SDK uses a streaming connection to receive feature flag data from LaunchDarkly. In polling mode, the SDK instead makes a new HTTP request to LaunchDarkly at regular intervals. HTTP caching allows it to avoid redundantly downloading data if there have been no changes, but polling is still less efficient than streaming and should only be used on the advice of LaunchDarkly support. To use polling mode, call this method to obtain a builder, change its properties with the PollingDataSourceBuilder methods, and pass it to DataSource(IComponentConfigurer<IDataSource>). Setting Offline(bool) to true will superseded this setting and completely disable network requests. Examples var config = Configuration.Builder(sdkKey) .DataSource(Components.PollingDataSource() .PollInterval(TimeSpan.FromSeconds(45))) .Build(); | Edit this page View Source SendEvents() Returns a configuration builder for analytics event delivery. Declaration public static EventProcessorBuilder SendEvents() Returns Type Description EventProcessorBuilder a builder for setting event properties Remarks The default configuration has events enabled with default settings. If you want to customize this behavior, call this method to obtain a builder, change its properties with the EventProcessorBuilder methods, and pass it to Events(IComponentConfigurer<IEventProcessor>). To completely disable sending analytics events, use NoEvents instead. Examples var config = Configuration.Builder(sdkKey) .Events(Components.SendEvents() .Capacity(5000) .FlushInterval(TimeSpan.FromSeconds(2))) .Build(); | Edit this page View Source ServiceEndpoints() Returns a builder for configuring custom service URIs. Declaration public static ServiceEndpointsBuilder ServiceEndpoints() Returns Type Description ServiceEndpointsBuilder a configuration builder Remarks Passing this to ServiceEndpoints(ServiceEndpointsBuilder), after setting any desired properties on the builder, applies this configuration to the SDK. Most applications will never need to use this method. The main use case is when connecting to a LaunchDarkly Relay Proxy instance. For more information, see ServiceEndpointsBuilder. Examples var config = Configuration.Builder(sdkKey) .ServiceEndpoints(Components.ServiceEndpoints().RelayProxy(\"http://my-relay-hostname:80\")) .Build(); See Also ServiceEndpoints(ServiceEndpointsBuilder) | Edit this page View Source StreamingDataSource() Returns a configurable factory for using streaming mode to get feature flag data. Declaration public static StreamingDataSourceBuilder StreamingDataSource() Returns Type Description StreamingDataSourceBuilder a builder for setting streaming connection properties Remarks By default, the SDK uses a streaming connection to receive feature flag data from LaunchDarkly. To use the default behavior, you do not need to call this method. However, if you want to customize the behavior of the connection, call this method to obtain a builder, change its properties with the StreamingDataSourceBuilder methods, and pass it to DataSource(IComponentConfigurer<IDataSource>). Setting Offline(bool) to true will superseded this setting and completely disable network requests. Examples var config = Configuration.Builder(sdkKey) .DataSource(Components.StreamingDataSource() .InitialReconnectDelay(TimeSpan.FromMilliseconds(500))) .Build(); | Edit this page View Source WrapperInfo() Returns a configuration builder for setting wrapper information. Applications do not need to call this method. Declaration public static WrapperInfoBuilder WrapperInfo() Returns Type Description WrapperInfoBuilder a configuration builder Remarks This is intended for use by LaunchDarkly in the development of wrapper SDKs."
  },
  "api/LaunchDarkly.Sdk.Server.Configuration.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Configuration.html",
    "title": "Class Configuration | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class Configuration Configuration options for LdClient. This class should normally be constructed with Builder(string). Inheritance object Configuration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server Assembly: LaunchDarkly.ServerSdk.dll Syntax public class Configuration Remarks Instances of Configuration are immutable once created. They can be created with the factory method Default(string), or using a builder pattern with Builder(string) or Builder(Configuration). Properties | Edit this page View Source ApplicationInfo ApplicationInfo configuration which contains info about the application the SDK is running in. Declaration public ApplicationInfoBuilder ApplicationInfo { get; } Property Value Type Description ApplicationInfoBuilder | Edit this page View Source BigSegments A builder for BigSegmentsConfiguration. Declaration public IComponentConfigurer<BigSegmentsConfiguration> BigSegments { get; } Property Value Type Description IComponentConfigurer<BigSegmentsConfiguration> | Edit this page View Source DataSource A factory object that creates an implementation of IDataSource, which will receive feature flag data. Declaration public IComponentConfigurer<IDataSource> DataSource { get; } Property Value Type Description IComponentConfigurer<IDataSource> | Edit this page View Source DataStore A factory object that creates an implementation of IDataStore, to be used for holding feature flags and related data received from LaunchDarkly. Declaration public IComponentConfigurer<IDataStore> DataStore { get; } Property Value Type Description IComponentConfigurer<IDataStore> Remarks The default is InMemoryDataStore, but you may provide a custom implementation. | Edit this page View Source DiagnosticOptOut True if diagnostic events have been disabled. Declaration public bool DiagnosticOptOut { get; } Property Value Type Description bool | Edit this page View Source Events A factory object that creates an implementation of IEventProcessor, which will process all analytics events. Declaration public IComponentConfigurer<IEventProcessor> Events { get; } Property Value Type Description IComponentConfigurer<IEventProcessor> Remarks The default is SendEvents(), but you may provide a custom implementation. | Edit this page View Source Hooks Hooks configuration which contains a list of zero or more hooks to be executed by the SDK at points of interest. Declaration public HookConfigurationBuilder Hooks { get; } Property Value Type Description HookConfigurationBuilder | Edit this page View Source Http A builder that creates an HttpConfiguration, defining the SDK's networking behavior. Declaration public IComponentConfigurer<HttpConfiguration> Http { get; } Property Value Type Description IComponentConfigurer<HttpConfiguration> | Edit this page View Source Logging A builder that creates a LoggingConfiguration, defining the SDK's logging configuration. Declaration public IComponentConfigurer<LoggingConfiguration> Logging { get; } Property Value Type Description IComponentConfigurer<LoggingConfiguration> Remarks SDK components should not use this property directly; instead, the SDK client will use it to create a logger instance which will be in LdClientContext. | Edit this page View Source Offline Whether or not this client is offline. If true, no calls to Launchdarkly will be made. Declaration public bool Offline { get; } Property Value Type Description bool | Edit this page View Source SdkKey The SDK key for your LaunchDarkly environment. Declaration public string SdkKey { get; } Property Value Type Description string | Edit this page View Source ServiceEndpoints Defines the base service URIs used by SDK components. Declaration public ServiceEndpoints ServiceEndpoints { get; } Property Value Type Description ServiceEndpoints | Edit this page View Source StartWaitTime How long the client constructor will block awaiting a successful connection to LaunchDarkly. Declaration public TimeSpan StartWaitTime { get; } Property Value Type Description TimeSpan Remarks Setting this to 0 will not block and will cause the constructor to return immediately. The default value is 10 seconds. | Edit this page View Source WrapperInfo WrapperInfo configuration which contains wrapper configuration. This is primarily intended for use by LaunchDarkly when developing wrapper SDKs. Declaration public WrapperInfoBuilder WrapperInfo { get; } Property Value Type Description WrapperInfoBuilder Methods | Edit this page View Source Builder(Configuration) Creates an ConfigurationBuilder based on an existing configuration. Declaration public static ConfigurationBuilder Builder(Configuration fromConfiguration) Parameters Type Name Description Configuration fromConfiguration the existing configuration Returns Type Description ConfigurationBuilder a builder object Remarks Modifying properties of the builder will not affect the original configuration object. Examples var configWithCustomEventProperties = Configuration.Builder(originalConfig) .Events(Components.SendEvents().Capacity(50000)) .Build(); | Edit this page View Source Builder(string) Creates a ConfigurationBuilder for constructing a configuration object using a fluent syntax. Declaration public static ConfigurationBuilder Builder(string sdkKey) Parameters Type Name Description string sdkKey the SDK key for your LaunchDarkly environment Returns Type Description ConfigurationBuilder a builder object Remarks This is the only method for building a Configuration if you are setting properties besides the SdkKey. The ConfigurationBuilder has methods for setting any number of properties, after which you call Build() to get the resulting Configuration instance. Examples var config = Configuration.Builder(\"my-sdk-key\") .StartWaitTime(TimeSpan.FromSeconds(5)) .Build(); | Edit this page View Source Default(string) Creates a configuration with all parameters set to the default. Declaration public static Configuration Default(string sdkKey) Parameters Type Name Description string sdkKey the SDK key for your LaunchDarkly environment Returns Type Description Configuration a Configuration instance"
  },
  "api/LaunchDarkly.Sdk.Server.ConfigurationBuilder.html": {
    "href": "api/LaunchDarkly.Sdk.Server.ConfigurationBuilder.html",
    "title": "Class ConfigurationBuilder | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class ConfigurationBuilder A mutable object that uses the Builder pattern to specify properties for a Configuration object. Inheritance object ConfigurationBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server Assembly: LaunchDarkly.ServerSdk.dll Syntax public sealed class ConfigurationBuilder Remarks Obtain an instance of this class by calling Builder(string). All of the builder methods for setting a configuration property return a reference to the same builder, so they can be chained together. Examples var config = Configuration.Builder(\"my-sdk-key\") .StartWaitTime(TimeSpan.FromSeconds(5)) .Events(Components.SendEvents().Capacity(50000)) .Build(); Methods | Edit this page View Source ApplicationInfo(ApplicationInfoBuilder) Sets the SDK's application metadata, which may be used in the LaunchDarkly analytics or other product features. This object is normally a configuration builder obtained from ApplicationInfo(), which has methods for setting individual metadata properties. Declaration public ConfigurationBuilder ApplicationInfo(ApplicationInfoBuilder applicationInfo) Parameters Type Name Description ApplicationInfoBuilder applicationInfo builder for ApplicationInfo(ApplicationInfoBuilder) Returns Type Description ConfigurationBuilder the same builder | Edit this page View Source BigSegments(IComponentConfigurer<BigSegmentsConfiguration>) Sets the configuration of the SDK's Big Segments feature. Declaration public ConfigurationBuilder BigSegments(IComponentConfigurer<BigSegmentsConfiguration> bigSegmentsConfig) Parameters Type Name Description IComponentConfigurer<BigSegmentsConfiguration> bigSegmentsConfig a configuration factory object returned by BigSegments(IComponentConfigurer<IBigSegmentStore>) Returns Type Description ConfigurationBuilder the same builder Remarks \"Big Segments\" are a specific type of user segments. For more information, read the LaunchDarkly documentation about user segments: https://docs.launchdarkly.com/home/users/segments If you are using this feature, you will normally specify a database implementation that matches how the LaunchDarkly Relay Proxy is configured, since the Relay Proxy manages the Big Segment data. By default, there is no implementation and Big Segments cannot be evaluated. In this case, any flag evaluation that references a Big Segment will behave as if no users are included in any Big Segments, and the EvaluationReason associated with any such flag evaluation will have a BigSegmentsStatus of NotConfigured. Examples // This example uses the Redis integration var config = Configuration.Builder(sdkKey) .BigSegments(Components.BigSegments(Redis.DataStore().Prefix(\"app1\")) .ContextCacheSize(2000)) .Build(); | Edit this page View Source Build() Creates a Configuration based on the properties that have been set on the builder. Modifying the builder after this point does not affect the returned Configuration. Declaration public Configuration Build() Returns Type Description Configuration the configured Configuration object | Edit this page View Source DataSource(IComponentConfigurer<IDataSource>) Sets the implementation of the component that receives feature flag data from LaunchDarkly, using a factory object. Declaration public ConfigurationBuilder DataSource(IComponentConfigurer<IDataSource> dataSourceConfig) Parameters Type Name Description IComponentConfigurer<IDataSource> dataSourceConfig the factory object Returns Type Description ConfigurationBuilder the same builder Remarks Depending on the implementation, the factory may be a builder that allows you to set other configuration options as well. The default is StreamingDataSource(). You may instead use PollingDataSource(), ExternalUpdatesOnly, or a test fixture such as DataSource(). See those methods for details on how to configure them. | Edit this page View Source DataStore(IComponentConfigurer<IDataStore>) Sets the data store implementation to be used for holding feature flags and related data received from LaunchDarkly. Declaration public ConfigurationBuilder DataStore(IComponentConfigurer<IDataStore> dataStoreConfig) Parameters Type Name Description IComponentConfigurer<IDataStore> dataStoreConfig the factory object Returns Type Description ConfigurationBuilder the same builder Remarks The default is InMemoryDataStore, but you may choose to use a custom implementation such as a database integration. For the latter, you will normally use PersistentDataStore(IComponentConfigurer<IPersistentDataStore>) in conjunction with some specific type for that integration. This is specified as a factory because the SDK normally manages the lifecycle of the data store; it will create an instance from the factory when an LdClient is created, and dispose of that instance when disposing of the client. | Edit this page View Source DiagnosticOptOut(bool) Set to true to opt out of sending diagnostic events. Declaration public ConfigurationBuilder DiagnosticOptOut(bool diagnosticOptOut) Parameters Type Name Description bool diagnosticOptOut true to disable diagnostic events Returns Type Description ConfigurationBuilder the same builder Remarks Unless the diagnosticOptOut field is set to true, the client will send some diagnostics data to the LaunchDarkly servers in order to assist in the development of future SDK improvements. These diagnostics consist of an initial payload containing some details of SDK in use, the SDK's configuration, and the platform the SDK is being run on, as well as payloads sent periodically with information on irregular occurrences such as dropped events. | Edit this page View Source Events(IComponentConfigurer<IEventProcessor>) Sets the implementation of the component that processes analytics events. Declaration public ConfigurationBuilder Events(IComponentConfigurer<IEventProcessor> eventsConfig) Parameters Type Name Description IComponentConfigurer<IEventProcessor> eventsConfig a builder/factory object for event configuration Returns Type Description ConfigurationBuilder the same builder Remarks The default is SendEvents(), but you may choose to set it to a customized EventProcessorBuilder, a custom implementation (for instance, a test fixture), or disable events with NoEvents. | Edit this page View Source Hooks(HookConfigurationBuilder) Configures the SDK's user-defined hooks. Declaration public ConfigurationBuilder Hooks(HookConfigurationBuilder hooksConfig) Parameters Type Name Description HookConfigurationBuilder hooksConfig the hook configuration Returns Type Description ConfigurationBuilder the same builder | Edit this page View Source Http(IComponentConfigurer<HttpConfiguration>) Sets the SDK's networking configuration, using a builder object that is obtained from HttpConfiguration(), which has methods for setting individual HTTP-related properties. Declaration public ConfigurationBuilder Http(IComponentConfigurer<HttpConfiguration> httpConfig) Parameters Type Name Description IComponentConfigurer<HttpConfiguration> httpConfig a builder object for HTTP configuration Returns Type Description ConfigurationBuilder the same builder | Edit this page View Source Logging(ILogAdapter) Sets the SDK's logging destination. Declaration public ConfigurationBuilder Logging(ILogAdapter logAdapter) Parameters Type Name Description ILogAdapter logAdapter an ILogAdapter for the desired logging implementation Returns Type Description ConfigurationBuilder the same builder Remarks This is a shortcut for Logging(Components.Logging(logAdapter)). You can use it when you only want to specify the basic logging destination, and do not need to set other log properties. For more about how logging works in the SDK, see the SDK SDK reference guide. Examples var config = Configuration.Builder(\"my-sdk-key\") .Logging(Logs.ToWriter(Console.Out)) .Build(); | Edit this page View Source Logging(IComponentConfigurer<LoggingConfiguration>) Sets the SDK's logging configuration, using a builder object that is obtained from Logging() which has methods for setting individual logging-related properties. Declaration public ConfigurationBuilder Logging(IComponentConfigurer<LoggingConfiguration> loggingConfig) Parameters Type Name Description IComponentConfigurer<LoggingConfiguration> loggingConfig a builder object for logging configuration Returns Type Description ConfigurationBuilder the same builder Remarks As a shortcut for disabling logging, you may use NoLogging instead. If all you want to do is to set the basic logging destination, and you do not need to set other logging properties, you can use Logging(ILogAdapter). For more about how logging works in the SDK, see the SDK SDK reference guide. Examples var config = Configuration.Builder(\"my-sdk-key\") .Logging(Components.Logging().Level(LogLevel.Warn))) .Build(); See Also Logging() Logging(ILogAdapter) NoLogging Logging(ILogAdapter) | Edit this page View Source Offline(bool) Sets whether or not this client is offline. If true, no calls to Launchdarkly will be made. Declaration public ConfigurationBuilder Offline(bool offline) Parameters Type Name Description bool offline true if the client should remain offline Returns Type Description ConfigurationBuilder the same builder | Edit this page View Source SdkKey(string) Sets the SDK key for your LaunchDarkly environment. Declaration public ConfigurationBuilder SdkKey(string sdkKey) Parameters Type Name Description string sdkKey the SDK key Returns Type Description ConfigurationBuilder the same builder | Edit this page View Source ServiceEndpoints(ServiceEndpointsBuilder) Sets the SDK's service URIs, using a configuration builder obtained from ServiceEndpoints(). Declaration public ConfigurationBuilder ServiceEndpoints(ServiceEndpointsBuilder serviceEndpointsBuilder) Parameters Type Name Description ServiceEndpointsBuilder serviceEndpointsBuilder the subconfiguration builder object Returns Type Description ConfigurationBuilder the main configuration builder Remarks This overwrites any previous options set with ServiceEndpoints(ServiceEndpointsBuilder). If you want to set multiple options, set them on the same ServiceEndpointsBuilder. See Also ServiceEndpoints() ServiceEndpointsBuilder | Edit this page View Source StartWaitTime(TimeSpan) Sets how long the client constructor will block awaiting a successful connection to LaunchDarkly. Declaration public ConfigurationBuilder StartWaitTime(TimeSpan startWaitTime) Parameters Type Name Description TimeSpan startWaitTime the length of time to wait Returns Type Description ConfigurationBuilder the same builder Remarks Setting this to 0 will not block and will cause the constructor to return immediately. The default value is 5 seconds. | Edit this page View Source WrapperInfo(WrapperInfoBuilder) Set the wrapper information. Declaration public ConfigurationBuilder WrapperInfo(WrapperInfoBuilder wrapperInfo) Parameters Type Name Description WrapperInfoBuilder wrapperInfo the wrapper builder Returns Type Description ConfigurationBuilder the same builder Remarks This is intended for use with wrapper SDKs from LaunchDarkly. Additionally, any wrapper SDK may overwrite any application developer provided wrapper information."
  },
  "api/LaunchDarkly.Sdk.Server.DataModel.html": {
    "href": "api/LaunchDarkly.Sdk.Server.DataModel.html",
    "title": "Class DataModel | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class DataModel Contains information about the internal data model for feature flags and user segments. Inheritance object DataModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server Assembly: LaunchDarkly.ServerSdk.dll Syntax public static class DataModel Remarks The details of the data model are not public to application code (although of course developers can easily look at the code or the data) so that changes to LaunchDarkly SDK implementation details will not be breaking changes to the application. Therefore, most of the members of this class are internal. The public members provide a high-level description of model objects so that custom integration code or test code can store or serialize them. Fields | Edit this page View Source Features The DataStoreTypes.DataKind instance that describes feature flag data. Declaration public static DataStoreTypes.DataKind Features Field Value Type Description DataStoreTypes.DataKind Remarks Applications should not need to reference this object directly. It is public so that custom integrations and test code can serialize or deserialize data or inject it into a data store. | Edit this page View Source Segments The DataStoreTypes.DataKind instance that describes user segment data. Declaration public static DataStoreTypes.DataKind Segments Field Value Type Description DataStoreTypes.DataKind Remarks Applications should not need to reference this object directly. It is public so that custom integrations and test code can serialize or deserialize data or inject it into a data store. Properties | Edit this page View Source AllDataKinds An enumeration of all supported DataStoreTypes.DataKinds. Declaration public static IEnumerable<DataStoreTypes.DataKind> AllDataKinds { get; } Property Value Type Description IEnumerable<DataStoreTypes.DataKind> Remarks Applications should not need to reference this object directly. It is public so that custom data store implementations can determine ahead of time what kinds of model objects may need to be stored, if necessary."
  },
  "api/LaunchDarkly.Sdk.Server.FeatureFlagsState.html": {
    "href": "api/LaunchDarkly.Sdk.Server.FeatureFlagsState.html",
    "title": "Class FeatureFlagsState | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class FeatureFlagsState A snapshot of the state of all feature flags with regard to a specific user. See calling AllFlagsState(Context, params FlagsStateOption[]). Inheritance object FeatureFlagsState Implements IJsonSerializable Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server Assembly: LaunchDarkly.ServerSdk.dll Syntax [JsonConverter(typeof(FeatureFlagsStateConverter))] public class FeatureFlagsState : IJsonSerializable Remarks Serializing this object to JSON using System.Text.Json or LdJsonSerialization will produce the appropriate data structure for bootstrapping the LaunchDarkly JavaScript client. Using Newtonsoft.Json will not work correctly without special handling; see LaunchDarkly.Sdk.Json for details. Properties | Edit this page View Source Valid True if this object contains a valid snapshot of feature flag state, or false if the state could not be computed (for instance, because the client was offline or there was no user). Declaration public bool Valid { get; } Property Value Type Description bool Methods | Edit this page View Source Builder(params FlagsStateOption[]) Returns a builder for constructing a new instance of this class. May be useful in testing. Declaration public static FeatureFlagsStateBuilder Builder(params FlagsStateOption[] options) Parameters Type Name Description FlagsStateOption[] options the same options that can be passed to AllFlagsState(Context, params FlagsStateOption[]) Returns Type Description FeatureFlagsStateBuilder a new FeatureFlagsStateBuilder | Edit this page View Source Equals(object) Declaration public override bool Equals(object other) Parameters Type Name Description object other Returns Type Description bool Overrides object.Equals(object) | Edit this page View Source GetFlagReason(string) Returns the evaluation reason of an individual feature flag (as returned by BoolVariation(string, Context, bool), etc.) at the time the state was recorded. Declaration public EvaluationReason? GetFlagReason(string key) Parameters Type Name Description string key the feature flag key Returns Type Description EvaluationReason? the evaluation reason; null if reasons were not recorded, or if there was no such flag | Edit this page View Source GetFlagValueJson(string) Returns the value of an individual feature flag at the time the state was recorded. Declaration public LdValue GetFlagValueJson(string key) Parameters Type Name Description string key the feature flag key Returns Type Description LdValue the flag's JSON value; Null if the flag returned the default value, or if there was no such flag | Edit this page View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() | Edit this page View Source ToValuesJsonMap() Returns a dictionary of flag keys to flag values. Declaration public IReadOnlyDictionary<string, LdValue> ToValuesJsonMap() Returns Type Description IReadOnlyDictionary<string, LdValue> a dictionary of flag keys to flag values Remarks If a flag would have evaluated to the default value, its value will be Null. Do not use this method if you are passing data to the front end to \"bootstrap\" the JavaScript client. Instead, serialize the FeatureFlagsState object to JSON using JsonConvert.SerializeObject(). Implements IJsonSerializable"
  },
  "api/LaunchDarkly.Sdk.Server.FeatureFlagsStateBuilder.html": {
    "href": "api/LaunchDarkly.Sdk.Server.FeatureFlagsStateBuilder.html",
    "title": "Class FeatureFlagsStateBuilder | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class FeatureFlagsStateBuilder A builder for constructing FeatureFlagsState instances. Inheritance object FeatureFlagsStateBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server Assembly: LaunchDarkly.ServerSdk.dll Syntax public class FeatureFlagsStateBuilder Remarks This may be useful in test code. Use Builder(params FlagsStateOption[]) to create a new builder. Methods | Edit this page View Source AddFlag(string, EvaluationDetail<LdValue>) Adds the result of a flag evaluation. Declaration public FeatureFlagsStateBuilder AddFlag(string flagKey, EvaluationDetail<LdValue> result) Parameters Type Name Description string flagKey the flag key EvaluationDetail<LdValue> result the evaluation result Returns Type Description FeatureFlagsStateBuilder | Edit this page View Source Build() Creates a FeatureFlagsState with the properties that have been set on the builder. Declaration public FeatureFlagsState Build() Returns Type Description FeatureFlagsState a state object | Edit this page View Source Valid(bool) Allows the state object to be marked as not valid (i.e. an error occurred, so flags could not be evaluated). Declaration public FeatureFlagsStateBuilder Valid(bool valid) Parameters Type Name Description bool valid true if valid, false if invalid (default is valid) Returns Type Description FeatureFlagsStateBuilder the same builder"
  },
  "api/LaunchDarkly.Sdk.Server.FlagsStateOption.html": {
    "href": "api/LaunchDarkly.Sdk.Server.FlagsStateOption.html",
    "title": "Class FlagsStateOption | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class FlagsStateOption Optional parameters that can be passed to AllFlagsState(Context, params FlagsStateOption[]). Inheritance object FlagsStateOption Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk.Server Assembly: LaunchDarkly.ServerSdk.dll Syntax public class FlagsStateOption Fields | Edit this page View Source ClientSideOnly Specifies that only flags marked for use with the client-side SDK should be included in the state object. By default, all flags are included. Declaration public static readonly FlagsStateOption ClientSideOnly Field Value Type Description FlagsStateOption | Edit this page View Source DetailsOnlyForTrackedFlags Specifies that any flag metadata that is normally only used for event generation - such as flag versions and evaluation reasons - should be omitted for any flag that does not have event tracking or debugging turned on. This reduces the size of the JSON data if you are passing the flag state to the front end. Declaration public static readonly FlagsStateOption DetailsOnlyForTrackedFlags Field Value Type Description FlagsStateOption | Edit this page View Source WithReasons Specifies that evaluation reasons should be included in the state object (as returned by BoolVariationDetail(string, Context, bool), etc.). By default, they are not included. Declaration public static readonly FlagsStateOption WithReasons Field Value Type Description FlagsStateOption Methods | Edit this page View Source ToString() Returns the string representation of this option. Declaration public override string ToString() Returns Type Description string the string representation Overrides object.ToString()"
  },
  "api/LaunchDarkly.Sdk.Server.Hooks.EvaluationSeriesContext.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Hooks.EvaluationSeriesContext.html",
    "title": "Class EvaluationSeriesContext | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class EvaluationSeriesContext EvaluationSeriesContext represents parameters associated with a feature flag evaluation. It is made available in Hook stage callbacks. Inheritance object EvaluationSeriesContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server.Hooks Assembly: LaunchDarkly.ServerSdk.dll Syntax public sealed class EvaluationSeriesContext Constructors | Edit this page View Source EvaluationSeriesContext(string, Context, LdValue, string) Constructs a new EvaluationSeriesContext. Declaration public EvaluationSeriesContext(string flagKey, Context context, LdValue defaultValue, string method) Parameters Type Name Description string flagKey the flag key Context context the context LdValue defaultValue the default value string method the variation method Properties | Edit this page View Source Context The Context used for evaluation. Declaration public Context Context { get; } Property Value Type Description Context | Edit this page View Source DefaultValue The user-provided default value for the evaluation. Declaration public LdValue DefaultValue { get; } Property Value Type Description LdValue | Edit this page View Source FlagKey The key of the feature flag. Declaration public string FlagKey { get; } Property Value Type Description string | Edit this page View Source Method The variation method that triggered the evaluation. Declaration public string Method { get; } Property Value Type Description string"
  },
  "api/LaunchDarkly.Sdk.Server.Hooks.Hook.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Hooks.Hook.html",
    "title": "Class Hook | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class Hook A Hook is a set of user-defined callbacks that are executed by the SDK at various points of interest. To create your own hook with customized logic, derive from Hook and override its methods. Hook currently defines an \"evaluation\" series, which is composed of two stages: \"beforeEvaluation\" and \"afterEvaluation\". These are executed by the SDK before and after the evaluation of a feature flag. Multiple hooks may be configured in the SDK. By default, the SDK will execute each hook's beforeEvaluation stage in the order they were configured, and afterEvaluation in reverse order. This means the last hook defined will tightly wrap the evaluation process, while hooks defined earlier in the sequence are nested outside of it. Inheritance object Hook Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server.Hooks Assembly: LaunchDarkly.ServerSdk.dll Syntax public class Hook : IDisposable Constructors | Edit this page View Source Hook(string) Constructs a new Hook with the given name. The name may be used in log messages. Declaration public Hook(string name) Parameters Type Name Description string name the name of the hook Properties | Edit this page View Source Metadata Access this hook's HookMetadata. Declaration public HookMetadata Metadata { get; } Property Value Type Description HookMetadata Methods | Edit this page View Source AfterEvaluation(EvaluationSeriesContext, ImmutableDictionary<string, object>, EvaluationDetail<LdValue>) AfterEvaluation is executed by the SDK after the evaluation of a feature flag. It does not apply to evaluations performed during a call to AllFlagsState. The function should return the given ImmutableDictionary<TKey, TValue> unmodified, for forward compatibility with subsequent stages that may be added. Declaration public virtual ImmutableDictionary<string, object> AfterEvaluation(EvaluationSeriesContext context, ImmutableDictionary<string, object> data, EvaluationDetail<LdValue> detail) Parameters Type Name Description EvaluationSeriesContext context parameters associated with this evaluation ImmutableDictionary<string, object> data user-configurable data from the BeforeEvaluation(EvaluationSeriesContext, ImmutableDictionary<string, object>) stage EvaluationDetail<LdValue> detail flag evaluation result Returns Type Description ImmutableDictionary<string, object> user-configurable data, which is currently unused but may be forwarded to subsequent stages in future versions of the SDK | Edit this page View Source BeforeEvaluation(EvaluationSeriesContext, ImmutableDictionary<string, object>) BeforeEvaluation is executed by the SDK before the evaluation of a feature flag. It does not apply to evaluations performed during a call to AllFlagsState. To pass user-configured data to AfterEvaluation(EvaluationSeriesContext, ImmutableDictionary<string, object>, EvaluationDetail<LdValue>), return a modification of the given ImmutableDictionary<TKey, TValue>. You may use existing ImmutableDictionary methods, for example: var builder = data.ToBuilder(); builder[\"foo\"] = \"bar\"; return builder.ToImmutable(); Or, you may use the SeriesDataBuilder for a fluent API: return new SeriesDataBuilder(data).Set(\"foo\", \"bar\").Build(); The modified data is not shared with any other hook. It will be passed to subsequent stages in the evaluation series, including AfterEvaluation(EvaluationSeriesContext, ImmutableDictionary<string, object>, EvaluationDetail<LdValue>). Declaration public virtual ImmutableDictionary<string, object> BeforeEvaluation(EvaluationSeriesContext context, ImmutableDictionary<string, object> data) Parameters Type Name Description EvaluationSeriesContext context parameters associated with this evaluation ImmutableDictionary<string, object> data user-configurable data, currently empty Returns Type Description ImmutableDictionary<string, object> user-configurable data, which will be forwarded to AfterEvaluation(EvaluationSeriesContext, ImmutableDictionary<string, object>, EvaluationDetail<LdValue>) | Edit this page View Source Dispose() Disposes the hook. This method will be called when the SDK is disposed. Declaration public void Dispose() | Edit this page View Source Dispose(bool) Disposes the hook. This method will be called when the SDK is disposed. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description bool disposing true if the caller is Dispose, false if the caller is a finalizer Implements IDisposable"
  },
  "api/LaunchDarkly.Sdk.Server.Hooks.HookMetadata.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Hooks.HookMetadata.html",
    "title": "Class HookMetadata | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class HookMetadata HookMetadata contains information related to a Hook which can be inspected by the SDK, or within a hook stage. Inheritance object HookMetadata Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server.Hooks Assembly: LaunchDarkly.ServerSdk.dll Syntax public sealed class HookMetadata Constructors | Edit this page View Source HookMetadata(string) Constructs a new HookMetadata with the given hook name. Declaration public HookMetadata(string name) Parameters Type Name Description string name name of the hook. May be used in logs by the SDK Properties | Edit this page View Source Name Returns the name of the hook. Declaration public string Name { get; } Property Value Type Description string"
  },
  "api/LaunchDarkly.Sdk.Server.Hooks.Method.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Hooks.Method.html",
    "title": "Class Method | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class Method Method represents the SDK client method that triggered a hook invocation. Inheritance object Method Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server.Hooks Assembly: LaunchDarkly.ServerSdk.dll Syntax public static class Method Fields | Edit this page View Source BoolVariation Declaration public const string BoolVariation = \"LdClient.BoolVariation\" Field Value Type Description string | Edit this page View Source BoolVariationDetail Declaration public const string BoolVariationDetail = \"LdClient.BoolVariationDetail\" Field Value Type Description string | Edit this page View Source DoubleVariation Declaration public const string DoubleVariation = \"LdClient.DoubleVariation\" Field Value Type Description string | Edit this page View Source DoubleVariationDetail Declaration public const string DoubleVariationDetail = \"LdClient.DoubleVariationDetail\" Field Value Type Description string | Edit this page View Source FloatVariation Declaration public const string FloatVariation = \"LdClient.FloatVariation\" Field Value Type Description string | Edit this page View Source FloatVariationDetail Declaration public const string FloatVariationDetail = \"LdClient.FloatVariationDetail\" Field Value Type Description string | Edit this page View Source IntVariation Declaration public const string IntVariation = \"LdClient.IntVariation\" Field Value Type Description string | Edit this page View Source IntVariationDetail Declaration public const string IntVariationDetail = \"LdClient.IntVariationDetail\" Field Value Type Description string | Edit this page View Source JsonVariation Declaration public const string JsonVariation = \"LdClient.JsonVariation\" Field Value Type Description string | Edit this page View Source JsonVariationDetail Declaration public const string JsonVariationDetail = \"LdClient.JsonVariationDetail\" Field Value Type Description string | Edit this page View Source MigrationVariation Declaration public const string MigrationVariation = \"LdClient.MigrationVariation\" Field Value Type Description string | Edit this page View Source StringVariation Declaration public const string StringVariation = \"LdClient.StringVariation\" Field Value Type Description string | Edit this page View Source StringVariationDetail Declaration public const string StringVariationDetail = \"LdClient.StringVariationDetail\" Field Value Type Description string"
  },
  "api/LaunchDarkly.Sdk.Server.Hooks.SeriesDataBuilder.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Hooks.SeriesDataBuilder.html",
    "title": "Class SeriesDataBuilder | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class SeriesDataBuilder Builder for constructing series data, which is passed to between Hook methods. Use of this builder is optional; it is provided for convenience. // ImmutableDictionary passed into Hook method: var data = ... // Add a new key and return an updated dictionary: return new SeriesDataBuilder(data).Set(\"key\", \"value\").Build(); Inheritance object SeriesDataBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server.Hooks Assembly: LaunchDarkly.ServerSdk.dll Syntax public sealed class SeriesDataBuilder Constructors | Edit this page View Source SeriesDataBuilder() Constructs a new builder with empty series data. Declaration public SeriesDataBuilder() | Edit this page View Source SeriesDataBuilder(ImmutableDictionary<string, object>) Constructs a new builder from pre-existing series data. Declaration public SeriesDataBuilder(ImmutableDictionary<string, object> dictionary) Parameters Type Name Description ImmutableDictionary<string, object> dictionary pre-existing series data Methods | Edit this page View Source Build() Returns a SeriesData based on the current state of the builder. Declaration public ImmutableDictionary<string, object> Build() Returns Type Description ImmutableDictionary<string, object> new series data | Edit this page View Source Set(string, object) Sets a key-value pair. Declaration public SeriesDataBuilder Set(string key, object value) Parameters Type Name Description string key key of value object value the value to set Returns Type Description SeriesDataBuilder this builder"
  },
  "api/LaunchDarkly.Sdk.Server.Hooks.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Hooks.html",
    "title": "Namespace LaunchDarkly.Sdk.Server.Hooks | LaunchDarkly Dotnet Server SDK",
    "keywords": "Namespace LaunchDarkly.Sdk.Server.Hooks Classes EvaluationSeriesContext EvaluationSeriesContext represents parameters associated with a feature flag evaluation. It is made available in Hook stage callbacks. Hook A Hook is a set of user-defined callbacks that are executed by the SDK at various points of interest. To create your own hook with customized logic, derive from Hook and override its methods. Hook currently defines an \"evaluation\" series, which is composed of two stages: \"beforeEvaluation\" and \"afterEvaluation\". These are executed by the SDK before and after the evaluation of a feature flag. Multiple hooks may be configured in the SDK. By default, the SDK will execute each hook's beforeEvaluation stage in the order they were configured, and afterEvaluation in reverse order. This means the last hook defined will tightly wrap the evaluation process, while hooks defined earlier in the sequence are nested outside of it. HookMetadata HookMetadata contains information related to a Hook which can be inspected by the SDK, or within a hook stage. Method Method represents the SDK client method that triggered a hook invocation. SeriesDataBuilder Builder for constructing series data, which is passed to between Hook methods. Use of this builder is optional; it is provided for convenience. // ImmutableDictionary passed into Hook method: var data = ... // Add a new key and return an updated dictionary: return new SeriesDataBuilder(data).Set(\"key\", \"value\").Build();"
  },
  "api/LaunchDarkly.Sdk.Server.ILdClientExtensions.html": {
    "href": "api/LaunchDarkly.Sdk.Server.ILdClientExtensions.html",
    "title": "Class ILdClientExtensions | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class ILdClientExtensions Convenience methods that extend the ILdClient interface. Inheritance object ILdClientExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server Assembly: LaunchDarkly.ServerSdk.dll Syntax public static class ILdClientExtensions Remarks These allow you to do the following: Treat a string-valued flag as if it referenced values of an enum type. These are implemented outside of ILdClient and LdClient because they do not rely on any implementation details of LdClient; they are decorators that would work equally well with a stub or test implementation of the interface. Methods | Edit this page View Source EnumVariationDetail<T>(ILdClient, string, Context, T) Equivalent to StringVariationDetail(string, Context, string), but converts the flag's string value to an enum value. Declaration public static EvaluationDetail<T> EnumVariationDetail<T>(this ILdClient client, string key, Context context, T defaultValue) Parameters Type Name Description ILdClient client the client instance string key the unique feature key for the feature flag Context context the evaluation context T defaultValue the default value of the flag (as an enum value) Returns Type Description EvaluationDetail<T> an EvaluationDetail<T> object Type Parameters Name Description T the enum type Remarks If the flag has a value that is not one of the allowed enum value names, or is not a string, defaultValue is returned. Note that there is no type constraint to guarantee that T really is an enum type, because that is a C# 7.3 feature that is unavailable in older versions of .NET Standard. If you try to use a non-enum type, you will simply receive the default value back. | Edit this page View Source EnumVariation<T>(ILdClient, string, Context, T) Equivalent to StringVariation(string, Context, string), but converts the flag's string value to an enum value. Declaration public static T EnumVariation<T>(this ILdClient client, string key, Context context, T defaultValue) Parameters Type Name Description ILdClient client the client instance string key the unique feature key for the feature flag Context context the evaluation context T defaultValue the default value of the flag (as an enum value) Returns Type Description T the variation for the given user, or defaultValue if the flag cannot be evaluated or does not have a valid enum value Type Parameters Name Description T the enum type Remarks If the flag has a value that is not one of the allowed enum value names, or is not a string, defaultValue is returned. Note that there is no type constraint to guarantee that T really is an enum type, because that is a C# 7.3 feature that is unavailable in older versions of .NET Standard. If you try to use a non-enum type, you will simply receive the default value back."
  },
  "api/LaunchDarkly.Sdk.Server.Integrations.BigSegmentsConfigurationBuilder.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Integrations.BigSegmentsConfigurationBuilder.html",
    "title": "Class BigSegmentsConfigurationBuilder | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class BigSegmentsConfigurationBuilder Contains methods for configuring the SDK's Big Segments behavior. Inheritance object BigSegmentsConfigurationBuilder Implements IComponentConfigurer<BigSegmentsConfiguration> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server.Integrations Assembly: LaunchDarkly.ServerSdk.dll Syntax public sealed class BigSegmentsConfigurationBuilder : IComponentConfigurer<BigSegmentsConfiguration> Remarks \"Big Segments\" are a specific type of segments. For more information, read the LaunchDarkly documentation about segments: https://docs.launchdarkly.com/home/users/segments If you want to set non-default values for any of these properties, create a builder with BigSegments(IComponentConfigurer<IBigSegmentStore>), change its properties with the methods of this class, and pass it to BigSegments(IComponentConfigurer<BigSegmentsConfiguration>): Examples // This example uses the Redis integration var config = Configuration.Builder(sdkKey) .BigSegments(Components.BigSegments(Redis.DataStore().Prefix(\"app1\")) .ContextCacheSize(2000)) .Build(); Fields | Edit this page View Source DefaultContextCacheSize Default value for ContextCacheSize(int). Declaration public const int DefaultContextCacheSize = 1000 Field Value Type Description int | Edit this page View Source DefaultContextCacheTime Default value for ContextCacheTime(TimeSpan): five seconds. Declaration public static readonly TimeSpan DefaultContextCacheTime Field Value Type Description TimeSpan | Edit this page View Source DefaultStaleAfter Default value for StaleAfter(TimeSpan): two minutes. Declaration public static readonly TimeSpan DefaultStaleAfter Field Value Type Description TimeSpan | Edit this page View Source DefaultStatusPollInterval Default value for StatusPollInterval(TimeSpan): five seconds. Declaration public static readonly TimeSpan DefaultStatusPollInterval Field Value Type Description TimeSpan Methods | Edit this page View Source Build(LdClientContext) Called internally by the SDK to create an implementation instance. Applications should not need to call this method. Declaration public BigSegmentsConfiguration Build(LdClientContext context) Parameters Type Name Description LdClientContext context provides configuration properties and other components from the current SDK client instance Returns Type Description BigSegmentsConfiguration a instance of the component type | Edit this page View Source ContextCacheSize(int) Sets the maximum number of contexts whose Big Segment state will be cached by the SDK at any given time. Declaration public BigSegmentsConfigurationBuilder ContextCacheSize(int contextCacheSize) Parameters Type Name Description int contextCacheSize the maximum number of context states to cache Returns Type Description BigSegmentsConfigurationBuilder the builder Remarks To reduce database traffic, the SDK maintains a least-recently-used cache by context key. When a feature flag that references a Big Segment is evaluated for some context that is not currently in the cache, the SDK queries the database for all Big Segment memberships of that context, and stores them together in a single cache entry. If the cache is full, the oldest entry is dropped. A higher value for ContextCacheSize(int) means that database queries for Big Segments will be done less often for recently-referenced contexts, if the application has many contexts, at the cost of increased memory used by the cache. Cache entries can also expire based on the setting of ContextCacheTime(TimeSpan). See Also DefaultContextCacheSize | Edit this page View Source ContextCacheTime(TimeSpan) Sets the maximum length of time that the Big Segment state for a context will be cached by the SDK. Declaration public BigSegmentsConfigurationBuilder ContextCacheTime(TimeSpan contextCacheTime) Parameters Type Name Description TimeSpan contextCacheTime the cache TTL Returns Type Description BigSegmentsConfigurationBuilder the builder Remarks See ContextCacheSize(int) for more about this cache. A higher value for ContextCacheTime(TimeSpan) means that database queries for the Big Segment state of any given context will be done less often, but that changes to segment membership may not be detected as soon. See Also DefaultContextCacheTime | Edit this page View Source StaleAfter(TimeSpan) Sets the maximum length of time between updates of the Big Segments data before the data is considered out of date. Declaration public BigSegmentsConfigurationBuilder StaleAfter(TimeSpan staleAfter) Parameters Type Name Description TimeSpan staleAfter the time limit for marking the data as stale (any value less than or equal to zero will be changed to DefaultStaleAfter) Returns Type Description BigSegmentsConfigurationBuilder the builder Remarks Normally, the LaunchDarkly Relay Proxy updates a timestamp in the Big Segments store at intervals to confirm that it is still in sync with the LaunchDarkly data, even if there have been no changes to the data. If the timestamp falls behind the current time by the amount specified in StaleAfter(TimeSpan), the SDK assumes that something is not working correctly in this process and that the data may not be accurate. While in a stale state, the SDK will still continue using the last known data, but Status will return true in its Stale property, and any EvaluationReason generated from a feature flag that references a Big Segment will have a BigSegmentsStatus of Stale. | Edit this page View Source StatusPollInterval(TimeSpan) Sets the interval at which the SDK will poll the Big Segment store to make sure it is available and to determine how long ago it was updated. Declaration public BigSegmentsConfigurationBuilder StatusPollInterval(TimeSpan statusPollInterval) Parameters Type Name Description TimeSpan statusPollInterval the status polling interval (any value less than or equal to zero will be changed to DefaultStatusPollInterval) Returns Type Description BigSegmentsConfigurationBuilder the builder See Also DefaultStatusPollInterval Implements IComponentConfigurer<T>"
  },
  "api/LaunchDarkly.Sdk.Server.Integrations.EventProcessorBuilder.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Integrations.EventProcessorBuilder.html",
    "title": "Class EventProcessorBuilder | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class EventProcessorBuilder Contains methods for configuring delivery of analytics events. Inheritance object EventProcessorBuilder Implements IComponentConfigurer<IEventProcessor> IDiagnosticDescription Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server.Integrations Assembly: LaunchDarkly.ServerSdk.dll Syntax public sealed class EventProcessorBuilder : IComponentConfigurer<IEventProcessor>, IDiagnosticDescription Remarks The SDK normally buffers analytics events and sends them to LaunchDarkly at intervals. If you want to customize this behavior, create a builder with SendEvents(), change its properties with the methods of this class, and pass it to Events(IComponentConfigurer<IEventProcessor>). Examples var config = Configuration.Builder(sdkKey) .Events( Components.SendEvents().Capacity(5000).FlushInterval(TimeSpan.FromSeconds(2)) ) .Build(); Constructors View Source EventProcessorBuilder() Declaration public EventProcessorBuilder() Fields | Edit this page View Source DefaultCapacity The default value for Capacity(int). Declaration public const int DefaultCapacity = 10000 Field Value Type Description int | Edit this page View Source DefaultContextKeysCapacity The default value for ContextKeysCapacity(int). Declaration public const int DefaultContextKeysCapacity = 1000 Field Value Type Description int | Edit this page View Source DefaultContextKeysFlushInterval The default value for ContextKeysFlushInterval(TimeSpan). Declaration public static readonly TimeSpan DefaultContextKeysFlushInterval Field Value Type Description TimeSpan | Edit this page View Source DefaultDiagnosticRecordingInterval The default value for DiagnosticRecordingInterval(TimeSpan). Declaration public static readonly TimeSpan DefaultDiagnosticRecordingInterval Field Value Type Description TimeSpan | Edit this page View Source DefaultFlushInterval The default value for FlushInterval(TimeSpan). Declaration public static readonly TimeSpan DefaultFlushInterval Field Value Type Description TimeSpan | Edit this page View Source MinimumDiagnosticRecordingInterval The minimum value for DiagnosticRecordingInterval(TimeSpan). Declaration public static readonly TimeSpan MinimumDiagnosticRecordingInterval Field Value Type Description TimeSpan Methods | Edit this page View Source AllAttributesPrivate(bool) Sets whether or not all optional context attributes should be hidden from LaunchDarkly. Declaration public EventProcessorBuilder AllAttributesPrivate(bool allAttributesPrivate) Parameters Type Name Description bool allAttributesPrivate true if all context attributes should be private Returns Type Description EventProcessorBuilder the builder Remarks If this is true, all contextattribute values (other than the key) will be private, not just the attributes specified in PrivateAttributes(params string[]) or on a per-context basis with ContextBuilder methods. By default, it is false. | Edit this page View Source Build(LdClientContext) Called internally by the SDK to create an implementation instance. Applications should not need to call this method. Declaration public IEventProcessor Build(LdClientContext context) Parameters Type Name Description LdClientContext context provides configuration properties and other components from the current SDK client instance Returns Type Description IEventProcessor a instance of the component type | Edit this page View Source Capacity(int) Sets the capacity of the events buffer. Declaration public EventProcessorBuilder Capacity(int capacity) Parameters Type Name Description int capacity the capacity of the event buffer Returns Type Description EventProcessorBuilder the builder Remarks The client buffers up to this many events in memory before flushing. If the capacity is exceeded before the buffer is flushed (see FlushInterval(TimeSpan)), events will be discarded. Increasing the capacity means that events are less likely to be discarded, at the cost of consuming more memory. The default value is DefaultCapacity. A zero or negative value will be changed to the default. | Edit this page View Source ContextKeysCapacity(int) Sets the number of context keys that the event processor can remember at any one time. Declaration public EventProcessorBuilder ContextKeysCapacity(int contextKeysCapacity) Parameters Type Name Description int contextKeysCapacity the maximum number of context keys to remember Returns Type Description EventProcessorBuilder the builder Remarks To avoid sending duplicate context details in analytics events, the SDK maintains a cache of recently seen contexts, expiring at an interval set by ContextKeysFlushInterval(TimeSpan). The default value for the size of this cache is DefaultContextKeysCapacity. A zero or negative value will be changed to the default. See Also ContextKeysFlushInterval(TimeSpan) | Edit this page View Source ContextKeysFlushInterval(TimeSpan) Sets the interval at which the event processor will reset its cache of known context keys. Declaration public EventProcessorBuilder ContextKeysFlushInterval(TimeSpan contextKeysFlushInterval) Parameters Type Name Description TimeSpan contextKeysFlushInterval the flush interval Returns Type Description EventProcessorBuilder the builder Remarks The default value is DefaultContextKeysFlushInterval. A zero or negative value will be changed to the default. | Edit this page View Source DescribeConfiguration(LdClientContext) Called internally by the SDK to inspect the configuration. Applications do not need to call this method. Declaration public LdValue DescribeConfiguration(LdClientContext context) Parameters Type Name Description LdClientContext context SDK configuration/component information Returns Type Description LdValue a JSON value | Edit this page View Source DiagnosticRecordingInterval(TimeSpan) Sets the interval at which periodic diagnostic data is sent. Declaration public EventProcessorBuilder DiagnosticRecordingInterval(TimeSpan diagnosticRecordingInterval) Parameters Type Name Description TimeSpan diagnosticRecordingInterval the diagnostics interval Returns Type Description EventProcessorBuilder the builder Remarks The default value is DefaultDiagnosticRecordingInterval; the minimum value is MinimumDiagnosticRecordingInterval. This property is ignored if DiagnosticOptOut(bool) is set to true. | Edit this page View Source FlushInterval(TimeSpan) Sets the interval between flushes of the event buffer. Declaration public EventProcessorBuilder FlushInterval(TimeSpan flushInterval) Parameters Type Name Description TimeSpan flushInterval the flush interval Returns Type Description EventProcessorBuilder the builder Remarks Decreasing the flush interval means that the event buffer is less likely to reach capacity. The default value is DefaultFlushInterval. A zero or negative value will be changed to the default. | Edit this page View Source PrivateAttributes(params string[]) Marks a set of attribute names or subproperties as private. Declaration public EventProcessorBuilder PrivateAttributes(params string[] attributes) Parameters Type Name Description string[] attributes a set of names or paths that will be removed from context data sent to LaunchDarkly Returns Type Description EventProcessorBuilder the builder Remarks Any contexts sent to LaunchDarkly with this configuration active will have attributes with these names removed. This is in addition to any attributes that were marked as private for an individual context with ContextBuilder methods. If and only if a parameter starts with a slash, it is interpreted as a slash-delimited path that can denote a nested property within a JSON object. For instance, \"/address/street\" means that if there is an attribute called \"address\" that is a JSON object, and one of the object's properties is \"street\", the \"street\" property will be redacted from the analytics data but other properties within \"address\" will still be sent. This syntax also uses the JSON Pointer convention of escaping a literal slash character as \"~1\" and a tilde as \"~0\". This method replaces any previous PrivateAttributes(params string[]) that were set on the same builder, rather than adding to them. Implements IComponentConfigurer<T> IDiagnosticDescription"
  },
  "api/LaunchDarkly.Sdk.Server.Integrations.FileData.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Integrations.FileData.html",
    "title": "Class FileData | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class FileData Integration between the LaunchDarkly SDK and file data. Inheritance object FileData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server.Integrations Assembly: LaunchDarkly.ServerSdk.dll Syntax public static class FileData Remarks The file data source allows you to use local files as a source of feature flag state. This would typically be used in a test environment, to operate using a predetermined feature flag state without an actual LaunchDarkly connection. See DataSource() for details. This is different from {@link TestData}, which allows you to simulate flag configurations programmatically rather than using a file. Methods | Edit this page View Source DataSource() Creates a builder for configuring the file data source. Declaration public static FileDataSourceBuilder DataSource() Returns Type Description FileDataSourceBuilder a FileDataSourceBuilder Remarks To use this component, call DataSource() to obtain a factory object, call one or methods to configure it, and then add it to your LaunchDarkly client configuration. At a minimum, you will want to call FilePaths(params string[]) to specify your data file(s); you can also use AutoUpdate(bool) to specify that flags should be reloaded when a file is modified. See FileDataSourceBuilder for all configuration options. var fileSource = FileData.DataSource() .FilePaths(\"./testData/flags.json\") .AutoUpdate(true); var config = Configuration.Builder(\"sdkKey\") .DataSource(fileSource) .Build(); This will cause the client not to connect to LaunchDarkly to get feature flags. The client may still make network connections to send analytics events, unless you have disabled this with configuration.EventProcessor(Components.NullEventProcessor). Flag data files are JSON by default (although it is possible to specify a parser for another format, such as YAML; see Parser(Func<string, object>)). They contain an object with three possible properties: flags: Feature flag definitions. flagVersions: Simplified feature flags that contain only a value. segments: Segment definitions. The format of the data in flags and segments is defined by the LaunchDarkly application and is subject to change. Rather than trying to construct these objects yourself, it is simpler to request existing flags directly from the LaunchDarkly server in JSON format, and use this output as the starting point for your file. In Linux you would do this: curl -H \"Authorization: {your sdk key}\" https://sdk.launchdarkly.com/sdk/latest-all The output will look something like this (but with many more properties): { \"flags\": { \"flag-key-1\": { \"key\": \"flag-key-1\", \"on\": true, \"variations\": [ \"a\", \"b\" ] } }, \"segments\": { \"segment-key-1\": { \"key\": \"segment-key-1\", \"includes\": [ \"user-key-1\" ] } } } Data in this format allows the SDK to exactly duplicate all the kinds of flag behavior supported by LaunchDarkly. However, in many cases you will not need this complexity, but will just want to set specific flag keys to specific values. For that, you can use a much simpler format: { \"flagValues\": { \"my-string-flag-key\": \"value-1\", \"my-boolean-flag-key\": true, \"my-integer-flag-key\": 3 } } It is also possible to specify both flags and flagValues, if you want some flags to have simple values and others to have complex behavior. However, it is an error to use the same flag key or segment key more than once, either in a single file or across multiple files. If the data source encounters any error in any file-- malformed content, a missing file, or a duplicate key-- it will not load flags from any of the files. See Also TestData"
  },
  "api/LaunchDarkly.Sdk.Server.Integrations.FileDataSourceBuilder.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Integrations.FileDataSourceBuilder.html",
    "title": "Class FileDataSourceBuilder | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class FileDataSourceBuilder A builder for configuring the file data source. Inheritance object FileDataSourceBuilder Implements IComponentConfigurer<IDataSource> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server.Integrations Assembly: LaunchDarkly.ServerSdk.dll Syntax public sealed class FileDataSourceBuilder : IComponentConfigurer<IDataSource> Remarks To use the file data source, obtain a new instance of this class with DataSource(); call the builder method {@link #filePaths(String...)} to specify file path(s), and/or {@link #classpathResources(String...)} to specify classpath data resources; then pass the resulting object to DataSource(IComponentConfigurer<IDataSource>). Constructors View Source FileDataSourceBuilder() Declaration public FileDataSourceBuilder() Methods | Edit this page View Source AutoUpdate(bool) Specifies whether the data source should watch for changes to the source file(s) and reload flags whenever there is a change. Declaration public FileDataSourceBuilder AutoUpdate(bool autoUpdate) Parameters Type Name Description bool autoUpdate true if flags should be reloaded whenever a source file changes Returns Type Description FileDataSourceBuilder the same factory object Remarks This option is off by default: unless you set this option to true, files will only be loaded once. Whenever possible, you should update a file's entire contents in one atomic operation; in Unix-like OSes, that can be done by creating a temporary file, writing to it, and then renaming it to replace the original file. In Windows, that is not always possible, so FileDataSource might detect an update before the file has been fully written; in that case it will retry until it succeeds. Note that auto-updating may not work if any of the files you specified has an invalid directory path. | Edit this page View Source Build(LdClientContext) Called internally by the SDK to create an implementation instance. Applications should not need to call this method. Declaration public IDataSource Build(LdClientContext context) Parameters Type Name Description LdClientContext context provides configuration properties and other components from the current SDK client instance Returns Type Description IDataSource a instance of the component type | Edit this page View Source DuplicateKeysHandling(DuplicateKeysHandling) Specifies how to handle keys that are duplicated across files. Declaration public FileDataSourceBuilder DuplicateKeysHandling(FileDataTypes.DuplicateKeysHandling duplicateKeysHandling) Parameters Type Name Description FileDataTypes.DuplicateKeysHandling duplicateKeysHandling how duplicate keys should be handled Returns Type Description FileDataSourceBuilder the same factory object Remarks By default, the file data source will throw if keys are duplicated across files. | Edit this page View Source FilePaths(params string[]) Adds any number of source files for loading flag data, specifying each file path as a string. Declaration public FileDataSourceBuilder FilePaths(params string[] paths) Parameters Type Name Description string[] paths path(s) to the source file(s); may be absolute or relative to the current working directory Returns Type Description FileDataSourceBuilder the same factory object Remarks The files will not actually be loaded until the LaunchDarkly client starts up. Files are normally expected to contain JSON; see Parser(Func<string, object>) for alternatives. | Edit this page View Source FileReader(IFileReader) Specifies an alternate file reader which can support custom OS error handling and retry logic. Declaration public FileDataSourceBuilder FileReader(FileDataTypes.IFileReader fileReader) Parameters Type Name Description FileDataTypes.IFileReader fileReader The flag file reader. Returns Type Description FileDataSourceBuilder the same factory object | Edit this page View Source Parser(Func<string, object>) Specifies an alternate parsing function to use for non-JSON source files. Declaration public FileDataSourceBuilder Parser(Func<string, object> parseFn) Parameters Type Name Description Func<string, object> parseFn the parsing function Returns Type Description FileDataSourceBuilder the same factory object Remarks By default, the file data source attempts to parse files as JSON objects. You may wish to use another format, such as YAML. To avoid bringing in additional dependencies that might conflict with application dependencies, the LaunchDarkly SDK does not import a YAML parser, but you can use Parser to specify a parser of your choice. The function you provide should take a string and return an object which should contain only the basic types that can be represented in JSON: so, for instance, string values should be string, arrays should be List, and objects with key-value pairs should be Dictionary<string, object>. It should throw an exception if it can't parse the data. The file data source will still try to parse files as JSON if their first non-whitespace character is '{', but if that fails, it will use the custom parser. Here is an example of how you would do this with the YamlDotNet package. Note the use of a DeserializerBuilder configuration method to tell the parser that it should interpret a property like on: true or variation: 3 as a boolean or integer rather than a string; YAML syntax is very flexible, so how you configure the parser will depend on how you are formatting the file, but data types do matter in flag configurations so you do not want it to simply read every property as a string. var yaml = new DeserializerBuilder() .WithAttemptingUnquotedStringTypeDeserialization() .Build(); var source = FileData.DataSource() .FilePaths(myYamlFilePath) .Parser(s => yaml.Deserialize<object>(s)); | Edit this page View Source SkipMissingPaths(bool) Specifies to ignore missing file paths instead of treating them as an error. Declaration public FileDataSourceBuilder SkipMissingPaths(bool skipMissingPaths) Parameters Type Name Description bool skipMissingPaths If true, missing file paths will be skipped, otherwise they will be treated as an error Returns Type Description FileDataSourceBuilder the same factory object Implements IComponentConfigurer<T> See Also FileData"
  },
  "api/LaunchDarkly.Sdk.Server.Integrations.FileDataTypes.DuplicateKeysHandling.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Integrations.FileDataTypes.DuplicateKeysHandling.html",
    "title": "Enum FileDataTypes.DuplicateKeysHandling | LaunchDarkly Dotnet Server SDK",
    "keywords": "Enum FileDataTypes.DuplicateKeysHandling Determines how duplicate feature flag or segment keys are handled. Namespace: LaunchDarkly.Sdk.Server.Integrations Assembly: LaunchDarkly.ServerSdk.dll Syntax public enum FileDataTypes.DuplicateKeysHandling Fields Name Description Ignore Keys that are duplicated across files will be ignored, and the first occurrence will be used. Throw An exception will be thrown if keys are duplicated across files."
  },
  "api/LaunchDarkly.Sdk.Server.Integrations.FileDataTypes.IFileReader.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Integrations.FileDataTypes.IFileReader.html",
    "title": "Interface FileDataTypes.IFileReader | LaunchDarkly Dotnet Server SDK",
    "keywords": "Interface FileDataTypes.IFileReader Interface for customizing how data files are read. Namespace: LaunchDarkly.Sdk.Server.Integrations Assembly: LaunchDarkly.ServerSdk.dll Syntax public interface FileDataTypes.IFileReader Methods | Edit this page View Source ReadAllText(string) Opens a text file, reads all lines of the file, and then closes the file. Declaration string ReadAllText(string path) Parameters Type Name Description string path The file to open for reading. Returns Type Description string A string containing all lines of the file. Exceptions Type Condition FileNotFoundException The file specified in path was not found."
  },
  "api/LaunchDarkly.Sdk.Server.Integrations.FileDataTypes.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Integrations.FileDataTypes.html",
    "title": "Class FileDataTypes | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class FileDataTypes Types that are used in configuring FileDataSourceBuilder. Inheritance object FileDataTypes Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server.Integrations Assembly: LaunchDarkly.ServerSdk.dll Syntax public static class FileDataTypes"
  },
  "api/LaunchDarkly.Sdk.Server.Integrations.HookConfigurationBuilder.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Integrations.HookConfigurationBuilder.html",
    "title": "Class HookConfigurationBuilder | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class HookConfigurationBuilder HookConfigurationBuilder is a builder for the SDK's hook configuration. Inheritance object HookConfigurationBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server.Integrations Assembly: LaunchDarkly.ServerSdk.dll Syntax public sealed class HookConfigurationBuilder Constructors | Edit this page View Source HookConfigurationBuilder() Constructs a configuration representing no hooks by default. Declaration public HookConfigurationBuilder() | Edit this page View Source HookConfigurationBuilder(IEnumerable<Hook>) Constructs a configuration from an existing collection of hooks. Declaration public HookConfigurationBuilder(IEnumerable<Hook> hooks) Parameters Type Name Description IEnumerable<Hook> hooks the collection of hooks Methods | Edit this page View Source Add(Hook) Adds a hook to the configuration. Hooks are executed in the order they are added; see Hook. Declaration public HookConfigurationBuilder Add(Hook hook) Parameters Type Name Description Hook hook the hook Returns Type Description HookConfigurationBuilder the builder | Edit this page View Source Build() Builds the configuration. Declaration public HookConfiguration Build() Returns Type Description HookConfiguration the build configuration"
  },
  "api/LaunchDarkly.Sdk.Server.Integrations.HttpConfigurationBuilder.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Integrations.HttpConfigurationBuilder.html",
    "title": "Class HttpConfigurationBuilder | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class HttpConfigurationBuilder Contains methods for configuring the SDK's networking behavior. Inheritance object HttpConfigurationBuilder Implements IComponentConfigurer<HttpConfiguration> IDiagnosticDescription Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server.Integrations Assembly: LaunchDarkly.ServerSdk.dll Syntax public sealed class HttpConfigurationBuilder : IComponentConfigurer<HttpConfiguration>, IDiagnosticDescription Remarks If you want to set non-default values for any of these properties, create a builder with HttpConfiguration(), change its properties with the methods of this class, and pass it to Http(IComponentConfigurer<HttpConfiguration>): var config = Configuration.Builder(sdkKey) .Http( Components.HttpConfiguration() .ConnectTimeout(TimeSpan.FromMilliseconds(3000)) ) .Build(); Constructors View Source HttpConfigurationBuilder() Declaration public HttpConfigurationBuilder() Fields | Edit this page View Source DefaultConnectTimeout The default value for ConnectTimeout(TimeSpan): two seconds. Declaration public static readonly TimeSpan DefaultConnectTimeout Field Value Type Description TimeSpan | Edit this page View Source DefaultReadTimeout The default value for ReadTimeout(TimeSpan): 10 seconds. Declaration public static readonly TimeSpan DefaultReadTimeout Field Value Type Description TimeSpan | Edit this page View Source DefaultResponseStartTimeout The default value for ResponseStartTimeout(TimeSpan): 10 seconds. Declaration public static readonly TimeSpan DefaultResponseStartTimeout Field Value Type Description TimeSpan Methods | Edit this page View Source Build(LdClientContext) Called internally by the SDK to create an implementation instance. Applications should not need to call this method. Declaration public HttpConfiguration Build(LdClientContext context) Parameters Type Name Description LdClientContext context provides configuration properties and other components from the current SDK client instance Returns Type Description HttpConfiguration a instance of the component type | Edit this page View Source ConnectTimeout(TimeSpan) Sets the network connection timeout. Declaration public HttpConfigurationBuilder ConnectTimeout(TimeSpan connectTimeout) Parameters Type Name Description TimeSpan connectTimeout the timeout Returns Type Description HttpConfigurationBuilder the builder Remarks This is the time allowed for the underlying HTTP client to connect to the LaunchDarkly server, for any individual network connection. It is not the same as StartWaitTime(TimeSpan), which limits the time for initializing the SDK regardless of how many individual HTTP requests are done in that time. Not all .NET platforms support setting a connection timeout. It is implemented as a property of System.Net.Http.SocketsHttpHandler in .NET Core 2.1+ and .NET 5+, but is unavailable in .NET Framework and .NET Standard. On platforms where it is not supported, only ResponseStartTimeout(TimeSpan) will be used. Also, since this is implemented only in SocketsHttpHandler, if you have specified some other HTTP handler implementation with HttpMessageHandler, the ConnectTimeout(TimeSpan) here will be ignored. See Also ResponseStartTimeout(TimeSpan) | Edit this page View Source CustomHeader(string, string) Specifies a custom HTTP header that should be added to all SDK requests. Declaration public HttpConfigurationBuilder CustomHeader(string name, string value) Parameters Type Name Description string name the header name string value the header value Returns Type Description HttpConfigurationBuilder the builder Remarks This may be helpful if you are using a gateway or proxy server that requires a specific header in requests. You may add any number of headers. | Edit this page View Source DescribeConfiguration(LdClientContext) Called internally by the SDK to inspect the configuration. Applications do not need to call this method. Declaration public LdValue DescribeConfiguration(LdClientContext context) Parameters Type Name Description LdClientContext context SDK configuration/component information Returns Type Description LdValue a JSON value | Edit this page View Source MessageHandler(HttpMessageHandler) Specifies a custom HTTP message handler implementation. Declaration public HttpConfigurationBuilder MessageHandler(HttpMessageHandler messageHandler) Parameters Type Name Description HttpMessageHandler messageHandler the message handler, or null to use the platform's default handler Returns Type Description HttpConfigurationBuilder the builder Remarks This is mainly useful for testing, to cause the SDK to use custom logic instead of actual HTTP requests, but can also be used to customize HTTP behavior on platforms where .NET's default handler is not optimal. | Edit this page View Source Proxy(IWebProxy) Sets an HTTP proxy for making connections to LaunchDarkly. Declaration public HttpConfigurationBuilder Proxy(IWebProxy proxy) Parameters Type Name Description IWebProxy proxy any implementation of System.Net.IWebProxy Returns Type Description HttpConfigurationBuilder the builder Remarks This is ignored if you have specified a custom message handler with MessageHandler(HttpMessageHandler), since proxy behavior is implemented by the message handler. Note that this is not the same as the LaunchDarkly Relay Proxy, which would be set with RelayProxy(Uri). Examples // Example of using an HTTP proxy with basic authentication var proxyUri = new Uri(\"http://my-proxy-host:8080\"); var proxy = new System.Net.WebProxy(proxyUri); var credentials = new System.Net.CredentialCache(); credentials.Add(proxyUri, \"Basic\", new System.Net.NetworkCredential(\"username\", \"password\")); proxy.Credentials = credentials; var config = Configuration.Builder(\"my-sdk-key\") .Http( Components.HttpConfiguration().Proxy(proxy) ) .Build(); | Edit this page View Source ReadTimeout(TimeSpan) Sets the socket read timeout. Declaration public HttpConfigurationBuilder ReadTimeout(TimeSpan readTimeout) Parameters Type Name Description TimeSpan readTimeout the socket read timeout Returns Type Description HttpConfigurationBuilder the builder Remarks Sets the socket timeout. This is the amount of time without receiving data on a connection that the SDK will tolerate before signaling an error. This does not apply to the streaming connection used by StreamingDataSource(), which has its own non-configurable read timeout based on the expected behavior of the LaunchDarkly streaming service. | Edit this page View Source ResponseStartTimeout(TimeSpan) Sets the maximum amount of time to wait for the beginning of an HTTP response. Declaration public HttpConfigurationBuilder ResponseStartTimeout(TimeSpan responseStartTimeout) Parameters Type Name Description TimeSpan responseStartTimeout the timeout Returns Type Description HttpConfigurationBuilder the builder Remarks This limits how long the SDK will wait from the time it begins trying to make a network connection for an individual HTTP request to the time it starts receiving any data from the server. It is equivalent to the Timeout property in HttpClient. It is not the same as StartWaitTime(TimeSpan), which limits the time for initializing the SDK regardless of how many individual HTTP requests are done in that time. See Also ConnectTimeout(TimeSpan) | Edit this page View Source Wrapper(string, string) For use by wrapper libraries to set an identifying name for the wrapper being used. Declaration public HttpConfigurationBuilder Wrapper(string wrapperName, string wrapperVersion) Parameters Type Name Description string wrapperName an identifying name for the wrapper library string wrapperVersion version string for the wrapper library Returns Type Description HttpConfigurationBuilder the builder Remarks This will be included in a header during requests to the LaunchDarkly servers to allow recording metrics on the usage of these wrapper libraries. Implements IComponentConfigurer<T> IDiagnosticDescription"
  },
  "api/LaunchDarkly.Sdk.Server.Integrations.LoggingConfigurationBuilder.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Integrations.LoggingConfigurationBuilder.html",
    "title": "Class LoggingConfigurationBuilder | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class LoggingConfigurationBuilder Contains methods for configuring the SDK's logging behavior. Inheritance object LoggingConfigurationBuilder Implements IComponentConfigurer<LoggingConfiguration> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server.Integrations Assembly: LaunchDarkly.ServerSdk.dll Syntax public sealed class LoggingConfigurationBuilder : IComponentConfigurer<LoggingConfiguration> Remarks If you want to set non-default values for any of these properties, create a builder with Logging(), change its properties with the methods of this class, and pass it to Logging(IComponentConfigurer<LoggingConfiguration>). By default, the SDK has the following logging behavior: Log messages are written to standard output. To change this, use a log adapter as described in Adapter(ILogAdapter) and Logging(ILogAdapter). The lowest enabled log level is Info, so Debug messages are not shown. To change this, use Level(LogLevel). The base logger name is LaunchDarkly.Sdk. See BaseLoggerName(string) for more about logger names and how to change the name. Examples var config = Configuration.Builder(\"my-sdk-key\") .Logging(Components.Logging().Level(LogLevel.Warn)) .Build(); Constructors | Edit this page View Source LoggingConfigurationBuilder() Creates a new builder with default properties. Declaration public LoggingConfigurationBuilder() Fields | Edit this page View Source DefaultLogDataSourceAsErrorAfter The default value for LogDataSourceOutageAsErrorAfter(TimeSpan?): one minute. Declaration public static readonly TimeSpan DefaultLogDataSourceAsErrorAfter Field Value Type Description TimeSpan Methods | Edit this page View Source Adapter(ILogAdapter) Specifies the implementation of logging to use. Declaration public LoggingConfigurationBuilder Adapter(ILogAdapter adapter) Parameters Type Name Description ILogAdapter adapter an ILogAdapter for the desired logging implementation Returns Type Description LoggingConfigurationBuilder the same builder Remarks The LaunchDarkly.Logging API defines the ILogAdapter interface to specify where log output should be sent. By default, it is set to Logs.ToConsole, meaning that output will be sent to Console.Error. You may use other LaunchDarkly.Logging.Logs methods, or a custom implementation, to handle log output differently. For instance, in .NET Core, specify Logs.CoreLogging to use the standard .NET Core logging framework. For more about logging adapters, see the SDK reference guide, the API documentation for LaunchDarkly.Logging, and the third-party adapters that LaunchDarkly provides (you can also create your own adapter using the LaunchDarkly.Logging API). If you don't need to customize any options other than the adapter, you can call Logging(ILogAdapter) as a shortcut rather than using LoggingConfigurationBuilder. Examples // This example configures the SDK to use the standard .NET Core log framework // (Microsoft.Extensions.Logging). var config = Configuration.Builder(\"my-sdk-key\") .Logging(Components.Logging().Adapter(Logs.CoreLogging(coreLoggingFactory))) .Build(); | Edit this page View Source BaseLoggerName(string) Specifies a custom base logger name. Declaration public LoggingConfigurationBuilder BaseLoggerName(string baseLoggerName) Parameters Type Name Description string baseLoggerName Returns Type Description LoggingConfigurationBuilder Remarks Logger names are used to give context to the log output, indicating that it is from the LaunchDarkly SDK instead of another component, or indicating a more specific area of functionality within the SDK. The default console logging implementation shows the logger name in brackets, for instance: [LaunchDarkly.Sdk.DataSource] INFO: Reconnected to LaunchDarkly stream If you are using an adapter for a third-party logging framework such as NUnit (see Adapter(ILogAdapter)), most frameworks have a mechanism for filtering log output by the logger name. By default, the SDK uses a base logger name of LaunchDarkly.Sdk. Messages will be logged either under this name, or with a suffix to indicate what general area of functionality is involved: .DataSource: problems or status messages regarding how the SDK gets feature flag data from LaunchDarkly. .DataStore: problems or status messages regarding how the SDK stores its feature flag data (for instance, if you are using a database). .Evaluation: problems in evaluating a feature flag or flags, which were caused by invalid flag data or incorrect usage of the SDK rather than for instance a database problem. .Events problems or status messages regarding the SDK's delivery of analytics event data to LaunchDarkly. Setting BaseLoggerName to a non-null value overrides the default. The SDK still adds the same suffixes to the name, so for instance if you set it to \"LD\", the example message above would show [LD.DataSource]. | Edit this page View Source Build(LdClientContext) Called internally by the SDK to create an implementation instance. Applications should not need to call this method. Declaration public LoggingConfiguration Build(LdClientContext context) Parameters Type Name Description LdClientContext context provides configuration properties and other components from the current SDK client instance Returns Type Description LoggingConfiguration a instance of the component type | Edit this page View Source Level(LogLevel) Specifies the lowest level of logging to enable. Declaration public LoggingConfigurationBuilder Level(LogLevel minimumLevel) Parameters Type Name Description LogLevel minimumLevel the lowest level of logging to enable Returns Type Description LoggingConfigurationBuilder the same builder Remarks This adds a log level filter that is applied regardless of what implementation of logging is being used, so that log messages at lower levels are suppressed. For instance, setting the minimum level to Info means that Debug-level output is disabled. External logging frameworks may also have their own mechanisms for setting a minimum log level. If you did not specify an ILogAdapter at all, so it is using the default Console.Error destination, then the default minimum logging level is Info. If you did specify an ILogAdapter, then the SDK does not apply a level filter by default. This is so as not to interfere with any other configuration that you may have set up in an external logging framework. However, you can still use this method to set a higher level so that any messages below that level will not be sent to the external framework at all. | Edit this page View Source LogDataSourceOutageAsErrorAfter(TimeSpan?) Sets the time threshold, if any, after which the SDK will log a data source outage at Error level instead of Warn level. Declaration public LoggingConfigurationBuilder LogDataSourceOutageAsErrorAfter(TimeSpan? interval) Parameters Type Name Description TimeSpan? interval the error logging threshold, or null Returns Type Description LoggingConfigurationBuilder the same builder Remarks A data source outage means that an error condition, such as a network interruption or an error from the LaunchDarkly service, is preventing the SDK from receiving feature flag updates. Many outages are brief and the SDK can recover from them quickly; in that case it may be undesirable to log an Error line, which might trigger an unwanted automated alert depending on your monitoring tools. So, by default, the SDK logs such errors at Warn level. However, if the amount of time specified by this method elapses before the data source starts working again, the SDK will log an additional message at Error level to indicate that this is a sustained problem. The default is DefaultLogDataSourceAsErrorAfter. Setting it to null will disable this feature, so you will only get Warn messages. Implements IComponentConfigurer<T>"
  },
  "api/LaunchDarkly.Sdk.Server.Integrations.PersistentDataStoreBuilder.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Integrations.PersistentDataStoreBuilder.html",
    "title": "Class PersistentDataStoreBuilder | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class PersistentDataStoreBuilder A configurable data store factory that adds caching behavior to a persistent data store implementation. Inheritance object PersistentDataStoreBuilder Implements IComponentConfigurer<IDataStore> IDiagnosticDescription Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server.Integrations Assembly: LaunchDarkly.ServerSdk.dll Syntax public class PersistentDataStoreBuilder : IComponentConfigurer<IDataStore>, IDiagnosticDescription Remarks For a persistent data store (e.g. a database integration), the store implementation will provide an IComponentConfigurer<T> for IPersistentDataStore or IPersistentDataStoreAsync that implements the specific data store behavior. The SDK then provides additional options for caching; those are defined by this type, which is returned by PersistentDataStore(IComponentConfigurer<IPersistentDataStore>) or PersistentDataStore(IComponentConfigurer<IPersistentDataStoreAsync>). Example usage: var myStore = Components.PersistentDataStore(Redis.FeatureStore()) .CacheTtl(TimeSpan.FromSeconds(45)); var config = Configuration.Builder(sdkKey) .DataStore(myStore) .Build(); Fields | Edit this page View Source DefaultTtl The default cache expiration time. Declaration public static readonly TimeSpan DefaultTtl Field Value Type Description TimeSpan Methods | Edit this page View Source Build(LdClientContext) Called internally by the SDK to create an implementation instance. Applications should not need to call this method. Declaration public IDataStore Build(LdClientContext context) Parameters Type Name Description LdClientContext context provides configuration properties and other components from the current SDK client instance Returns Type Description IDataStore a instance of the component type | Edit this page View Source CacheForever() Specifies that the in-memory cache should never expire. Declaration public PersistentDataStoreBuilder CacheForever() Returns Type Description PersistentDataStoreBuilder the builder Remarks In this mode, data will be written to both the underlying persistent store and the cache, but will only ever be read from the persistent store if the SDK is restarted. Use this mode with caution: it means that in a scenario where multiple processes are sharing the database, and the current process loses connectivity to LaunchDarkly while other processes are still receiving updates and writing them to the database, the current process will have stale data. | Edit this page View Source CacheMaximumEntries(int?) Specifies the maximum number of entries that can be held in the cache at a time. Declaration public PersistentDataStoreBuilder CacheMaximumEntries(int? maximumEntries) Parameters Type Name Description int? maximumEntries the maximum number of entries, or null for no limit Returns Type Description PersistentDataStoreBuilder an updated factory object Remarks If this limit is exceeded, older entries will be evicted from the cache to make room for new ones. If this is null, there is no limit on the number of entries. | Edit this page View Source CacheMillis(int) Shortcut for calling CacheTime(TimeSpan) with a time span in milliseconds. Declaration public PersistentDataStoreBuilder CacheMillis(int millis) Parameters Type Name Description int millis the cache TTL in milliseconds Returns Type Description PersistentDataStoreBuilder the builder | Edit this page View Source CacheSeconds(int) Shortcut for calling CacheTime(TimeSpan) with a time span in seconds. Declaration public PersistentDataStoreBuilder CacheSeconds(int seconds) Parameters Type Name Description int seconds the cache TTL in seconds Returns Type Description PersistentDataStoreBuilder the builder | Edit this page View Source CacheTime(TimeSpan) Specifies the cache TTL. Items will expire from the cache after this amount of time from the time when they were originally cached. Declaration public PersistentDataStoreBuilder CacheTime(TimeSpan cacheTime) Parameters Type Name Description TimeSpan cacheTime the cache TTL Returns Type Description PersistentDataStoreBuilder the builder Remarks If the value is TimeSpan.Zero, caching is disabled (equivalent to NoCaching()). If the value is System.Threading.Timeout.InfiniteTimeSpan (or any negative number), data is cached forever (equivalent to CacheForever()). | Edit this page View Source DescribeConfiguration(LdClientContext) Called internally by the SDK to inspect the configuration. Applications do not need to call this method. Declaration public LdValue DescribeConfiguration(LdClientContext context) Parameters Type Name Description LdClientContext context SDK configuration/component information Returns Type Description LdValue a JSON value | Edit this page View Source NoCaching() Specifies that the SDK should not use an in-memory cache for the persistent data store. Declaration public PersistentDataStoreBuilder NoCaching() Returns Type Description PersistentDataStoreBuilder the builder Remarks This means that every feature flag evaluation will trigger a data store query. Implements IComponentConfigurer<T> IDiagnosticDescription"
  },
  "api/LaunchDarkly.Sdk.Server.Integrations.PollingDataSourceBuilder.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Integrations.PollingDataSourceBuilder.html",
    "title": "Class PollingDataSourceBuilder | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class PollingDataSourceBuilder Contains methods for configuring the polling data source. Inheritance object PollingDataSourceBuilder Implements IComponentConfigurer<IDataSource> IDiagnosticDescription Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server.Integrations Assembly: LaunchDarkly.ServerSdk.dll Syntax public sealed class PollingDataSourceBuilder : IComponentConfigurer<IDataSource>, IDiagnosticDescription Remarks Polling is not the default behavior; by default, the SDK uses a streaming connection to receive feature flag data from LaunchDarkly. In polling mode, the SDK instead makes a new HTTP request to LaunchDarkly at regular intervals. HTTP caching allows it to avoid redundantly downloading data if there have been no changes, but polling is still less efficient than streaming and should only be used on the advice of LaunchDarkly support. To use polling mode, create a builder with PollingDataSource(), change its properties with the methods of this class, and pass it to DataSource(IComponentConfigurer<IDataSource>). Setting Offline(bool) to true will supersede this setting and completely disable network requests. Examples var config = Configuration.Builder(sdkKey) .DataSource(Components.PollingDataSource() .PollInterval(TimeSpan.FromSeconds(45))) .Build(); Constructors View Source PollingDataSourceBuilder() Declaration public PollingDataSourceBuilder() Fields | Edit this page View Source DefaultPollInterval The default value for PollInterval(TimeSpan): 30 seconds. Declaration public static readonly TimeSpan DefaultPollInterval Field Value Type Description TimeSpan Methods | Edit this page View Source Build(LdClientContext) Called internally by the SDK to create an implementation instance. Applications should not need to call this method. Declaration public IDataSource Build(LdClientContext context) Parameters Type Name Description LdClientContext context provides configuration properties and other components from the current SDK client instance Returns Type Description IDataSource a instance of the component type | Edit this page View Source DescribeConfiguration(LdClientContext) Called internally by the SDK to inspect the configuration. Applications do not need to call this method. Declaration public LdValue DescribeConfiguration(LdClientContext context) Parameters Type Name Description LdClientContext context SDK configuration/component information Returns Type Description LdValue a JSON value | Edit this page View Source PollInterval(TimeSpan) Sets the interval at which the SDK will poll for feature flag updates. Declaration public PollingDataSourceBuilder PollInterval(TimeSpan pollInterval) Parameters Type Name Description TimeSpan pollInterval the polling interval Returns Type Description PollingDataSourceBuilder the builder Remarks The default and minimum value is DefaultPollInterval. Values less than this will be set to the default. Implements IComponentConfigurer<T> IDiagnosticDescription"
  },
  "api/LaunchDarkly.Sdk.Server.Integrations.ServiceEndpointsBuilder.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Integrations.ServiceEndpointsBuilder.html",
    "title": "Class ServiceEndpointsBuilder | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class ServiceEndpointsBuilder Contains methods for configuring the SDK's service URIs. Inheritance object ServiceEndpointsBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server.Integrations Assembly: LaunchDarkly.ServerSdk.dll Syntax public class ServiceEndpointsBuilder Remarks If you want to set non-default values for any of these properties, create a builder with ServiceEndpoints(), change its properties with the methods of this class, and pass it to ServiceEndpoints(ServiceEndpointsBuilder). The default behavior, if you do not change any of these properties, is that the SDK will connect to the standard endpoints in the LaunchDarkly production service. There are several use cases for changing these properties: You are using the LaunchDarkly Relay Proxy. In this case, set RelayProxy(Uri) to the base URI of the Relay Proxy instance. Note that this is not the same as a regular HTTP proxy, which would be set with Proxy(IWebProxy). You are connecting to a private instance of LaunchDarkly, rather than the standard production services. In this case, there will be custom base URIs for each service, so you must set Streaming(Uri), Polling(Uri), and Events(Uri). You are connecting to a test fixture that simulates the service endpoints. In this case, you may set the base URIs to whatever you want, although the SDK will still set the URI paths to the expected paths for LaunchDarkly services. Each of the setter methods can be called with either a Uri or an equivalent string. Passing a string that is not a valid URI will cause an immediate UriFormatException If you are using a private instance and you set some of the base URIs, but not all of them, the SDK will log an error and may not work properly. The only exception is if you have explicitly disabled the SDK's use of one of the services: for instance, if you have disabled analytics events with NoEvents, you do not have to set Events(Uri). Examples // Example of specifying a Relay Proxy instance var config = Configuration.Builder(sdkKey) .ServiceEndpoints(Components.ServiceEndpoints() .RelayProxy(\"http://my-relay-hostname:8080\")) .Build(); // Example of specifying a private LaunchDarkly instance var config = Configuration.Builder(sdkKey) .ServiceEndpoints(Components.ServiceEndpoints() .Streaming(\"https://stream.mycompany.launchdarkly.com\") .Polling(\"https://app.mycompany.launchdarkly.com\") .Events(\"https://events.mycompany.launchdarkly.com\")) .Build(); Methods | Edit this page View Source Build() Called internally by the SDK to create a configuration instance. Applications do not need to call this method. Declaration public ServiceEndpoints Build() Returns Type Description ServiceEndpoints the configuration object | Edit this page View Source Events(string) Equivalent to Events(Uri), specifying the URI as a string. Declaration public ServiceEndpointsBuilder Events(string eventsBaseUri) Parameters Type Name Description string eventsBaseUri the base URI of the events service, or null to reset to the default Returns Type Description ServiceEndpointsBuilder the same builder Exceptions Type Condition UriFormatException if the string is not null and is not a valid URI See Also Events(Uri) | Edit this page View Source Events(Uri) Sets a custom base URI for the events service. Declaration public ServiceEndpointsBuilder Events(Uri eventsBaseUri) Parameters Type Name Description Uri eventsBaseUri the base URI of the events service; null to use the default Returns Type Description ServiceEndpointsBuilder the builder Remarks You should only call this method if you are using a private instance or a test fixture (see ServiceEndpointsBuilder). If you are using the LaunchDarkly Relay Proxy, call RelayProxy(Uri) instead. Examples var config = Configuration.Builder(sdkKey) .ServiceEndpoints(Components.ServiceEndpoints() .Streaming(\"https://stream.mycompany.launchdarkly.com\") .Polling(\"https://app.mycompany.launchdarkly.com\") .Events(\"https://events.mycompany.launchdarkly.com\")) .Build(); See Also Events(string) | Edit this page View Source Polling(string) Equivalent to Polling(Uri), specifying the URI as a string. Declaration public ServiceEndpointsBuilder Polling(string pollingBaseUri) Parameters Type Name Description string pollingBaseUri the base URI of the polling service, or null to reset to the default Returns Type Description ServiceEndpointsBuilder the same builder Exceptions Type Condition UriFormatException if the string is not null and is not a valid URI See Also Polling(Uri) | Edit this page View Source Polling(Uri) Sets a custom base URI for the polling service. Declaration public ServiceEndpointsBuilder Polling(Uri pollingBaseUri) Parameters Type Name Description Uri pollingBaseUri the base URI of the polling service; null to use the default Returns Type Description ServiceEndpointsBuilder the builder Remarks You should only call this method if you are using a private instance or a test fixture (see ServiceEndpointsBuilder). If you are using the LaunchDarkly Relay Proxy, call RelayProxy(Uri) instead. Examples var config = Configuration.Builder(sdkKey) .ServiceEndpoints(Components.ServiceEndpoints() .Streaming(\"https://stream.mycompany.launchdarkly.com\") .Polling(\"https://app.mycompany.launchdarkly.com\") .Events(\"https://events.mycompany.launchdarkly.com\")) .Build(); See Also Polling(string) | Edit this page View Source RelayProxy(string) Equivalent to RelayProxy(Uri), specifying the URI as a string. Declaration public ServiceEndpointsBuilder RelayProxy(string relayProxyBaseUri) Parameters Type Name Description string relayProxyBaseUri the Relay Proxy base URI, or null to reset to default endpoints Returns Type Description ServiceEndpointsBuilder the same builder Exceptions Type Condition UriFormatException if the string is not null and is not a valid URI See Also RelayProxy(Uri) | Edit this page View Source RelayProxy(Uri) Specifies a single base URI for a Relay Proxy instance. Declaration public ServiceEndpointsBuilder RelayProxy(Uri relayProxyBaseUri) Parameters Type Name Description Uri relayProxyBaseUri the Relay Proxy base URI, or null to reset to default endpoints Returns Type Description ServiceEndpointsBuilder the builder Remarks When using the LaunchDarkly Relay Proxy, the SDK only needs to know the single base URI of the Relay Proxy, which will provide all of the proxied service endpoints. Note that this is not the same as a regular HTTP proxy, which would be set with Proxy(IWebProxy). Examples var relayUri = new Uri(\"http://my-relay-hostname:8080\"); var config = Configuration.Builder(sdkKey) .ServiceEndpoints(Components.ServiceEndpoints().RelayProxy(relayUri)) .Build(); See Also RelayProxy(string) | Edit this page View Source Streaming(string) Equivalent to Streaming(Uri), specifying the URI as a string. Declaration public ServiceEndpointsBuilder Streaming(string streamingBaseUri) Parameters Type Name Description string streamingBaseUri the base URI of the streaming service, or null to reset to the default Returns Type Description ServiceEndpointsBuilder the same builder Exceptions Type Condition UriFormatException if the string is not null and is not a valid URI See Also Streaming(Uri) | Edit this page View Source Streaming(Uri) Sets a custom base URI for the streaming service. Declaration public ServiceEndpointsBuilder Streaming(Uri streamingBaseUri) Parameters Type Name Description Uri streamingBaseUri the base URI of the streaming service; null to use the default Returns Type Description ServiceEndpointsBuilder the builder Remarks You should only call this method if you are using a private instance or a test fixture (see ServiceEndpointsBuilder). If you are using the LaunchDarkly Relay Proxy, call RelayProxy(Uri) instead. Examples var config = Configuration.Builder(sdkKey) .ServiceEndpoints(Components.ServiceEndpoints() .Streaming(\"https://stream.mycompany.launchdarkly.com\") .Polling(\"https://app.mycompany.launchdarkly.com\") .Events(\"https://events.mycompany.launchdarkly.com\")) .Build(); See Also Streaming(string)"
  },
  "api/LaunchDarkly.Sdk.Server.Integrations.StreamingDataSourceBuilder.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Integrations.StreamingDataSourceBuilder.html",
    "title": "Class StreamingDataSourceBuilder | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class StreamingDataSourceBuilder Contains methods for configuring the streaming data source. Inheritance object StreamingDataSourceBuilder Implements IComponentConfigurer<IDataSource> IDiagnosticDescription Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server.Integrations Assembly: LaunchDarkly.ServerSdk.dll Syntax public sealed class StreamingDataSourceBuilder : IComponentConfigurer<IDataSource>, IDiagnosticDescription Remarks By default, the SDK uses a streaming connection to receive feature flag data from LaunchDarkly. If you want to customize the behavior of the connection, create a builder with StreamingDataSource(), change its properties with the methods of this class, and pass it to DataSource(IComponentConfigurer<IDataSource>). Setting Offline(bool) to true will supersede this setting and completely disable network requests. Examples var config = Configuration.Builder(sdkKey) .DataSource(Components.PollingDataSource() .PollInterval(TimeSpan.FromSeconds(45))) .Build(); Constructors View Source StreamingDataSourceBuilder() Declaration public StreamingDataSourceBuilder() Fields | Edit this page View Source DefaultInitialReconnectDelay The default value for InitialReconnectDelay(TimeSpan): 1000 milliseconds. Declaration public static readonly TimeSpan DefaultInitialReconnectDelay Field Value Type Description TimeSpan Methods | Edit this page View Source Build(LdClientContext) Called internally by the SDK to create an implementation instance. Applications should not need to call this method. Declaration public IDataSource Build(LdClientContext context) Parameters Type Name Description LdClientContext context provides configuration properties and other components from the current SDK client instance Returns Type Description IDataSource a instance of the component type | Edit this page View Source DescribeConfiguration(LdClientContext) Called internally by the SDK to inspect the configuration. Applications do not need to call this method. Declaration public LdValue DescribeConfiguration(LdClientContext context) Parameters Type Name Description LdClientContext context SDK configuration/component information Returns Type Description LdValue a JSON value | Edit this page View Source InitialReconnectDelay(TimeSpan) Sets the initial reconnect delay for the streaming connection. Declaration public StreamingDataSourceBuilder InitialReconnectDelay(TimeSpan initialReconnectDelay) Parameters Type Name Description TimeSpan initialReconnectDelay the reconnect time base value Returns Type Description StreamingDataSourceBuilder the builder Remarks The streaming service uses a backoff algorithm (with jitter) every time the connection needs to be reestablished.The delay for the first reconnection will start near this value, and then increase exponentially for any subsequent connection failures. The default value is DefaultInitialReconnectDelay. Implements IComponentConfigurer<T> IDiagnosticDescription"
  },
  "api/LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Integrations.TestData.FlagBuilder.html",
    "title": "Class TestData.FlagBuilder | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class TestData.FlagBuilder A builder for feature flag configurations to be used with TestData. Inheritance object TestData.FlagBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server.Integrations Assembly: LaunchDarkly.ServerSdk.dll Syntax public sealed class TestData.FlagBuilder Methods | Edit this page View Source BooleanFlag() A shortcut for setting the flag to use the standard boolean configuration. Declaration public TestData.FlagBuilder BooleanFlag() Returns Type Description TestData.FlagBuilder the builder Remarks This is the default for all new flags created with Flag(string). The flag will have two variations, true and false (in that order); it will return false whenever targeting is off, and true when targeting is on if no other settings specify otherwise. | Edit this page View Source ClearRules() Removes any existing rules from the flag. Declaration public TestData.FlagBuilder ClearRules() Returns Type Description TestData.FlagBuilder the builder Remarks This undoes the effect of methods like IfMatch(string, params LdValue[]). | Edit this page View Source ClearTargets() Removes any existing user/context targets from the flag. Declaration public TestData.FlagBuilder ClearTargets() Returns Type Description TestData.FlagBuilder the builder Remarks This undoes the effect of methods like VariationForUser(string, bool). | Edit this page View Source ExcludeFromSummaries(bool) Sets if the flag should be excluded from summary events. Declaration public TestData.FlagBuilder ExcludeFromSummaries(bool excludeFromSummaries) Parameters Type Name Description bool excludeFromSummaries true to exclude the flag from summaries Returns Type Description TestData.FlagBuilder the builder | Edit this page View Source FallthroughVariation(bool) Specifies the fallthrough variation for a boolean flag. Declaration public TestData.FlagBuilder FallthroughVariation(bool variation) Parameters Type Name Description bool variation true if the flag should return true by default when targeting is on Returns Type Description TestData.FlagBuilder the builder Remarks The fallthrough is the value that is returned if targeting is on and the context was not matched by a more specific target or rule. If the flag was previously configured with other variations, this also changes it to a boolean flag. | Edit this page View Source FallthroughVariation(int) Specifies the index of the fallthrough variation. Declaration public TestData.FlagBuilder FallthroughVariation(int variationIndex) Parameters Type Name Description int variationIndex the desired fallthrough variation: 0 for the first, 1 for the second, etc. Returns Type Description TestData.FlagBuilder the builder Remarks The fallthrough is the value that is returned if targeting is on and the context was not matched by a more specific target or rule. | Edit this page View Source IfMatch(string, params LdValue[]) Starts defining a flag rule, using the \"is one of\" operator. This is a shortcut for calling IfMatchContext(ContextKind, string, params LdValue[]) with \"user\" as the context kind. Declaration public TestData.FlagRuleBuilder IfMatch(string attribute, params LdValue[] values) Parameters Type Name Description string attribute the user attribute to match against LdValue[] values values to compare to Returns Type Description TestData.FlagRuleBuilder a TestData.FlagRuleBuilder; call ThenReturn(bool) or ThenReturn(int) to finish the rule, or add more tests with another method like AndMatch(string, params LdValue[]) Remarks For example, this creates a rule that returns true if the name is \"Patsy\" or \"Edina\": testData.Update(testData.Flag(\"flag-key\") .IfMatch(\"name\", LdValue.Of(\"Patsy\"), LdValue.Of(\"Edina\")) .ThenReturn(true)); | Edit this page View Source IfMatchContext(ContextKind, string, params LdValue[]) Starts defining a flag rule, using the \"is one of\" operator. This matching expression only applies to contexts of a specific kind. Declaration public TestData.FlagRuleBuilder IfMatchContext(ContextKind contextKind, string attribute, params LdValue[] values) Parameters Type Name Description ContextKind contextKind the context kind to match string attribute the attribute to match against LdValue[] values values to compare to Returns Type Description TestData.FlagRuleBuilder a TestData.FlagRuleBuilder; call ThenReturn(bool) or ThenReturn(int) to finish the rule, or add more tests with another method like AndMatchContext(ContextKind, string, params LdValue[]) Remarks For example, this creates a rule that returns true if the name attribute for the \"company\" context is \"Ella\" or \"Monsoon\": testData.Update(testData.Flag(\"flag-key\") .IfMatchContext(\"company\", \"name\", LdValue.Of(\"Ella\"), LdValue.Of(\"Monsoon\")) .ThenReturn(true)); | Edit this page View Source IfNotMatch(string, params LdValue[]) Starts defining a flag rule, using the \"is not one of\" operator. This is a shortcut for calling IfNotMatchContext(ContextKind, string, params LdValue[]) with \"user\" as the context kind. Declaration public TestData.FlagRuleBuilder IfNotMatch(string attribute, params LdValue[] values) Parameters Type Name Description string attribute the user attribute to match against LdValue[] values values to compare to Returns Type Description TestData.FlagRuleBuilder a TestData.FlagRuleBuilder; call ThenReturn(bool) or ThenReturn(int) to finish the rule, or add more tests with another method like AndMatch(string, params LdValue[]) Remarks For example, this creates a rule that returns true if the name is neither \"Saffron\" nor \"Bubble\": testData.Update(testData.Flag(\"flag-key\") .IfNotMatch(\"name\", LdValue.Of(\"Saffron\"), LdValue.Of(\"Bubble\")) .ThenReturn(true)); | Edit this page View Source IfNotMatchContext(ContextKind, string, params LdValue[]) Starts defining a flag rule, using the \"is not one of\" operator. This matching expression only applies to contexts of a specific kind. Declaration public TestData.FlagRuleBuilder IfNotMatchContext(ContextKind contextKind, string attribute, params LdValue[] values) Parameters Type Name Description ContextKind contextKind the context kind to match string attribute the attribute to match against LdValue[] values values to compare to Returns Type Description TestData.FlagRuleBuilder a TestData.FlagRuleBuilder; call ThenReturn(bool) or ThenReturn(int) to finish the rule, or add more tests with another method like AndMatchContext(ContextKind, string, params LdValue[]) Remarks For example, this creates a rule that returns true if the name attribute for the \"company\" context is neither \"Pendant\" nor \"Sterling Cooper\": testData.Update(testData.Flag(\"flag-key\") .IfNotMatchContext(\"company\", \"name\", LdValue.Of(\"Pendant\"), LdValue.Of(\"Sterling Cooper\")) .ThenReturn(true)); | Edit this page View Source Migration(FlagMigrationBuilder) Used to configure migration settings for the flag. Declaration public TestData.FlagBuilder Migration(TestData.FlagMigrationBuilder migrationBuilder) Parameters Type Name Description TestData.FlagMigrationBuilder migrationBuilder Returns Type Description TestData.FlagBuilder the builder | Edit this page View Source OffVariation(bool) Specifies the off variation for a boolean flag. Declaration public TestData.FlagBuilder OffVariation(bool variation) Parameters Type Name Description bool variation true if the flag should return true when targeting is off Returns Type Description TestData.FlagBuilder the builder Remarks This is the variation that is returned whenever targeting is off. | Edit this page View Source OffVariation(int) Specifies the index of the off variation. Declaration public TestData.FlagBuilder OffVariation(int variationIndex) Parameters Type Name Description int variationIndex the desired off variation: 0 for the first, 1 for the second, etc. Returns Type Description TestData.FlagBuilder the builder Remarks This is the variation that is returned whenever targeting is off. | Edit this page View Source On(bool) Sets targeting to be on or off for this flag. Declaration public TestData.FlagBuilder On(bool on) Parameters Type Name Description bool on true if targeting should be on Returns Type Description TestData.FlagBuilder the builder Remarks The effect of this depends on the rest of the flag configuration, just as it does on the real LaunchDarkly dashboard. In the default configuration that you get from calling Flag(string) with a new flag key, the flag will return false whenever targeting is off, and true when targeting is on. | Edit this page View Source SamplingRatio(long) Sets the sampling ratio for the flag. Declaration public TestData.FlagBuilder SamplingRatio(long samplingRatio) Parameters Type Name Description long samplingRatio the new sampling ratio Returns Type Description TestData.FlagBuilder the builder | Edit this page View Source ValueForAll(LdValue) Sets the flag to always return the specified variation value for all contexts. Declaration public TestData.FlagBuilder ValueForAll(LdValue value) Parameters Type Name Description LdValue value the desired value to be returned Returns Type Description TestData.FlagBuilder the builder Remarks The value may be of any JSON type, as defined by LdValue. This method changes the flag to have only a single variation, which is this value, and to return the same variation regardless of whether targeting is on or off. Any existing targets or rules are removed. See Also VariationForAll(bool) VariationForAll(int) | Edit this page View Source VariationForAll(bool) Sets the flag to always return the specified boolean variation for all contexts. Declaration public TestData.FlagBuilder VariationForAll(bool variation) Parameters Type Name Description bool variation the desired true/false variation to be returned Returns Type Description TestData.FlagBuilder the builder Remarks Targeting is switched on, any existing targets or rules are removed, and the flag's variations are set to true and false. The fallthrough variation is set to the specified value. The off variation is left unchanged. See Also VariationForAll(int) ValueForAll(LdValue) | Edit this page View Source VariationForAll(int) Sets the flag to always return the specified variation for all contexts. Declaration public TestData.FlagBuilder VariationForAll(int variationIndex) Parameters Type Name Description int variationIndex the desired variation: 0 for the first, 1 for the second, etc. Returns Type Description TestData.FlagBuilder the builder Remarks The variation is specified by number, out of whatever variation values have already been defined. Targeting is switched on, and any existing targets or rules are removed. The fallthrough variation is set to the specified value. The off variation is left unchanged. See Also VariationForAll(bool) ValueForAll(LdValue) | Edit this page View Source VariationForKey(ContextKind, string, bool) Sets the flag to return the specified boolean variation for a specific context, identified by context kind and key, when targeting is on. Declaration public TestData.FlagBuilder VariationForKey(ContextKind contextKind, string key, bool variation) Parameters Type Name Description ContextKind contextKind the context kind string key the context key bool variation the desired true/false variation to be returned for this context when targeting is on Returns Type Description TestData.FlagBuilder the builder Remarks This does not affect the flag's off variation that is used when targeting is off. If the flag was not already a boolean flag, this also changes it to a boolean flag. See Also VariationForKey(ContextKind, string, int) VariationForUser(string, int) | Edit this page View Source VariationForKey(ContextKind, string, int) Sets the flag to return the specified variation for a specific context, identified by context kind and key, when targeting is on. Declaration public TestData.FlagBuilder VariationForKey(ContextKind contextKind, string key, int variationIndex) Parameters Type Name Description ContextKind contextKind the context kind string key the context key int variationIndex the desired variation to be returned for this context when targeting is on: 0 for the first, 1 for the second, etc. Returns Type Description TestData.FlagBuilder the builder Remarks This has no effect when targeting is turned off for the flag. The variation is specified by number, out of whatever variation values have already been defined. See Also VariationForKey(ContextKind, string, bool) VariationForUser(string, int) | Edit this page View Source VariationForUser(string, bool) Sets the flag to return the specified boolean variation for a specific user key (that is, for a context with that key whose context kind is \"user\") when targeting is on. Declaration public TestData.FlagBuilder VariationForUser(string userKey, bool variation) Parameters Type Name Description string userKey a user key bool variation the desired true/false variation to be returned for this user when targeting is on Returns Type Description TestData.FlagBuilder the builder Remarks This does not affect the flag's off variation that is used when targeting is off. If the flag was not already a boolean flag, this also changes it to a boolean flag. See Also VariationForUser(string, int) | Edit this page View Source VariationForUser(string, int) Sets the flag to return the specified variation for a specific user key (that is, for a context with that key whose context kind is \"user\") when targeting is on. Declaration public TestData.FlagBuilder VariationForUser(string userKey, int variationIndex) Parameters Type Name Description string userKey a user key int variationIndex the desired variation to be returned for this user when targeting is on: 0 for the first, 1 for the second, etc. Returns Type Description TestData.FlagBuilder the builder Remarks This has no effect when targeting is turned off for the flag. The variation is specified by number, out of whatever variation values have already been defined. See Also VariationForUser(string, bool) | Edit this page View Source Variations(params LdValue[]) Changes the allowable variation values for the flag. Declaration public TestData.FlagBuilder Variations(params LdValue[] values) Parameters Type Name Description LdValue[] values the desired variations Returns Type Description TestData.FlagBuilder the builder Remarks The value may be of any JSON type, as defined by LdValue. For instance, a boolean flag normally has LdValue.Of(true), LdValue.Of(false); a string-valued flag might have LdValue.Of(\"red\"), LdValue.Of(\"green\"); etc. See Also Flag(string) Update(FlagBuilder)"
  },
  "api/LaunchDarkly.Sdk.Server.Integrations.TestData.FlagMigrationBuilder.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Integrations.TestData.FlagMigrationBuilder.html",
    "title": "Class TestData.FlagMigrationBuilder | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class TestData.FlagMigrationBuilder Used to build the migration settings for a feature flag. Inheritance object TestData.FlagMigrationBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server.Integrations Assembly: LaunchDarkly.ServerSdk.dll Syntax public sealed class TestData.FlagMigrationBuilder Constructors View Source FlagMigrationBuilder() Declaration public FlagMigrationBuilder() Methods | Edit this page View Source CheckRatio(long?) Set the check ratio for the migration. Declaration public TestData.FlagMigrationBuilder CheckRatio(long? checkRatio) Parameters Type Name Description long? checkRatio the desired check ratio Returns Type Description TestData.FlagMigrationBuilder the builder Remarks The check ratio is used in determining when to check the consistency of a migration."
  },
  "api/LaunchDarkly.Sdk.Server.Integrations.TestData.FlagRuleBuilder.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Integrations.TestData.FlagRuleBuilder.html",
    "title": "Class TestData.FlagRuleBuilder | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class TestData.FlagRuleBuilder A builder for feature flag rules to be used with TestData.FlagBuilder. Inheritance object TestData.FlagRuleBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server.Integrations Assembly: LaunchDarkly.ServerSdk.dll Syntax public sealed class TestData.FlagRuleBuilder Remarks In the LaunchDarkly model, a flag can have any number of rules, and a rule can have any number of clauses. A clause is an individual test such as \"name is 'X'\". A rule matches a context if all of the rule's clauses match the context. To start defining a rule, use one of the flag builder's matching methods such as IfMatchContext(ContextKind, string, params LdValue[]). This defines the first clause for the rule. Optionally, you may add more clauses with the rule builder's methods such as AndMatchContext(ContextKind, string, params LdValue[]). Finally, call ThenReturn(bool) or ThenReturn(int) to finish defining the rule. Methods | Edit this page View Source AndMatch(string, params LdValue[]) Adds another clause, using the \"is one of\" operator. This is a shortcut for calling AndMatchContext(ContextKind, string, params LdValue[]) with \"user\" as the context kind. Declaration public TestData.FlagRuleBuilder AndMatch(string attribute, params LdValue[] values) Parameters Type Name Description string attribute the user attribute to match against LdValue[] values values to compare to Returns Type Description TestData.FlagRuleBuilder the rule builder Remarks For example, this creates a rule that returns true if the name is \"Patsy\" and the country is \"gb\": testData.Update(testData.Flag(\"flag-key\") .IfMatch(\"name\", LdValue.Of(\"Patsy\")) .AndMatch(\"country\", LdValue.Of(\"gb\")) .ThenReturn(true)); | Edit this page View Source AndMatchContext(ContextKind, string, params LdValue[]) Adds another clause, using the \"is one of\" operator. This matching expression only applies to contexts of a specific kind. Declaration public TestData.FlagRuleBuilder AndMatchContext(ContextKind contextKind, string attribute, params LdValue[] values) Parameters Type Name Description ContextKind contextKind the context kind to match string attribute the attribute to match against LdValue[] values values to compare to Returns Type Description TestData.FlagRuleBuilder the rule builder Remarks For example, this creates a rule that returns true if the name attribute for the \"company\" context is \"Ella\" and the country is \"gb\": testData.Update(testData.Flag(\"flag-key\") .IfMatchContext(\"company\", \"name\", LdValue.Of(\"Ella\")) .AndMatchContext(\"company\", \"country\", LdValue.Of(\"gb\")) .ThenReturn(true)); | Edit this page View Source AndNotMatch(string, params LdValue[]) Adds another clause, using the \"is not one of\" operator. This is a shortcut for calling AndNotMatchContext(ContextKind, string, params LdValue[]) with \"user\" as the context kind. Declaration public TestData.FlagRuleBuilder AndNotMatch(string attribute, params LdValue[] values) Parameters Type Name Description string attribute the user attribute to match against LdValue[] values values to compare to Returns Type Description TestData.FlagRuleBuilder the rule builder Remarks For example, this creates a rule that returns true if the name is \"Patsy\" and the country is not \"gb\": testData.Update(testData.Flag(\"flag-key\") .IfMatch(\"name\", LdValue.Of(\"Patsy\")) .AndNotMatch(\"country\", LdValue.Of(\"gb\")) .ThenReturn(true)); | Edit this page View Source AndNotMatchContext(ContextKind, string, params LdValue[]) Adds another clause, using the \"is not one of\" operator. This matching expression only applies to contexts of a specific kind. Declaration public TestData.FlagRuleBuilder AndNotMatchContext(ContextKind contextKind, string attribute, params LdValue[] values) Parameters Type Name Description ContextKind contextKind the context kind to match string attribute the attribute to match against LdValue[] values values to compare to Returns Type Description TestData.FlagRuleBuilder the rule builder Remarks For example, this creates a rule that returns true if the name attribute for the \"company\" context is \"Ella\" and the country is not \"gb\": testData.Update(testData.Flag(\"flag-key\") .IfMatchContext(\"company\", \"name\", LdValue.Of(\"Ella\")) .AndNotMatchContext(\"company\", \"country\", LdValue.Of(\"gb\")) .ThenReturn(true)); | Edit this page View Source ThenReturn(bool) Finishes defining the rule, specifying the result value as a boolean. Declaration public TestData.FlagBuilder ThenReturn(bool variation) Parameters Type Name Description bool variation the value to return if the rule matches the user Returns Type Description TestData.FlagBuilder | Edit this page View Source ThenReturn(int) Finishes defining the rule, specifying the result as a variation index. Declaration public TestData.FlagBuilder ThenReturn(int variationIndex) Parameters Type Name Description int variationIndex the variation to return if the rule matches the user: 0 for the first, 1 for the second, etc. Returns Type Description TestData.FlagBuilder the flag builder"
  },
  "api/LaunchDarkly.Sdk.Server.Integrations.TestData.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Integrations.TestData.html",
    "title": "Class TestData | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class TestData A mechanism for providing dynamically updatable feature flag state in a simplified form to an SDK client in test scenarios. Inheritance object TestData Implements IComponentConfigurer<IDataSource> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server.Integrations Assembly: LaunchDarkly.ServerSdk.dll Syntax public sealed class TestData : IComponentConfigurer<IDataSource> Remarks Unlike FileData, this mechanism does not use any external resources. It provides only the data that the application has put into it using the Update(FlagBuilder) method. The example code below uses a simple boolean flag, but more complex configurations are possible using the methods of the TestData.FlagBuilder that is returned by Flag(string). TestData.FlagBuilder supports many of the ways a flag can be configured on the LaunchDarkly dashboard, but does not currently support 1. rule operators other than \"in\" and \"not in\", or 2. percentage rollouts. If the same TestData instance is used to configure multiple LdClient instances, any changes made to the data will propagate to all of the LdClients. Examples var td = TestData.DataSource(); td.Update(td.Flag(\"flag-key-1\").BooleanFlag().VariationForAll(true)); var config = Configuration.Builder(\"sdk-key\") .DataSource(td) .Build(); var client = new LdClient(config); // flags can be updated at any time: td.update(testData.flag(\"flag-key-2\") .VariationForUser(\"some-user-key\", true) .FallthroughVariation(false)); Methods | Edit this page View Source Build(LdClientContext) Called internally by the SDK to create an implementation instance. Applications should not need to call this method. Declaration public IDataSource Build(LdClientContext context) Parameters Type Name Description LdClientContext context provides configuration properties and other components from the current SDK client instance Returns Type Description IDataSource a instance of the component type | Edit this page View Source DataSource() Creates a new instance of the test data source. Declaration public static TestData DataSource() Returns Type Description TestData a new configurable test data source Remarks See TestData for details. | Edit this page View Source Flag(string) Creates or copies a TestData.FlagBuilder for building a test flag configuration. Declaration public TestData.FlagBuilder Flag(string key) Parameters Type Name Description string key the flag key Returns Type Description TestData.FlagBuilder a flag configuration builder Remarks If this flag key has already been defined in this TestData instance, then the builder starts with the same configuration that was last provided for this flag. Otherwise, it starts with a new default configuration in which the flag has true and false variations, is true for all contexts when targeting is turned on and false otherwise, and currently has targeting turned on. You can change any of those properties, and provide more complex behavior, using the TestData.FlagBuilder methods. Once you have set the desired configuration, pass the builder to Update(FlagBuilder). See Also Update(FlagBuilder) | Edit this page View Source Update(FlagBuilder) Updates the test data with the specified flag configuration. Declaration public TestData Update(TestData.FlagBuilder flagBuilder) Parameters Type Name Description TestData.FlagBuilder flagBuilder a flag configuration builder Returns Type Description TestData the same TestData instance Remarks This has the same effect as if a flag were added or modified on the LaunchDarkly dashboard. It immediately propagates the flag change to any LdClient instance(s) that you have already configured to use this TestData. If no LdClient has been started yet, it simply adds this flag to the test data which will be provided to any LdClient that you subsequently configure. Any subsequent changes to this TestData.FlagBuilder instance do not affect the test data, unless you call Update(FlagBuilder) again. See Also Flag(string) | Edit this page View Source UpdateStatus(DataSourceState, ErrorInfo?) Simulates a change in the data source status. Declaration public TestData UpdateStatus(DataSourceState newState, DataSourceStatus.ErrorInfo? newError) Parameters Type Name Description DataSourceState newState one of the constants defined by DataSourceState DataSourceStatus.ErrorInfo? newError an optional DataSourceStatus.ErrorInfo instance Returns Type Description TestData Remarks Use this if you want to test the behavior of application code that uses DataSourceStatusProvider to track whether the data source is having problems (for example, a network failure interrupting the streaming connection). It does not actually stop the TestData data source from working, so even if you have simulated an outage, calling Update(FlagBuilder) will still send updates. Implements IComponentConfigurer<T> See Also FileData"
  },
  "api/LaunchDarkly.Sdk.Server.Integrations.WrapperInfoBuilder.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Integrations.WrapperInfoBuilder.html",
    "title": "Class WrapperInfoBuilder | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class WrapperInfoBuilder Contains methods for configuring wrapper information. If the WrapperBuilder is used, then it will replace the wrapper information from the HttpConfigurationBuilder. Additionally, any wrapper SDK may overwrite any application developer provided wrapper information. Inheritance object WrapperInfoBuilder Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server.Integrations Assembly: LaunchDarkly.ServerSdk.dll Syntax public sealed class WrapperInfoBuilder Remarks This builder is primarily intended for use by LaunchDarkly in developing wrapper SDKs. Constructors View Source WrapperInfoBuilder() Declaration public WrapperInfoBuilder() Methods | Edit this page View Source Build() Called internally by the SDK to create a configuration instance. Applications do not need to call this method. Declaration public WrapperInfo Build() Returns Type Description WrapperInfo the wrapper information | Edit this page View Source Name(string) Set the name of the wrapper. Declaration public WrapperInfoBuilder Name(string value) Parameters Type Name Description string value the name of the wrapper Returns Type Description WrapperInfoBuilder the builder | Edit this page View Source Version(string) Set the version of the wrapper. Declaration public WrapperInfoBuilder Version(string value) Parameters Type Name Description string value the version of the wrapper Returns Type Description WrapperInfoBuilder the builder"
  },
  "api/LaunchDarkly.Sdk.Server.Integrations.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Integrations.html",
    "title": "Namespace LaunchDarkly.Sdk.Server.Integrations | LaunchDarkly Dotnet Server SDK",
    "keywords": "Namespace LaunchDarkly.Sdk.Server.Integrations Classes BigSegmentsConfigurationBuilder Contains methods for configuring the SDK's Big Segments behavior. EventProcessorBuilder Contains methods for configuring delivery of analytics events. FileData Integration between the LaunchDarkly SDK and file data. FileDataSourceBuilder A builder for configuring the file data source. FileDataTypes Types that are used in configuring FileDataSourceBuilder. HookConfigurationBuilder HookConfigurationBuilder is a builder for the SDK's hook configuration. HttpConfigurationBuilder Contains methods for configuring the SDK's networking behavior. LoggingConfigurationBuilder Contains methods for configuring the SDK's logging behavior. PersistentDataStoreBuilder A configurable data store factory that adds caching behavior to a persistent data store implementation. PollingDataSourceBuilder Contains methods for configuring the polling data source. ServiceEndpointsBuilder Contains methods for configuring the SDK's service URIs. StreamingDataSourceBuilder Contains methods for configuring the streaming data source. TestData A mechanism for providing dynamically updatable feature flag state in a simplified form to an SDK client in test scenarios. TestData.FlagBuilder A builder for feature flag configurations to be used with TestData. TestData.FlagMigrationBuilder Used to build the migration settings for a feature flag. TestData.FlagRuleBuilder A builder for feature flag rules to be used with TestData.FlagBuilder. WrapperInfoBuilder Contains methods for configuring wrapper information. If the WrapperBuilder is used, then it will replace the wrapper information from the HttpConfigurationBuilder. Additionally, any wrapper SDK may overwrite any application developer provided wrapper information. Interfaces FileDataTypes.IFileReader Interface for customizing how data files are read. Enums FileDataTypes.DuplicateKeysHandling Determines how duplicate feature flag or segment keys are handled."
  },
  "api/LaunchDarkly.Sdk.Server.Interfaces.BigSegmentStoreStatus.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Interfaces.BigSegmentStoreStatus.html",
    "title": "Struct BigSegmentStoreStatus | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct BigSegmentStoreStatus Information about the status of a Big Segment store, provided by IBigSegmentStoreStatusProvider. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk.Server.Interfaces Assembly: LaunchDarkly.ServerSdk.dll Syntax public struct BigSegmentStoreStatus Remarks \"Big Segments\" are a specific type of user segments. For more information, read the LaunchDarkly documentation about user segments: https://docs.launchdarkly.com/home/users/segments Properties | Edit this page View Source Available True if the Big Segment store is able to respond to queries, so that the SDK can evaluate whether a user is in a segment or not. Declaration public bool Available { get; set; } Property Value Type Description bool Remarks If this property is false, the store is not able to make queries (for instance, it may not have a valid database connection). In this case, the SDK will treat any reference to a Big Segment as if no users are included in that segment. Also, the EvaluationReason associated with any flag evaluation that references a Big Segment when the store is not available will have a BigSegmentsStatus of StoreError. | Edit this page View Source Stale True if the Big Segment store is available, but has not been updated within the amount of time specified by StaleAfter(TimeSpan). Declaration public bool Stale { get; set; } Property Value Type Description bool Remarks This may indicate that the LaunchDarkly Relay Proxy, which populates the store, has stopped running or has become unable to receive fresh data from LaunchDarkly. Any feature flag evaluations that reference a Big Segment will be using the last known data, which may be out of date. Methods | Edit this page View Source ToString() Declaration public override string ToString() Returns Type Description string Overrides ValueType.ToString()"
  },
  "api/LaunchDarkly.Sdk.Server.Interfaces.DataSourceState.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Interfaces.DataSourceState.html",
    "title": "Enum DataSourceState | LaunchDarkly Dotnet Server SDK",
    "keywords": "Enum DataSourceState An enumeration of possible values for State. Namespace: LaunchDarkly.Sdk.Server.Interfaces Assembly: LaunchDarkly.ServerSdk.dll Syntax public enum DataSourceState Fields Name Description Initializing The initial state of the data source when the SDK is being initialized. Interrupted Indicates that the data source encountered an error that it will attempt to recover from. Off Indicates that the data source has been permanently shut down. Valid Indicates that the data source is currently operational and has not had any problems since the last time it received data. Extension Methods DataSourceStatusExtensions.Identifier(DataSourceState)"
  },
  "api/LaunchDarkly.Sdk.Server.Interfaces.DataSourceStatus.ErrorInfo.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Interfaces.DataSourceStatus.ErrorInfo.html",
    "title": "Struct DataSourceStatus.ErrorInfo | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct DataSourceStatus.ErrorInfo A description of an error condition that the data source encountered. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk.Server.Interfaces Assembly: LaunchDarkly.ServerSdk.dll Syntax public struct DataSourceStatus.ErrorInfo Properties | Edit this page View Source Kind An enumerated value representing the general category of the error. Declaration public DataSourceStatus.ErrorKind Kind { get; set; } Property Value Type Description DataSourceStatus.ErrorKind | Edit this page View Source Message Any additional human-readable information relevant to the error. Declaration public string Message { get; set; } Property Value Type Description string Remarks The format of this message is subject to change and should not be relied on programmatically. | Edit this page View Source StatusCode The HTTP status code if the error was ErrorResponse, or zero otherwise. Declaration public int StatusCode { get; set; } Property Value Type Description int | Edit this page View Source Time The date/time that the error occurred. Declaration public DateTime Time { get; set; } Property Value Type Description DateTime Methods | Edit this page View Source FromException(Exception) Constructs an instance based on an exception. Declaration public static DataSourceStatus.ErrorInfo FromException(Exception e) Parameters Type Name Description Exception e the exception Returns Type Description DataSourceStatus.ErrorInfo an ErrorInfo | Edit this page View Source FromHttpError(int) Constructs an instance based on an HTTP error status. Declaration public static DataSourceStatus.ErrorInfo FromHttpError(int statusCode) Parameters Type Name Description int statusCode the status code Returns Type Description DataSourceStatus.ErrorInfo an ErrorInfo | Edit this page View Source ToString() Declaration public override string ToString() Returns Type Description string Overrides ValueType.ToString() See Also LastError"
  },
  "api/LaunchDarkly.Sdk.Server.Interfaces.DataSourceStatus.ErrorKind.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Interfaces.DataSourceStatus.ErrorKind.html",
    "title": "Enum DataSourceStatus.ErrorKind | LaunchDarkly Dotnet Server SDK",
    "keywords": "Enum DataSourceStatus.ErrorKind An enumeration describing the general type of an error reported in DataSourceStatus.ErrorInfo. Namespace: LaunchDarkly.Sdk.Server.Interfaces Assembly: LaunchDarkly.ServerSdk.dll Syntax public enum DataSourceStatus.ErrorKind Fields Name Description ErrorResponse The LaunchDarkly service returned an HTTP response with an error status, available with StatusCode. InvalidData The SDK received malformed data from the LaunchDarkly service. NetworkError An I/O error such as a dropped connection. StoreError The data source itself is working, but when it tried to put an update into the data store, the data store failed (so the SDK may not have the latest data). Unknown An unexpected error, such as an uncaught exception, further described by Message. Extension Methods DataSourceStatusExtensions.Identifier(DataSourceStatus.ErrorKind)"
  },
  "api/LaunchDarkly.Sdk.Server.Interfaces.DataSourceStatus.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Interfaces.DataSourceStatus.html",
    "title": "Struct DataSourceStatus | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct DataSourceStatus Information about the data source's status and about the last status change. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk.Server.Interfaces Assembly: LaunchDarkly.ServerSdk.dll Syntax public struct DataSourceStatus Properties | Edit this page View Source LastError Information about the last error that the data source encountered, if any. Declaration public DataSourceStatus.ErrorInfo? LastError { get; set; } Property Value Type Description DataSourceStatus.ErrorInfo? Remarks This property should be updated whenever the data source encounters a problem, even if it does not cause State to change. For instance, if a stream connection fails and the state changes to Interrupted, and then subsequent attempts to restart the connection also fail, the state will remain Interrupted but the error information will be updated each time-- and the last error will still be reported in this property even if the state later becomes Valid. | Edit this page View Source State An enumerated value representing the overall current state of the data source. Declaration public DataSourceState State { get; set; } Property Value Type Description DataSourceState | Edit this page View Source StateSince The date/time that the value of State most recently changed. Declaration public DateTime StateSince { get; set; } Property Value Type Description DateTime Remarks The meaning of this depends on the current state: For Initializing, it is the time that the SDK started initializing. For Valid, it is the time that the data source most recently entered a valid state, after previously having been either Initializing or Interrupted. For Interrupted, it is the time that the data source most recently entered an error state, after previously having been Valid. For Off, it is the time that the data source encountered an unrecoverable error or that the SDK was explicitly shut down. Methods | Edit this page View Source ToString() Declaration public override string ToString() Returns Type Description string Overrides ValueType.ToString() See Also Status StatusChanged"
  },
  "api/LaunchDarkly.Sdk.Server.Interfaces.DataSourceStatusExtensions.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Interfaces.DataSourceStatusExtensions.html",
    "title": "Class DataSourceStatusExtensions | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class DataSourceStatusExtensions Extension helper methods for use with data source status types. Inheritance object DataSourceStatusExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server.Interfaces Assembly: LaunchDarkly.ServerSdk.dll Syntax public static class DataSourceStatusExtensions Methods | Edit this page View Source Identifier(DataSourceState) Returns a standardized string identifier for a DataSourceState. Declaration public static string Identifier(this DataSourceState state) Parameters Type Name Description DataSourceState state a state value Returns Type Description string a string identifier Remarks These Java-style uppercase identifiers (INITIALIZING, VALID, etc.) may be used in logging for consistency across SDKs. | Edit this page View Source Identifier(ErrorKind) Returns a standardized string identifier for a DataSourceStatus.ErrorKind. Declaration public static string Identifier(this DataSourceStatus.ErrorKind errorKind) Parameters Type Name Description DataSourceStatus.ErrorKind errorKind an error kind value Returns Type Description string a string identifier Remarks These Java-style uppercase identifiers (ERROR_RESPONSE, NETWORK_ERROR, etc.) may be used in logging for consistency across SDKs."
  },
  "api/LaunchDarkly.Sdk.Server.Interfaces.DataStoreStatus.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Interfaces.DataStoreStatus.html",
    "title": "Struct DataStoreStatus | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct DataStoreStatus Information about a data store status change. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk.Server.Interfaces Assembly: LaunchDarkly.ServerSdk.dll Syntax public struct DataStoreStatus Properties | Edit this page View Source Available True if the SDK believes the data store is now available. Declaration public bool Available { get; set; } Property Value Type Description bool Remarks This property is normally true. If the SDK receives an exception while trying to query or update the data store, then it sets this property to false (notifying listeners, if any) and polls the store at intervals until a query succeeds. Once it succeeds, it sets the property back to true (again notifying listeners). | Edit this page View Source RefreshNeeded True if the store may be out of date due to a previous outage, so the SDK should attempt to refresh all feature flag data and rewrite it to the store. Declaration public bool RefreshNeeded { get; set; } Property Value Type Description bool Remarks This property is not meaningful to application code. It is used internally. Methods | Edit this page View Source ToString() Declaration public override string ToString() Returns Type Description string Overrides ValueType.ToString() See Also IDataStoreStatusProvider"
  },
  "api/LaunchDarkly.Sdk.Server.Interfaces.FlagChangeEvent.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Interfaces.FlagChangeEvent.html",
    "title": "Struct FlagChangeEvent | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct FlagChangeEvent A parameter class used with FlagChanged. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk.Server.Interfaces Assembly: LaunchDarkly.ServerSdk.dll Syntax public struct FlagChangeEvent Remarks This is not an analytics event to be sent to LaunchDarkly; it is a notification to the application. Constructors | Edit this page View Source FlagChangeEvent(string) Constructs a new instance. Declaration public FlagChangeEvent(string key) Parameters Type Name Description string key the key of the feature flag whose configuration has changed Properties | Edit this page View Source Key The key of the feature flag whose configuration has changed. Declaration public string Key { get; } Property Value Type Description string Remarks The specified flag may have been modified directly, or this may be an indirect change due to a change in some other flag that is a prerequisite for this flag, or a user segment that is referenced in the flag's rules."
  },
  "api/LaunchDarkly.Sdk.Server.Interfaces.FlagValueChangeEvent.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Interfaces.FlagValueChangeEvent.html",
    "title": "Struct FlagValueChangeEvent | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct FlagValueChangeEvent A parameter class used with FlagValueChangeHandler(string, Context, EventHandler<FlagValueChangeEvent>). Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk.Server.Interfaces Assembly: LaunchDarkly.ServerSdk.dll Syntax public struct FlagValueChangeEvent Remarks This is not an analytics event to be sent to LaunchDarkly; it is a notification to the application. Constructors | Edit this page View Source FlagValueChangeEvent(string, LdValue, LdValue) Constructs a new instance. Declaration public FlagValueChangeEvent(string key, LdValue oldValue, LdValue newValue) Parameters Type Name Description string key the key of the feature flag whose configuration has changed LdValue oldValue he last known value of the flag for the specified user prior to the update LdValue newValue he new value of the flag for the specified user Properties | Edit this page View Source Key The key of the feature flag whose configuration has changed. Declaration public string Key { get; } Property Value Type Description string Remarks The specified flag may have been modified directly, or this may be an indirect change due to a change in some other flag that is a prerequisite for this flag, or a user segment that is referenced in the flag's rules. | Edit this page View Source NewValue The new value of the flag for the specified user. Declaration public LdValue NewValue { get; } Property Value Type Description LdValue Remarks Since flag values can be of any JSON data type, this is represented as LdValue. That class has properties for converting to other .NET types, such as AsBool. If the flag was deleted or could not be evaluated, this will be Null. there is no application default value parameter as there is for the Variation methods; it is up to your code to substitute whatever fallback value is appropriate. | Edit this page View Source OldValue The last known value of the flag for the specified user prior to the update. Declaration public LdValue OldValue { get; } Property Value Type Description LdValue Remarks Since flag values can be of any JSON data type, this is represented as LdValue. That class has properties for converting to other .NET types, such as AsBool. If the flag was deleted or could not be evaluated, this will be Null. there is no application default value parameter as there is for the Variation methods; it is up to your code to substitute whatever fallback value is appropriate."
  },
  "api/LaunchDarkly.Sdk.Server.Interfaces.IBigSegmentStoreStatusProvider.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Interfaces.IBigSegmentStoreStatusProvider.html",
    "title": "Interface IBigSegmentStoreStatusProvider | LaunchDarkly Dotnet Server SDK",
    "keywords": "Interface IBigSegmentStoreStatusProvider An interface for querying the status of a Big Segment store. Namespace: LaunchDarkly.Sdk.Server.Interfaces Assembly: LaunchDarkly.ServerSdk.dll Syntax public interface IBigSegmentStoreStatusProvider Remarks The Big Segment store is the component that receives information about Big Segments, normally from a database populated by the LaunchDarkly Relay Proxy. \"Big Segments\" are a specific type of user segments. For more information, read the LaunchDarkly documentation about user segments: https://docs.launchdarkly.com/home/users/segments An implementation of this interface is returned by BigSegmentStoreStatusProvider. Application code never needs to implement this interface. Properties | Edit this page View Source Status The current status of the store. Declaration BigSegmentStoreStatus Status { get; } Property Value Type Description BigSegmentStoreStatus Events | Edit this page View Source StatusChanged An event for receiving notifications of status changes. Declaration event EventHandler<BigSegmentStoreStatus> StatusChanged Event Type Type Description EventHandler<BigSegmentStoreStatus> Remarks Any handlers attached to this event will be notified whenever any property of the status has changed. See BigSegmentStoreStatusfor an explanation of the meaning of each property and what could cause it to change. Notifications will be dispatched on a background task. It is the listener's responsibility to return as soon as possible so as not to block subsequent notifications."
  },
  "api/LaunchDarkly.Sdk.Server.Interfaces.IDataSourceStatusProvider.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Interfaces.IDataSourceStatusProvider.html",
    "title": "Interface IDataSourceStatusProvider | LaunchDarkly Dotnet Server SDK",
    "keywords": "Interface IDataSourceStatusProvider An interface for querying the status of the SDK's data source. Namespace: LaunchDarkly.Sdk.Server.Interfaces Assembly: LaunchDarkly.ServerSdk.dll Syntax public interface IDataSourceStatusProvider Remarks The data source is the component that receives updates to feature flag data. Normally this is a streaming connection, but it could be polling or file data depending on your configuration. An implementation of this interface is returned by DataSourceStatusProvider. Application code never needs to implement this interface. Properties | Edit this page View Source Status The current status of the data source. Declaration DataSourceStatus Status { get; } Property Value Type Description DataSourceStatus Remarks All of the built-in data source implementations are guaranteed to update this status whenever they successfully initialize, encounter an error, or recover after an error. For a custom data source implementation, it is the responsibility of the data source to report its status via IDataSourceUpdates; if it does not do so, the status will always be reported as Initializing. Methods | Edit this page View Source WaitFor(DataSourceState, TimeSpan) A synchronous method for waiting for a desired connection state. Declaration bool WaitFor(DataSourceState desiredState, TimeSpan timeout) Parameters Type Name Description DataSourceState desiredState the desired connection state (normally this would be Valid) TimeSpan timeout the maximum amount of time to wait-- or Zero to block indefinitely Returns Type Description bool true if the connection is now in the desired state; false if it timed out, or if the state changed to Off and that was not the desired state Remarks If the current state is already desiredState when this method is called, it immediately returns. Otherwise, it blocks until 1. the state has become desiredState, 2. the state has become Off (since that is a permanent condition), or 3. the specified timeout elapses. A scenario in which this might be useful is if you want to create the LdClient without waiting for it to initialize, and then wait for initialization at a later time or on a different thread: // create the client but do not wait var config = Configuration.Builder(\"my-sdk-key\").StartWaitTime(TimeSpan.Zero).Build(); var client = new LDClient(config); // later, possibly on another thread: var inited = client.DataSourceStatusProvider.WaitFor(DataSourceState.Valid, TimeSpan.FromSeconds(10)); if (!inited) { // do whatever is appropriate if initialization has timed out } See Also WaitForAsync(DataSourceState, TimeSpan) | Edit this page View Source WaitForAsync(DataSourceState, TimeSpan) An asynchronous method for waiting for a desired connection state. Declaration Task<bool> WaitForAsync(DataSourceState desiredState, TimeSpan timeout) Parameters Type Name Description DataSourceState desiredState the desired connection state (normally this would be Valid) TimeSpan timeout the maximum amount of time to wait-- or Zero to block indefinitely Returns Type Description Task<bool> true if the connection is now in the desired state; false if it timed out, or if the state changed to Off and that was not the desired state Remarks This method behaves identically to WaitFor(DataSourceState, TimeSpan) except that it is asynchronous. The following example is the asynchronous equivalent of the example code shown for WaitFor(DataSourceState, TimeSpan): // create the client but do not wait var config = Configuration.Builder(\"my-sdk-key\").StartWaitTime(TimeSpan.Zero).Build(); var client = new LDClient(config); // later, possibly on another thread: var inited = await client.DataSourceStatusProvider.WaitFor(DataSourceState.Valid, TimeSpan.FromSeconds(10)); if (!inited) { // do whatever is appropriate if initialization has timed out } See Also WaitFor(DataSourceState, TimeSpan) Events | Edit this page View Source StatusChanged An event for receiving notifications of status changes. Declaration event EventHandler<DataSourceStatus> StatusChanged Event Type Type Description EventHandler<DataSourceStatus> Remarks Any handlers attached to this event will be notified whenever any property of the status has changed. See DataSourceStatusfor an explanation of the meaning of each property and what could cause it to change. Notifications will be dispatched on a background task. It is the listener's responsibility to return as soon as possible so as not to block subsequent notifications. See Also DataSourceStatusProvider"
  },
  "api/LaunchDarkly.Sdk.Server.Interfaces.IDataStoreStatusProvider.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Interfaces.IDataStoreStatusProvider.html",
    "title": "Interface IDataStoreStatusProvider | LaunchDarkly Dotnet Server SDK",
    "keywords": "Interface IDataStoreStatusProvider An interface for querying the status of a persistent data store. Namespace: LaunchDarkly.Sdk.Server.Interfaces Assembly: LaunchDarkly.ServerSdk.dll Syntax public interface IDataStoreStatusProvider Remarks An implementation of this interface is returned by DataStoreStatusProvider. Application code should not implement this interface. Properties | Edit this page View Source Status The current status of the store. Declaration DataStoreStatus Status { get; } Property Value Type Description DataStoreStatus Remarks This is only meaningful for persistent stores, or any other IDataStore implementation that makes use of the reporting mechanism provided by IDataStoreUpdates. For the default in-memory store, the status will always be reported as \"available\". | Edit this page View Source StatusMonitoringEnabled Indicates whether the current data store implementation supports status monitoring. Declaration bool StatusMonitoringEnabled { get; } Property Value Type Description bool Remarks This is normally true for all persistent data stores, and false for the default in-memory store. A true value means that any status event listeners can expect to be notified if there is any error in storing data, and then notified again when the error condition is resolved. A false value means that the status is not meaningful and listeners should not expect to be notified. Events | Edit this page View Source StatusChanged An event for receiving notifications of status changes. Declaration event EventHandler<DataStoreStatus> StatusChanged Event Type Type Description EventHandler<DataStoreStatus> Remarks Any handlers attached to this event will be notified whenever any property of the status has changed. See DataStoreStatusfor an explanation of the meaning of each property and what could cause it to change. Notifications will be dispatched on a background task. It is the listener's responsibility to return as soon as possible so as not to block subsequent notifications."
  },
  "api/LaunchDarkly.Sdk.Server.Interfaces.IFlagTracker.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Interfaces.IFlagTracker.html",
    "title": "Interface IFlagTracker | LaunchDarkly Dotnet Server SDK",
    "keywords": "Interface IFlagTracker An interface for tracking changes in feature flag configurations. Namespace: LaunchDarkly.Sdk.Server.Interfaces Assembly: LaunchDarkly.ServerSdk.dll Syntax public interface IFlagTracker Remarks An implementation of this interface is returned by FlagTracker. Application code never needs to implement this interface. Methods | Edit this page View Source FlagValueChangeHandler(string, Context, EventHandler<FlagValueChangeEvent>) Creates a handler for receiving notifications when a specific feature flag's value has changed for a specific evaluation context. Declaration EventHandler<FlagChangeEvent> FlagValueChangeHandler(string flagKey, Context context, EventHandler<FlagValueChangeEvent> handler) Parameters Type Name Description string flagKey the flag key to be evaluated Context context the evaluation context EventHandler<FlagValueChangeEvent> handler a handler that will receive a FlagValueChangeEvent Returns Type Description EventHandler<FlagChangeEvent> a handler to be added to FlagChanged Remarks When you call this method, it first immediately evaluates the feature flag. It then returns a new event handler which you can add to the FlagChanged event. Whenever the specified feature flag changes, it re-evaluates the flag for the same user, and calls your handler if and only if the resulting value has changed. In other words, this method filters the more general FlagChangeEvent events to produce more specific FlagValueChangeEvent events. All feature flag evaluations require an instance of Context. If the feature flag you are tracking does not have any targeting rules, you must still pass a dummy context such as Context.New(\"for-global-flags\"). If you do not want the user to appear on your dashboard, use the Anonymous property: Context.Builder(\"for-global-flags\").Anonymous(true).Build(). Examples var flagKey = \"my-important-flag\"; var contextForFlagEvaluation = Context.New(\"context-for-evaluation\"); var listenForNewValue = client.FlagTracker.FlagValueChangeHandler( flagKey, contextForFlagEvaluation, (sender, changeArgs) => { System.Console.WriteLine(\"flag '\" + changeArgs.Key + \"' changed for \" + contextForFlagEvaluation.Key + \" from \" + changeArgs.OldValue + \" to \" + changeArgs.NewValue); }); client.FlagTracker.FlagChanged += listenForNewValue; Events | Edit this page View Source FlagChanged An event for receiving notifications of feature flag changes in general. Declaration event EventHandler<FlagChangeEvent> FlagChanged Event Type Type Description EventHandler<FlagChangeEvent> Remarks This event is raised whenever the SDK receives any change to any feature flag's configuration, or to a segment that is referenced by a feature flag. If the updated flag is used as a prerequisite for other flags, the SDK assumes that those flags may now behave differently and sends flag change events for them as well. Note that this does not necessarily mean the flag's value has changed for any particular evaluation context, only that some part of the flag configuration was changed so that it may return a different value than it previously returned for some context. If you want to track flag value changes, use FlagValueChangeHandler(string, Context, EventHandler<FlagValueChangeEvent>). Change events only work if the SDK is actually connecting to LaunchDarkly (or using the file data source). If the SDK is only reading flags from a database (ExternalUpdatesOnly) then it cannot know when there is a change, because flags are read on an as-needed basis. Notifications will be dispatched on a background task. It is the listener's responsibility to return as soon as possible so as not to block subsequent notifications. Examples client.FlagTracker.FlagChanged += (sender, eventArgs) => { System.Console.WriteLine(\"a flag has changed: \" + eventArgs.Key); };"
  },
  "api/LaunchDarkly.Sdk.Server.Interfaces.ILdClient.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Interfaces.ILdClient.html",
    "title": "Interface ILdClient | LaunchDarkly Dotnet Server SDK",
    "keywords": "Interface ILdClient Interface defining the public methods of LdClient. Namespace: LaunchDarkly.Sdk.Server.Interfaces Assembly: LaunchDarkly.ServerSdk.dll Syntax public interface ILdClient Properties | Edit this page View Source BigSegmentStoreStatusProvider A mechanism for tracking the status of a Big Segment store. Declaration IBigSegmentStoreStatusProvider BigSegmentStoreStatusProvider { get; } Property Value Type Description IBigSegmentStoreStatusProvider Remarks The returned object has methods for checking whether the Big Segment store is (as far as the SDK knows) currently operational and tracking changes in this status. See IBigSegmentStoreStatusProvider for more about this functionality. | Edit this page View Source DataSourceStatusProvider A mechanism for tracking the status of the data source. Declaration IDataSourceStatusProvider DataSourceStatusProvider { get; } Property Value Type Description IDataSourceStatusProvider Remarks The data source is the mechanism that the SDK uses to get feature flag configurations, such as a streaming connection (the default) or poll requests. The IDataSourceStatusProvider has methods for checking whether the data source is (as far as the SDK knows) currently operational, and tracking changes in this status. This property will never be null. | Edit this page View Source DataStoreStatusProvider A mechanism for tracking the status of a persistent data store. Declaration IDataStoreStatusProvider DataStoreStatusProvider { get; } Property Value Type Description IDataStoreStatusProvider Remarks The IDataStoreStatusProvider has methods for checking whether the data store is (as far as the SDK knows) currently operational and tracking changes in this status. These are only relevant for a persistent data store; if you are using an in-memory data store, then this property is a stub object that always reports the store as operational. | Edit this page View Source FlagTracker A mechanism for tracking changes in feature flag configurations. Declaration IFlagTracker FlagTracker { get; } Property Value Type Description IFlagTracker Remarks The IFlagTracker contains methods for requesting notifications about feature flag changes using an event listener model. | Edit this page View Source Initialized Tests whether the client is ready to be used. Declaration bool Initialized { get; } Property Value Type Description bool true if the client is ready, or false if it is still initializing Methods | Edit this page View Source AllFlagsState(Context, params FlagsStateOption[]) Returns an object that encapsulates the state of all feature flags for a given context, which can be passed to front-end code. Declaration FeatureFlagsState AllFlagsState(Context context, params FlagsStateOption[] options) Parameters Type Name Description Context context the evaluation context FlagsStateOption[] options optional FlagsStateOption values affecting how the state is computed-- for instance, to filter the set of flags to only include the client-side-enabled ones Returns Type Description FeatureFlagsState a FeatureFlagsState object (will never be null; see Valid Remarks The object returned by this method contains the flag values as well as other metadata that is used by the LaunchDarkly JavaScript client, so it can be used for bootstrapping. This method will not send analytics events back to LaunchDarkly. | Edit this page View Source BoolVariation(string, Context, bool) Calculates the boolean value of a feature flag for a given context. Declaration bool BoolVariation(string key, Context context, bool defaultValue = false) Parameters Type Name Description string key the unique feature key for the feature flag Context context the evaluation context bool defaultValue the default value of the flag Returns Type Description bool the variation for the given context, or defaultValue if the flag cannot be evaluated Remarks If the flag variation does not have a boolean value, defaultValue is returned. If an error makes it impossible to evaluate the flag (for instance, the feature flag key does not match any existing flag), defaultValue is returned. See Also BoolVariationDetail(string, Context, bool) | Edit this page View Source BoolVariationDetail(string, Context, bool) Calculates the boolean value of a feature flag for a given context, and returns an object that describes the way the value was determined. Declaration EvaluationDetail<bool> BoolVariationDetail(string key, Context context, bool defaultValue) Parameters Type Name Description string key the unique feature key for the feature flag Context context the evaluation context bool defaultValue the default value of the flag Returns Type Description EvaluationDetail<bool> an EvaluationDetail<T> object Remarks The Reason property in the result will also be included in analytics events, if you are capturing detailed event data for this flag. The behavior is otherwise identical to BoolVariation(string, Context, bool). See Also BoolVariation(string, Context, bool) | Edit this page View Source DoubleVariation(string, Context, double) Calculates the double-precision floating-point numeric value of a feature flag for a given context. Declaration double DoubleVariation(string key, Context context, double defaultValue) Parameters Type Name Description string key the unique feature key for the feature flag Context context the evaluation context double defaultValue the default value of the flag Returns Type Description double the variation for the given context, or defaultValue if the flag cannot be evaluated Remarks If the flag variation does not have a numeric value, defaultValue is returned. If an error makes it impossible to evaluate the flag (for instance, the feature flag key does not match any existing flag), defaultValue is returned. See Also DoubleVariationDetail(string, Context, double) FloatVariation(string, Context, float) | Edit this page View Source DoubleVariationDetail(string, Context, double) Calculates the double-precision floating-point numeric value of a feature flag for a given context, and returns an object that describes the way the value was determined. Declaration EvaluationDetail<double> DoubleVariationDetail(string key, Context context, double defaultValue) Parameters Type Name Description string key the unique feature key for the feature flag Context context the evaluation context double defaultValue the default value of the flag Returns Type Description EvaluationDetail<double> an EvaluationDetail<T> object Remarks The Reason property in the result will also be included in analytics events, if you are capturing detailed event data for this flag. The behavior is otherwise identical to DoubleVariation(string, Context, double). See Also DoubleVariation(string, Context, double) FloatVariationDetail(string, Context, float) | Edit this page View Source FloatVariation(string, Context, float) Calculates the single-precision floating-point numeric value of a feature flag for a given context. Declaration float FloatVariation(string key, Context context, float defaultValue) Parameters Type Name Description string key the unique feature key for the feature flag Context context the evaluation context float defaultValue the default value of the flag Returns Type Description float the variation for the given context, or defaultValue if the flag cannot be evaluated Remarks If the flag variation does not have a numeric value, defaultValue is returned. If an error makes it impossible to evaluate the flag (for instance, the feature flag key does not match any existing flag), defaultValue is returned. See Also FloatVariationDetail(string, Context, float) DoubleVariation(string, Context, double) | Edit this page View Source FloatVariationDetail(string, Context, float) Calculates the single-precision floating-point numeric value of a feature flag for a given context, and returns an object that describes the way the value was determined. Declaration EvaluationDetail<float> FloatVariationDetail(string key, Context context, float defaultValue) Parameters Type Name Description string key the unique feature key for the feature flag Context context the evaluation context float defaultValue the default value of the flag Returns Type Description EvaluationDetail<float> an EvaluationDetail<T> object Remarks The Reason property in the result will also be included in analytics events, if you are capturing detailed event data for this flag. The behavior is otherwise identical to FloatVariation(string, Context, float). See Also FloatVariation(string, Context, float) DoubleVariationDetail(string, Context, double) | Edit this page View Source Flush() Tells the client that all pending analytics events (if any) should be delivered as soon as possible. Declaration void Flush() Remarks This flush is asynchronous, so this method will return before it is complete. To wait for the flush to complete, use FlushAndWait(TimeSpan) instead (or, if you are done with the SDK, Dispose()). For more information, see: Flushing Events. See Also FlushAndWait(TimeSpan) | Edit this page View Source FlushAndWait(TimeSpan) Tells the client to deliver any pending analytics events synchronously now. Declaration bool FlushAndWait(TimeSpan timeout) Parameters Type Name Description TimeSpan timeout the maximum time to wait Returns Type Description bool true if completed, false if timed out Remarks Unlike Flush(), this method waits for event delivery to finish. The timeout parameter, if greater than zero, specifies the maximum amount of time to wait. If the timeout elapses before delivery is finished, the method returns early and returns false; in this case, the SDK may still continue trying to deliver the events in the background. If the timeout parameter is zero or negative, the method waits as long as necessary to deliver the events. However, the SDK does not retry event delivery indefinitely; currently, any network error or server error will cause the SDK to wait one second and retry one time, after which the events will be discarded so that the SDK will not keep consuming more memory for events indefinitely. The method returns true if event delivery either succeeded, or definitively failed, before the timeout elapsed. It returns false if the timeout elapsed. This method is also implicitly called if you call Dispose(). The difference is that FlushAndWait does not shut down the SDK client. For more information, see: Flushing Events. See Also Flush() | Edit this page View Source GetLogger() Returns the logger instance used by this SDK instance. Declaration Logger GetLogger() Returns Type Description Logger the logger instance used by the SDK Remarks This allows for access to the logger by other LaunchDarkly components, such as the Migration class. It also allows for usage of the logger in wrapper implementations. It is not intended for general purpose application logging. | Edit this page View Source Identify(Context) Reports details about an evaluation context. Declaration void Identify(Context context) Parameters Type Name Description Context context the evaluation context Remarks This method simply creates an analytics event containing the context attributes, to that LaunchDarkly will know about that context if it does not already. Calling any evaluation method, such as BoolVariation(string, Context, bool), also sends the context information to LaunchDarkly (if events are enabled), so you only need to use Identify(Context) if you want to identify the context without evaluating a flag. Note that event delivery is asynchronous, so the event may not actually be sent until later; see Flush(). For more information, see the Reference Guide. | Edit this page View Source IntVariation(string, Context, int) Calculates the integer value of a feature flag for a given context. Declaration int IntVariation(string key, Context context, int defaultValue) Parameters Type Name Description string key the unique feature key for the feature flag Context context the evaluation context int defaultValue the default value of the flag Returns Type Description int the variation for the given context, or defaultValue if the flag cannot be evaluated Remarks If the flag variation has a numeric value that is not an integer, it is rounded to the nearest integer. This rounding behavior may be changed in a future version of the SDK (for instance, to round toward zero like the usual float-to-int conversion in C#), so you should avoid relying on it. If the flag variation does not have a numeric value, defaultValue is returned. If an error makes it impossible to evaluate the flag (for instance, the feature flag key does not match any existing flag), defaultValue is returned. See Also IntVariationDetail(string, Context, int) | Edit this page View Source IntVariationDetail(string, Context, int) Calculates the integer value of a feature flag for a given context, and returns an object that describes the way the value was determined. Declaration EvaluationDetail<int> IntVariationDetail(string key, Context context, int defaultValue) Parameters Type Name Description string key the unique feature key for the feature flag Context context the evaluation context int defaultValue the default value of the flag Returns Type Description EvaluationDetail<int> an EvaluationDetail<T> object Remarks The Reason property in the result will also be included in analytics events, if you are capturing detailed event data for this flag. The behavior is otherwise identical to IntVariation(string, Context, int). See Also IntVariation(string, Context, int) | Edit this page View Source IsOffline() Returns true if the client has been configured to be offline. Declaration bool IsOffline() Returns Type Description bool true if the client is configured to be offline Remarks This value will be static for the execution of a client. If you want active data source status for an online client, then use DataSourceStatusProvider. | Edit this page View Source JsonVariation(string, Context, LdValue) Calculates the value of a feature flag for a given context as any JSON value type. Declaration LdValue JsonVariation(string key, Context context, LdValue defaultValue) Parameters Type Name Description string key the unique feature key for the feature flag Context context the evaluation context LdValue defaultValue the default value of the flag Returns Type Description LdValue the variation for the given context, or defaultValue if the flag cannot be evaluated Remarks The type LdValue is used to represent any of the value types that can exist in JSON. Use LdValue methods to examine its type and value. If an error makes it impossible to evaluate the flag (for instance, the feature flag key does not match any existing flag), defaultValue is returned. See Also JsonVariationDetail(string, Context, LdValue) | Edit this page View Source JsonVariationDetail(string, Context, LdValue) Calculates the value of a feature flag for a given context as any JSON value type, and returns an object that describes the way the value was determined. Declaration EvaluationDetail<LdValue> JsonVariationDetail(string key, Context context, LdValue defaultValue) Parameters Type Name Description string key the unique feature key for the feature flag Context context the evaluation context LdValue defaultValue the default value of the flag Returns Type Description EvaluationDetail<LdValue> an EvaluationDetail<T> object Remarks The Reason property in the result will also be included in analytics events, if you are capturing detailed event data for this flag. The behavior is otherwise identical to JsonVariationDetail(string, Context, LdValue). See Also JsonVariation(string, Context, LdValue) | Edit this page View Source MigrationVariation(string, Context, MigrationStage) Returns the migration stage of the migration feature flag for the given evaluation context. Declaration MigrationVariation MigrationVariation(string key, Context context, MigrationStage defaultStage) Parameters Type Name Description string key the unique feature key for the feature flag Context context the evaluation context MigrationStage defaultStage the default value of the flag Returns Type Description MigrationVariation an MigrationVariation(string, Context, MigrationStage) object | Edit this page View Source SecureModeHash(Context) Creates a hash string that can be used by the JavaScript SDK to identify a context. Declaration string SecureModeHash(Context context) Parameters Type Name Description Context context the evaluation context Returns Type Description string the hash, or null if the hash could not be calculated Remarks See Secure mode in the JavaScript SDK Reference. | Edit this page View Source StringVariation(string, Context, string) Calculates the string value of a feature flag for a given context. Declaration string StringVariation(string key, Context context, string defaultValue) Parameters Type Name Description string key the unique feature key for the feature flag Context context the evaluation context string defaultValue the default value of the flag Returns Type Description string the variation for the given context, or defaultValue if the flag cannot be evaluated Remarks If the flag variation does not have a string value, defaultValue is returned. Normally, the string value of a flag should not be null, since the LaunchDarkly UI does not allow you to assign a null value to a flag variation. However, since it may be possible to create a feature flag with a null variation by other means, and also since defaultValue is nullable, you should assume that the return value might be null. See Also StringVariationDetail(string, Context, string) | Edit this page View Source StringVariationDetail(string, Context, string) Calculates the string value of a feature flag for a given context, and returns an object that describes the way the value was determined. Declaration EvaluationDetail<string> StringVariationDetail(string key, Context context, string defaultValue) Parameters Type Name Description string key the unique feature key for the feature flag Context context the evaluation context string defaultValue the default value of the flag Returns Type Description EvaluationDetail<string> an EvaluationDetail<T> object Remarks The Reason property in the result will also be included in analytics events, if you are capturing detailed event data for this flag. The behavior is otherwise identical to StringVariation(string, Context, string). See Also StringVariation(string, Context, string) | Edit this page View Source Track(string, Context) Tracks that an application-defined event occurred. Declaration void Track(string name, Context context) Parameters Type Name Description string name the name of the event Context context the evaluation context associated with the event Remarks This method creates a \"custom\" analytics event containing the specified event name (key) and context attributes. You may attach arbitrary data to the event by calling Track(string, Context, LdValue) instead. Note that event delivery is asynchronous, so the event may not actually be sent until later; see Flush(). See Also Track(string, Context, LdValue) Track(string, Context, LdValue, double) | Edit this page View Source Track(string, Context, LdValue) Tracks that an application-defined event occurred. Declaration void Track(string name, Context context, LdValue data) Parameters Type Name Description string name the name of the event Context context the evaluation context associated with the event LdValue data additional data associated with the event, if any Remarks This method creates a \"custom\" analytics event containing the specified event name (key), context properties, and optional custom data. If you do not need custom data, pass Null for the last parameter or simply omit the parameter. Note that event delivery is asynchronous, so the event may not actually be sent until later; see Flush(). See Also Track(string, Context) Track(string, Context, LdValue, double) Track(string, Context, LdValue) | Edit this page View Source Track(string, Context, LdValue, double) Tracks that an application-defined event occurred, and provides an additional numeric value for custom metrics. Declaration void Track(string name, Context context, LdValue data, double metricValue) Parameters Type Name Description string name the name of the event Context context the evaluation context associated with the event LdValue data additional data associated with the event; use Null if not applicable double metricValue a numeric value used by the LaunchDarkly experimentation feature in numeric custom metrics Remarks This value is used by the LaunchDarkly experimentation feature in numeric custom metrics, and will also be returned as part of the custom event for Data Export. Note that event delivery is asynchronous, so the event may not actually be sent until later; see Flush(). See Also Track(string, Context) Track(string, Context, LdValue) | Edit this page View Source TrackMigration(MigrationOpTracker) Track the details of a migration. Declaration void TrackMigration(MigrationOpTracker tracker) Parameters Type Name Description MigrationOpTracker tracker migration tracker which was used to track the details of a migration Extension Methods ILdClientExtensions.EnumVariationDetail<T>(ILdClient, string, Context, T) ILdClientExtensions.EnumVariation<T>(ILdClient, string, Context, T)"
  },
  "api/LaunchDarkly.Sdk.Server.Interfaces.ServiceEndpoints.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Interfaces.ServiceEndpoints.html",
    "title": "Class ServiceEndpoints | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class ServiceEndpoints Specifies the base service URIs used by SDK components. Inheritance object ServiceEndpoints Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server.Interfaces Assembly: LaunchDarkly.ServerSdk.dll Syntax public sealed class ServiceEndpoints Remarks This class's properties are not public, since they are only read by the SDK. See Also ServiceEndpointsBuilder"
  },
  "api/LaunchDarkly.Sdk.Server.Interfaces.WrapperInfo.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Interfaces.WrapperInfo.html",
    "title": "Class WrapperInfo | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class WrapperInfo Contains wrapper SDK information. Inheritance object WrapperInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server.Interfaces Assembly: LaunchDarkly.ServerSdk.dll Syntax public sealed class WrapperInfo Remarks This class's properties are not public, since they are only read by the SDK. See Also WrapperInfoBuilder"
  },
  "api/LaunchDarkly.Sdk.Server.Interfaces.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Interfaces.html",
    "title": "Namespace LaunchDarkly.Sdk.Server.Interfaces | LaunchDarkly Dotnet Server SDK",
    "keywords": "Namespace LaunchDarkly.Sdk.Server.Interfaces Classes DataSourceStatusExtensions Extension helper methods for use with data source status types. ServiceEndpoints Specifies the base service URIs used by SDK components. WrapperInfo Contains wrapper SDK information. Structs BigSegmentStoreStatus Information about the status of a Big Segment store, provided by IBigSegmentStoreStatusProvider. DataSourceStatus Information about the data source's status and about the last status change. DataSourceStatus.ErrorInfo A description of an error condition that the data source encountered. DataStoreStatus Information about a data store status change. FlagChangeEvent A parameter class used with FlagChanged. FlagValueChangeEvent A parameter class used with FlagValueChangeHandler(string, Context, EventHandler<FlagValueChangeEvent>). Interfaces IBigSegmentStoreStatusProvider An interface for querying the status of a Big Segment store. IDataSourceStatusProvider An interface for querying the status of the SDK's data source. IDataStoreStatusProvider An interface for querying the status of a persistent data store. IFlagTracker An interface for tracking changes in feature flag configurations. ILdClient Interface defining the public methods of LdClient. Enums DataSourceState An enumeration of possible values for State. DataSourceStatus.ErrorKind An enumeration describing the general type of an error reported in DataSourceStatus.ErrorInfo."
  },
  "api/LaunchDarkly.Sdk.Server.LdClient.html": {
    "href": "api/LaunchDarkly.Sdk.Server.LdClient.html",
    "title": "Class LdClient | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class LdClient A client for the LaunchDarkly API. Client instances are thread-safe. Applications should instantiate a single LdClient for the lifetime of their application. Inheritance object LdClient Implements IDisposable ILdClient Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server Assembly: LaunchDarkly.ServerSdk.dll Syntax public sealed class LdClient : IDisposable, ILdClient Constructors | Edit this page View Source LdClient(Configuration) Creates a new client to connect to LaunchDarkly with a custom configuration. Declaration public LdClient(Configuration config) Parameters Type Name Description Configuration config a client configuration object (which includes an SDK key) Remarks Applications should instantiate a single instance for the lifetime of the application. In unusual cases where an application needs to evaluate feature flags from different LaunchDarkly projects or environments, you may create multiple clients, but they should still be retained for the lifetime of the application rather than created per request or per thread. Normally, the client will begin attempting to connect to LaunchDarkly as soon as you call the constructor. The constructor returns as soon as any of the following things has happened: It has successfully connected to LaunchDarkly and received feature flag data. In this case, Initialized will be true, and the DataSourceStatusProvider will return a state of Valid. It has not succeeded in connecting within the StartWaitTime(TimeSpan) timeout (the default for this is 5 seconds). This could happen due to a network problem or a temporary service outage. In this case, Initialized will be false, and the DataSourceStatusProvider will return a state of Initializing, indicating that the SDK will still continue trying to connect in the background. It has encountered an unrecoverable error: for instance, LaunchDarkly has rejected the SDK key. Since an invalid key will not become valid, the SDK will not retry in this case. Initialized will be false, and the DataSourceStatusProvider will return a state of Off. If you have specified Offline(bool) mode or ExternalUpdatesOnly, the constructor returns immediately without trying to connect to LaunchDarkly. Failure to connect to LaunchDarkly will never cause the constructor to throw an exception. Under any circumstance where it is not able to get feature flag data from LaunchDarkly (and therefore Initialized is false), if it does not have any other source of data (such as a persistent data store) then feature flag evaluations will behave the same as if the flags were not found: that is, they will return whatever default value is specified in your code. Examples var config = Configuration.Builder(\"my-sdk-key\") .AllAttributesPrivate(true) .EventCapacity(1000) .Build(); var client = new LDClient(config); See Also LdClient(string) | Edit this page View Source LdClient(string) Creates a new client instance that connects to LaunchDarkly with the default configuration. Declaration public LdClient(string sdkKey) Parameters Type Name Description string sdkKey the SDK key for your LaunchDarkly environment Remarks If you need to specify any custom SDK options, use LdClient(Configuration) instead. Applications should instantiate a single instance for the lifetime of the application. In unusual cases where an application needs to evaluate feature flags from different LaunchDarkly projects or environments, you may create multiple clients, but they should still be retained for the lifetime of the application rather than created per request or per thread. The constructor will never throw an exception, even if initialization fails. For more details about initialization behavior and how to detect error conditions, see LdClient(Configuration). See Also LdClient(Configuration) Properties | Edit this page View Source BigSegmentStoreStatusProvider A mechanism for tracking the status of a Big Segment store. Declaration public IBigSegmentStoreStatusProvider BigSegmentStoreStatusProvider { get; } Property Value Type Description IBigSegmentStoreStatusProvider Remarks The returned object has methods for checking whether the Big Segment store is (as far as the SDK knows) currently operational and tracking changes in this status. See IBigSegmentStoreStatusProvider for more about this functionality. | Edit this page View Source DataSourceStatusProvider A mechanism for tracking the status of the data source. Declaration public IDataSourceStatusProvider DataSourceStatusProvider { get; } Property Value Type Description IDataSourceStatusProvider Remarks The data source is the mechanism that the SDK uses to get feature flag configurations, such as a streaming connection (the default) or poll requests. The IDataSourceStatusProvider has methods for checking whether the data source is (as far as the SDK knows) currently operational, and tracking changes in this status. This property will never be null. | Edit this page View Source DataStoreStatusProvider A mechanism for tracking the status of a persistent data store. Declaration public IDataStoreStatusProvider DataStoreStatusProvider { get; } Property Value Type Description IDataStoreStatusProvider Remarks The IDataStoreStatusProvider has methods for checking whether the data store is (as far as the SDK knows) currently operational and tracking changes in this status. These are only relevant for a persistent data store; if you are using an in-memory data store, then this property is a stub object that always reports the store as operational. | Edit this page View Source FlagTracker A mechanism for tracking changes in feature flag configurations. Declaration public IFlagTracker FlagTracker { get; } Property Value Type Description IFlagTracker Remarks The IFlagTracker contains methods for requesting notifications about feature flag changes using an event listener model. | Edit this page View Source Initialized Tests whether the client is ready to be used. Declaration public bool Initialized { get; } Property Value Type Description bool true if the client is ready, or false if it is still initializing | Edit this page View Source Version Declaration public Version Version { get; } Property Value Type Description Version Methods | Edit this page View Source AllFlagsState(Context, params FlagsStateOption[]) Returns an object that encapsulates the state of all feature flags for a given context, which can be passed to front-end code. Declaration public FeatureFlagsState AllFlagsState(Context context, params FlagsStateOption[] options) Parameters Type Name Description Context context the evaluation context FlagsStateOption[] options optional FlagsStateOption values affecting how the state is computed-- for instance, to filter the set of flags to only include the client-side-enabled ones Returns Type Description FeatureFlagsState a FeatureFlagsState object (will never be null; see Valid Remarks The object returned by this method contains the flag values as well as other metadata that is used by the LaunchDarkly JavaScript client, so it can be used for bootstrapping. This method will not send analytics events back to LaunchDarkly. | Edit this page View Source BoolVariation(string, Context, bool) Calculates the boolean value of a feature flag for a given context. Declaration public bool BoolVariation(string key, Context context, bool defaultValue = false) Parameters Type Name Description string key the unique feature key for the feature flag Context context the evaluation context bool defaultValue the default value of the flag Returns Type Description bool the variation for the given context, or defaultValue if the flag cannot be evaluated Remarks If the flag variation does not have a boolean value, defaultValue is returned. If an error makes it impossible to evaluate the flag (for instance, the feature flag key does not match any existing flag), defaultValue is returned. See Also BoolVariationDetail(string, Context, bool) | Edit this page View Source BoolVariationDetail(string, Context, bool) Calculates the boolean value of a feature flag for a given context, and returns an object that describes the way the value was determined. Declaration public EvaluationDetail<bool> BoolVariationDetail(string key, Context context, bool defaultValue) Parameters Type Name Description string key the unique feature key for the feature flag Context context the evaluation context bool defaultValue the default value of the flag Returns Type Description EvaluationDetail<bool> an EvaluationDetail<T> object Remarks The Reason property in the result will also be included in analytics events, if you are capturing detailed event data for this flag. The behavior is otherwise identical to BoolVariation(string, Context, bool). See Also BoolVariation(string, Context, bool) | Edit this page View Source Dispose() Shuts down the client and releases any resources it is using. Declaration public void Dispose() Remarks Unless it is offline, the client will attempt to deliver any pending analytics events before closing. Any components that were added by specifying a factory object (DataStore(IComponentConfigurer<IDataStore>), etc.) will also be disposed of by this method; their lifecycle is the same as the client's. | Edit this page View Source DoubleVariation(string, Context, double) Calculates the double-precision floating-point numeric value of a feature flag for a given context. Declaration public double DoubleVariation(string key, Context context, double defaultValue) Parameters Type Name Description string key the unique feature key for the feature flag Context context the evaluation context double defaultValue the default value of the flag Returns Type Description double the variation for the given context, or defaultValue if the flag cannot be evaluated Remarks If the flag variation does not have a numeric value, defaultValue is returned. If an error makes it impossible to evaluate the flag (for instance, the feature flag key does not match any existing flag), defaultValue is returned. See Also DoubleVariationDetail(string, Context, double) FloatVariation(string, Context, float) | Edit this page View Source DoubleVariationDetail(string, Context, double) Calculates the double-precision floating-point numeric value of a feature flag for a given context, and returns an object that describes the way the value was determined. Declaration public EvaluationDetail<double> DoubleVariationDetail(string key, Context context, double defaultValue) Parameters Type Name Description string key the unique feature key for the feature flag Context context the evaluation context double defaultValue the default value of the flag Returns Type Description EvaluationDetail<double> an EvaluationDetail<T> object Remarks The Reason property in the result will also be included in analytics events, if you are capturing detailed event data for this flag. The behavior is otherwise identical to DoubleVariation(string, Context, double). See Also DoubleVariation(string, Context, double) FloatVariationDetail(string, Context, float) | Edit this page View Source FloatVariation(string, Context, float) Calculates the single-precision floating-point numeric value of a feature flag for a given context. Declaration public float FloatVariation(string key, Context context, float defaultValue) Parameters Type Name Description string key the unique feature key for the feature flag Context context the evaluation context float defaultValue the default value of the flag Returns Type Description float the variation for the given context, or defaultValue if the flag cannot be evaluated Remarks If the flag variation does not have a numeric value, defaultValue is returned. If an error makes it impossible to evaluate the flag (for instance, the feature flag key does not match any existing flag), defaultValue is returned. See Also FloatVariationDetail(string, Context, float) DoubleVariation(string, Context, double) | Edit this page View Source FloatVariationDetail(string, Context, float) Calculates the single-precision floating-point numeric value of a feature flag for a given context, and returns an object that describes the way the value was determined. Declaration public EvaluationDetail<float> FloatVariationDetail(string key, Context context, float defaultValue) Parameters Type Name Description string key the unique feature key for the feature flag Context context the evaluation context float defaultValue the default value of the flag Returns Type Description EvaluationDetail<float> an EvaluationDetail<T> object Remarks The Reason property in the result will also be included in analytics events, if you are capturing detailed event data for this flag. The behavior is otherwise identical to FloatVariation(string, Context, float). See Also FloatVariation(string, Context, float) DoubleVariationDetail(string, Context, double) | Edit this page View Source Flush() Tells the client that all pending analytics events (if any) should be delivered as soon as possible. Declaration public void Flush() Remarks This flush is asynchronous, so this method will return before it is complete. To wait for the flush to complete, use FlushAndWait(TimeSpan) instead (or, if you are done with the SDK, Dispose()). For more information, see: Flushing Events. See Also FlushAndWait(TimeSpan) | Edit this page View Source FlushAndWait(TimeSpan) Tells the client to deliver any pending analytics events synchronously now. Declaration public bool FlushAndWait(TimeSpan timeout) Parameters Type Name Description TimeSpan timeout the maximum time to wait Returns Type Description bool true if completed, false if timed out Remarks Unlike Flush(), this method waits for event delivery to finish. The timeout parameter, if greater than zero, specifies the maximum amount of time to wait. If the timeout elapses before delivery is finished, the method returns early and returns false; in this case, the SDK may still continue trying to deliver the events in the background. If the timeout parameter is zero or negative, the method waits as long as necessary to deliver the events. However, the SDK does not retry event delivery indefinitely; currently, any network error or server error will cause the SDK to wait one second and retry one time, after which the events will be discarded so that the SDK will not keep consuming more memory for events indefinitely. The method returns true if event delivery either succeeded, or definitively failed, before the timeout elapsed. It returns false if the timeout elapsed. This method is also implicitly called if you call Dispose(). The difference is that FlushAndWait does not shut down the SDK client. For more information, see: Flushing Events. See Also Flush() | Edit this page View Source GetLogger() Returns the logger instance used by this SDK instance. Declaration public Logger GetLogger() Returns Type Description Logger the logger instance used by the SDK Remarks This allows for access to the logger by other LaunchDarkly components, such as the Migration class. It also allows for usage of the logger in wrapper implementations. It is not intended for general purpose application logging. | Edit this page View Source Identify(Context) Reports details about an evaluation context. Declaration public void Identify(Context context) Parameters Type Name Description Context context the evaluation context Remarks This method simply creates an analytics event containing the context attributes, to that LaunchDarkly will know about that context if it does not already. Calling any evaluation method, such as BoolVariation(string, Context, bool), also sends the context information to LaunchDarkly (if events are enabled), so you only need to use Identify(Context) if you want to identify the context without evaluating a flag. Note that event delivery is asynchronous, so the event may not actually be sent until later; see Flush(). For more information, see the Reference Guide. | Edit this page View Source IntVariation(string, Context, int) Calculates the integer value of a feature flag for a given context. Declaration public int IntVariation(string key, Context context, int defaultValue) Parameters Type Name Description string key the unique feature key for the feature flag Context context the evaluation context int defaultValue the default value of the flag Returns Type Description int the variation for the given context, or defaultValue if the flag cannot be evaluated Remarks If the flag variation has a numeric value that is not an integer, it is rounded to the nearest integer. This rounding behavior may be changed in a future version of the SDK (for instance, to round toward zero like the usual float-to-int conversion in C#), so you should avoid relying on it. If the flag variation does not have a numeric value, defaultValue is returned. If an error makes it impossible to evaluate the flag (for instance, the feature flag key does not match any existing flag), defaultValue is returned. See Also IntVariationDetail(string, Context, int) | Edit this page View Source IntVariationDetail(string, Context, int) Calculates the integer value of a feature flag for a given context, and returns an object that describes the way the value was determined. Declaration public EvaluationDetail<int> IntVariationDetail(string key, Context context, int defaultValue) Parameters Type Name Description string key the unique feature key for the feature flag Context context the evaluation context int defaultValue the default value of the flag Returns Type Description EvaluationDetail<int> an EvaluationDetail<T> object Remarks The Reason property in the result will also be included in analytics events, if you are capturing detailed event data for this flag. The behavior is otherwise identical to IntVariation(string, Context, int). See Also IntVariation(string, Context, int) | Edit this page View Source IsOffline() Returns true if the client has been configured to be offline. Declaration public bool IsOffline() Returns Type Description bool true if the client is configured to be offline Remarks This value will be static for the execution of a client. If you want active data source status for an online client, then use DataSourceStatusProvider. | Edit this page View Source JsonVariation(string, Context, LdValue) Calculates the value of a feature flag for a given context as any JSON value type. Declaration public LdValue JsonVariation(string key, Context context, LdValue defaultValue) Parameters Type Name Description string key the unique feature key for the feature flag Context context the evaluation context LdValue defaultValue the default value of the flag Returns Type Description LdValue the variation for the given context, or defaultValue if the flag cannot be evaluated Remarks The type LdValue is used to represent any of the value types that can exist in JSON. Use LdValue methods to examine its type and value. If an error makes it impossible to evaluate the flag (for instance, the feature flag key does not match any existing flag), defaultValue is returned. See Also JsonVariationDetail(string, Context, LdValue) | Edit this page View Source JsonVariationDetail(string, Context, LdValue) Calculates the value of a feature flag for a given context as any JSON value type, and returns an object that describes the way the value was determined. Declaration public EvaluationDetail<LdValue> JsonVariationDetail(string key, Context context, LdValue defaultValue) Parameters Type Name Description string key the unique feature key for the feature flag Context context the evaluation context LdValue defaultValue the default value of the flag Returns Type Description EvaluationDetail<LdValue> an EvaluationDetail<T> object Remarks The Reason property in the result will also be included in analytics events, if you are capturing detailed event data for this flag. The behavior is otherwise identical to JsonVariationDetail(string, Context, LdValue). See Also JsonVariation(string, Context, LdValue) | Edit this page View Source MigrationVariation(string, Context, MigrationStage) Returns the migration stage of the migration feature flag for the given evaluation context. Declaration public MigrationVariation MigrationVariation(string key, Context context, MigrationStage defaultStage) Parameters Type Name Description string key the unique feature key for the feature flag Context context the evaluation context MigrationStage defaultStage the default value of the flag Returns Type Description MigrationVariation an MigrationVariation(string, Context, MigrationStage) object | Edit this page View Source SecureModeHash(Context) Creates a hash string that can be used by the JavaScript SDK to identify a context. Declaration public string SecureModeHash(Context context) Parameters Type Name Description Context context the evaluation context Returns Type Description string the hash, or null if the hash could not be calculated Remarks See Secure mode in the JavaScript SDK Reference. | Edit this page View Source StringVariation(string, Context, string) Calculates the string value of a feature flag for a given context. Declaration public string StringVariation(string key, Context context, string defaultValue) Parameters Type Name Description string key the unique feature key for the feature flag Context context the evaluation context string defaultValue the default value of the flag Returns Type Description string the variation for the given context, or defaultValue if the flag cannot be evaluated Remarks If the flag variation does not have a string value, defaultValue is returned. Normally, the string value of a flag should not be null, since the LaunchDarkly UI does not allow you to assign a null value to a flag variation. However, since it may be possible to create a feature flag with a null variation by other means, and also since defaultValue is nullable, you should assume that the return value might be null. See Also StringVariationDetail(string, Context, string) | Edit this page View Source StringVariationDetail(string, Context, string) Calculates the string value of a feature flag for a given context, and returns an object that describes the way the value was determined. Declaration public EvaluationDetail<string> StringVariationDetail(string key, Context context, string defaultValue) Parameters Type Name Description string key the unique feature key for the feature flag Context context the evaluation context string defaultValue the default value of the flag Returns Type Description EvaluationDetail<string> an EvaluationDetail<T> object Remarks The Reason property in the result will also be included in analytics events, if you are capturing detailed event data for this flag. The behavior is otherwise identical to StringVariation(string, Context, string). See Also StringVariation(string, Context, string) | Edit this page View Source Track(string, Context) Tracks that an application-defined event occurred. Declaration public void Track(string name, Context context) Parameters Type Name Description string name the name of the event Context context the evaluation context associated with the event Remarks This method creates a \"custom\" analytics event containing the specified event name (key) and context attributes. You may attach arbitrary data to the event by calling Track(string, Context, LdValue) instead. Note that event delivery is asynchronous, so the event may not actually be sent until later; see Flush(). See Also Track(string, Context, LdValue) Track(string, Context, LdValue, double) | Edit this page View Source Track(string, Context, LdValue) Tracks that an application-defined event occurred. Declaration public void Track(string name, Context context, LdValue data) Parameters Type Name Description string name the name of the event Context context the evaluation context associated with the event LdValue data additional data associated with the event, if any Remarks This method creates a \"custom\" analytics event containing the specified event name (key), context properties, and optional custom data. If you do not need custom data, pass Null for the last parameter or simply omit the parameter. Note that event delivery is asynchronous, so the event may not actually be sent until later; see Flush(). See Also Track(string, Context) Track(string, Context, LdValue, double) Track(string, Context, LdValue) | Edit this page View Source Track(string, Context, LdValue, double) Tracks that an application-defined event occurred, and provides an additional numeric value for custom metrics. Declaration public void Track(string name, Context context, LdValue data, double metricValue) Parameters Type Name Description string name the name of the event Context context the evaluation context associated with the event LdValue data additional data associated with the event; use Null if not applicable double metricValue a numeric value used by the LaunchDarkly experimentation feature in numeric custom metrics Remarks This value is used by the LaunchDarkly experimentation feature in numeric custom metrics, and will also be returned as part of the custom event for Data Export. Note that event delivery is asynchronous, so the event may not actually be sent until later; see Flush(). See Also Track(string, Context) Track(string, Context, LdValue) | Edit this page View Source TrackMigration(MigrationOpTracker) Track the details of a migration. Declaration public void TrackMigration(MigrationOpTracker tracker) Parameters Type Name Description MigrationOpTracker tracker migration tracker which was used to track the details of a migration Implements IDisposable ILdClient Extension Methods ILdClientExtensions.EnumVariationDetail<T>(ILdClient, string, Context, T) ILdClientExtensions.EnumVariation<T>(ILdClient, string, Context, T)"
  },
  "api/LaunchDarkly.Sdk.Server.Migrations.IMigration-4.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Migrations.IMigration-4.html",
    "title": "Interface IMigration<TReadResult, TWriteResult, TReadInput, TWriteInput> | LaunchDarkly Dotnet Server SDK",
    "keywords": "Interface IMigration<TReadResult, TWriteResult, TReadInput, TWriteInput> Interface for managing technology migrations Namespace: LaunchDarkly.Sdk.Server.Migrations Assembly: LaunchDarkly.ServerSdk.dll Syntax public interface IMigration<TReadResult, TWriteResult, in TReadInput, in TWriteInput> where TReadResult : class where TWriteResult : class Type Parameters Name Description TReadResult the result type for reads TWriteResult the result type for writes TReadInput the input types for reads TWriteInput the input type for writes Methods | Edit this page View Source Read(string, Context, MigrationStage) Execute a migration based read. Declaration MigrationResult<TReadResult> Read(string flagKey, Context context, MigrationStage defaultStage) Parameters Type Name Description string flagKey the flag key of migration flag Context context the context for the migration MigrationStage defaultStage the default migration stage Returns Type Description MigrationResult<TReadResult> the result of the read Remarks To execute a read with a payload use Read(string, Context, MigrationStage, TReadInput). When no payload is provided a default value will be used for the payload. | Edit this page View Source Read(string, Context, MigrationStage, TReadInput) Execute a migration based read with a payload. Declaration MigrationResult<TReadResult> Read(string flagKey, Context context, MigrationStage defaultStage, TReadInput payload) Parameters Type Name Description string flagKey the flag key of migration flag Context context the context for the migration MigrationStage defaultStage the default migration stage TReadInput payload payload that will be passed to the new/old read implementations Returns Type Description MigrationResult<TReadResult> the result of the read Remarks To execute a read without a payload use Read(string, Context, MigrationStage). | Edit this page View Source Write(string, Context, MigrationStage) Execute a migration based write. Declaration MigrationWriteResult<TWriteResult> Write(string flagKey, Context context, MigrationStage defaultStage) Parameters Type Name Description string flagKey the flag key of migration flag Context context the context for the migration MigrationStage defaultStage the default migration stage Returns Type Description MigrationWriteResult<TWriteResult> the result of the write operation Remarks To execute a write with a payload use Write(string, Context, MigrationStage, TWriteInput). When no payload is provided a default value will be used for the payload. | Edit this page View Source Write(string, Context, MigrationStage, TWriteInput) Execute a migration based write with a payload. Declaration MigrationWriteResult<TWriteResult> Write(string flagKey, Context context, MigrationStage defaultStage, TWriteInput payload) Parameters Type Name Description string flagKey the flag key of migration flag Context context the context for the migration MigrationStage defaultStage the default migration stage TWriteInput payload payload that will be passed to the new/old write implementations Returns Type Description MigrationWriteResult<TWriteResult> the result of the write operation Remarks To execute a write without a payload use Write(string, Context, MigrationStage)."
  },
  "api/LaunchDarkly.Sdk.Server.Migrations.MigrationBuilder-4.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Migrations.MigrationBuilder-4.html",
    "title": "Class MigrationBuilder<TReadResult, TWriteResult, TReadInput, TWriteInput> | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class MigrationBuilder<TReadResult, TWriteResult, TReadInput, TWriteInput> This builder is used to construct Migration<TReadResult, TWriteResult, TReadInput, TWriteInput> instances. Inheritance object MigrationBuilder<TReadResult, TWriteResult, TReadInput, TWriteInput> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server.Migrations Assembly: LaunchDarkly.ServerSdk.dll Syntax public sealed class MigrationBuilder<TReadResult, TWriteResult, TReadInput, TWriteInput> where TReadResult : class where TWriteResult : class Type Parameters Name Description TReadResult the result type for reads TWriteResult the result type for writes TReadInput the input types for reads TWriteInput the input type for writes Remarks This class is not thread-safe. The builder should be used on one thread and then the built Migration<TReadResult, TWriteResult, TReadInput, TWriteInput> is thread safe. Constructors | Edit this page View Source MigrationBuilder(ILdClient) Construct a migration builder. Declaration public MigrationBuilder(ILdClient client) Parameters Type Name Description ILdClient client the client to use for migrations Methods | Edit this page View Source Build() Build a Migration<TReadResult, TWriteResult, TReadInput, TWriteInput>. Declaration public IMigration<TReadResult, TWriteResult, TReadInput, TWriteInput> Build() Returns Type Description IMigration<TReadResult, TWriteResult, TReadInput, TWriteInput> a build migration or null if a migration could not be built Remarks A migration requires that both the read and write methods are defined. If they have not been defined, then a migration cannot be constructed. In this case an empty optional will be returned. | Edit this page View Source Read(Func<TReadInput, Result<TReadResult>>, Func<TReadInput, Result<TReadResult>>) Configure the read methods of the migration. Declaration public MigrationBuilder<TReadResult, TWriteResult, TReadInput, TWriteInput> Read(Func<TReadInput, MigrationMethod.Result<TReadResult>> readOld, Func<TReadInput, MigrationMethod.Result<TReadResult>> readNew) Parameters Type Name Description Func<TReadInput, MigrationMethod.Result<TReadResult>> readOld method for reading from the \"old\" migration source Func<TReadInput, MigrationMethod.Result<TReadResult>> readNew method for reading from the \"new\" migration source Returns Type Description MigrationBuilder<TReadResult, TWriteResult, TReadInput, TWriteInput> a reference to this builder Remarks Users are required to provide two different read methods -- one to read from the old migration source, and one to read from the new source. This method does not enable consistency tracking. If you do want consistency tracking, then use Read(Func<TReadInput, Result<TReadResult>>, Func<TReadInput, Result<TReadResult>>, Func<TReadResult, TReadResult, bool>). | Edit this page View Source Read(Func<TReadInput, Result<TReadResult>>, Func<TReadInput, Result<TReadResult>>, Func<TReadResult, TReadResult, bool>) Configure the read methods of the migration. Declaration public MigrationBuilder<TReadResult, TWriteResult, TReadInput, TWriteInput> Read(Func<TReadInput, MigrationMethod.Result<TReadResult>> readOld, Func<TReadInput, MigrationMethod.Result<TReadResult>> readNew, Func<TReadResult, TReadResult, bool> check) Parameters Type Name Description Func<TReadInput, MigrationMethod.Result<TReadResult>> readOld method for reading from the \"old\" migration source Func<TReadInput, MigrationMethod.Result<TReadResult>> readNew method for reading from the \"new\" migration source Func<TReadResult, TReadResult, bool> check method which checks the consistency of the \"old\" and \"new\" source Returns Type Description MigrationBuilder<TReadResult, TWriteResult, TReadInput, TWriteInput> a reference to this builder Remarks Users are required to provide two different read methods -- one to read from the old migration source, and one to read from the new source. This method allows specifying a check method for consistency tracking. If you do not want consistency tracking, then use Read(Func<TReadInput, Result<TReadResult>>, Func<TReadInput, Result<TReadResult>>). | Edit this page View Source ReadExecution(MigrationExecution) Influences the level of concurrency when the migration stage calls for multiple execution reads. Declaration public MigrationBuilder<TReadResult, TWriteResult, TReadInput, TWriteInput> ReadExecution(MigrationExecution execution) Parameters Type Name Description MigrationExecution execution the execution configuration Returns Type Description MigrationBuilder<TReadResult, TWriteResult, TReadInput, TWriteInput> a reference to this builder Remarks The default read execution is Parallel(). Setting the execution to randomized serial order. var builder = new MigrationBuilder<string, string, string, string>() .ReadExecution(MigrationExecution.Serial(MigrationSerialOrder.Random)) | Edit this page View Source TrackErrors(bool) Enable or disable error tracking. Tracking is enabled by default. Declaration public MigrationBuilder<TReadResult, TWriteResult, TReadInput, TWriteInput> TrackErrors(bool trackErrors) Parameters Type Name Description bool trackErrors true to enable error tracking, false to disable it Returns Type Description MigrationBuilder<TReadResult, TWriteResult, TReadInput, TWriteInput> a reference to this builder | Edit this page View Source TrackLatency(bool) Enable or disable latency tracking. Tracking is enabled by default. Declaration public MigrationBuilder<TReadResult, TWriteResult, TReadInput, TWriteInput> TrackLatency(bool trackLatency) Parameters Type Name Description bool trackLatency true to enable tracking, false to disable it Returns Type Description MigrationBuilder<TReadResult, TWriteResult, TReadInput, TWriteInput> a reference to this builder | Edit this page View Source Write(Func<TWriteInput, Result<TWriteResult>>, Func<TWriteInput, Result<TWriteResult>>) Configure the write methods of the migration. Declaration public MigrationBuilder<TReadResult, TWriteResult, TReadInput, TWriteInput> Write(Func<TWriteInput, MigrationMethod.Result<TWriteResult>> writeOld, Func<TWriteInput, MigrationMethod.Result<TWriteResult>> writeNew) Parameters Type Name Description Func<TWriteInput, MigrationMethod.Result<TWriteResult>> writeOld method which writes to the \"old\" source Func<TWriteInput, MigrationMethod.Result<TWriteResult>> writeNew method which writes to the \"new\" source Returns Type Description MigrationBuilder<TReadResult, TWriteResult, TReadInput, TWriteInput> a reference to this builder Remarks Users are required to provide two different write methods -- one to write to the old migration source, and one to write to the new source. Not every stage requires"
  },
  "api/LaunchDarkly.Sdk.Server.Migrations.MigrationExecution.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Migrations.MigrationExecution.html",
    "title": "Struct MigrationExecution | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct MigrationExecution This class is used to control the execution mechanism for migrations. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk.Server.Migrations Assembly: LaunchDarkly.ServerSdk.dll Syntax public readonly struct MigrationExecution Remarks Read operations may be executed in parallel, sequentially in a fixed order, or sequentially in a randomized order. This class facilitates correct combinations of parallel/serial with random/fixed. Properties | Edit this page View Source Mode The execution mode to use for a migration. Declaration public MigrationExecutionMode Mode { get; } Property Value Type Description MigrationExecutionMode | Edit this page View Source Order If the execution mode is serial, then this indicates if it should be in a random or fixed order. Declaration public MigrationSerialOrder Order { get; } Property Value Type Description MigrationSerialOrder Methods | Edit this page View Source Parallel() Construct a parallel execution. Declaration public static MigrationExecution Parallel() Returns Type Description MigrationExecution a migration execution instance | Edit this page View Source Serial(MigrationSerialOrder) Construct a serial execution with the specified ordering. Declaration public static MigrationExecution Serial(MigrationSerialOrder order) Parameters Type Name Description MigrationSerialOrder order the serial execution order fixed/random Returns Type Description MigrationExecution a migration execution instance | Edit this page View Source ToString() Produce a string representation. This is intended for informational purposes only and subject to change. Declaration public override string ToString() Returns Type Description string a string representation Overrides ValueType.ToString()"
  },
  "api/LaunchDarkly.Sdk.Server.Migrations.MigrationExecutionMode.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Migrations.MigrationExecutionMode.html",
    "title": "Enum MigrationExecutionMode | LaunchDarkly Dotnet Server SDK",
    "keywords": "Enum MigrationExecutionMode Execution mode for a migration. Namespace: LaunchDarkly.Sdk.Server.Migrations Assembly: LaunchDarkly.ServerSdk.dll Syntax public enum MigrationExecutionMode Remarks This applies only to a single read operation, not multiple reads using the same migration. Fields Name Description Parallel Start reads in parallel and wait for them to both finish. Serial Execute one read fully before executing another read."
  },
  "api/LaunchDarkly.Sdk.Server.Migrations.MigrationMethod.Result-1.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Migrations.MigrationMethod.Result-1.html",
    "title": "Struct MigrationMethod.Result<TResult> | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct MigrationMethod.Result<TResult> Results of a method associated with a migration origin. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk.Server.Migrations Assembly: LaunchDarkly.ServerSdk.dll Syntax public readonly struct MigrationMethod.Result<TResult> where TResult : class Type Parameters Name Description TResult the type of the result Properties | Edit this page View Source Exception Any exception which happened for the operation. Will not be set if the result was successful. Declaration public Exception Exception { get; } Property Value Type Description Exception | Edit this page View Source IsSuccessful True if the result was a success. Declaration public bool IsSuccessful { get; } Property Value Type Description bool | Edit this page View Source Value The value of a successful result. Declaration public TResult Value { get; } Property Value Type Description TResult Remarks A failed result will not set the value."
  },
  "api/LaunchDarkly.Sdk.Server.Migrations.MigrationMethod.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Migrations.MigrationMethod.html",
    "title": "Class MigrationMethod | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class MigrationMethod Static class for creation MigrationMethod.Result<TResult> instances. Inheritance object MigrationMethod Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server.Migrations Assembly: LaunchDarkly.ServerSdk.dll Syntax public static class MigrationMethod Methods | Edit this page View Source Failure<TResult>() Construct a method result representing a failure. Declaration public static MigrationMethod.Result<TResult> Failure<TResult>() where TResult : class Returns Type Description MigrationMethod.Result<TResult> the failed result Type Parameters Name Description TResult the type of the result Remarks This method doesn't provide any information about the cause of the failure. It is recommended to throw an exception or use Failure<TResult>(Exception). | Edit this page View Source Failure<TResult>(Exception) Construct a method result representing a failure based on an Exception. Declaration public static MigrationMethod.Result<TResult> Failure<TResult>(Exception exception) where TResult : class Parameters Type Name Description Exception exception the exception which occurred during method execution Returns Type Description MigrationMethod.Result<TResult> the failed result Type Parameters Name Description TResult the type of the result | Edit this page View Source Success<TResult>(TResult) Construct a successful result. Declaration public static MigrationMethod.Result<TResult> Success<TResult>(TResult result) where TResult : class Parameters Type Name Description TResult result the value of the result Returns Type Description MigrationMethod.Result<TResult> the successful result Type Parameters Name Description TResult the type of the result"
  },
  "api/LaunchDarkly.Sdk.Server.Migrations.MigrationOpTracker.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Migrations.MigrationOpTracker.html",
    "title": "Class MigrationOpTracker | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class MigrationOpTracker Used to track information related to a migration operation. Inheritance object MigrationOpTracker Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server.Migrations Assembly: LaunchDarkly.ServerSdk.dll Syntax public sealed class MigrationOpTracker Methods | Edit this page View Source Consistency(Func<bool>) Check the consistency of a read result. This method should be invoked if the check function is defined for the migration and both reads (\"new\"/\"old\") were done. Declaration public void Consistency(Func<bool> checker) Parameters Type Name Description Func<bool> checker check method which returns true if the results were consistent Remarks If the consistency check function throws an exception, then no measurement for consistency will be included in the generated migration op event. Example calling the check function from the migration config. if (checker != null && oldResult.IsSuccessful && newResult.IsSuccessful ) { tracker.Consistency(() =&gt; checker(oldResult.Result, oldResult.Result)); } | Edit this page View Source Error(MigrationOrigin) Report that an error has occurred for the specified origin. Declaration public void Error(MigrationOrigin origin) Parameters Type Name Description MigrationOrigin origin the origin of the error | Edit this page View Source Invoked(MigrationOrigin) Call this to report that an origin was invoked (executed). There are some situations where the expectation is that both the old and new implementation will be used, but with writes it is possible that the non-authoritative will not execute. Reporting the execution allows for more accurate analytics. Declaration public void Invoked(MigrationOrigin origin) Parameters Type Name Description MigrationOrigin origin the origin that was invoked | Edit this page View Source Latency(MigrationOrigin, TimeSpan) Report the latency of an operation. Declaration public void Latency(MigrationOrigin origin, TimeSpan duration) Parameters Type Name Description MigrationOrigin origin the origin the latency is being reported for TimeSpan duration the latency of the operation | Edit this page View Source Op(MigrationOperation) Sets the migration related operation associated with these tracking measurements. Declaration public void Op(MigrationOperation operation) Parameters Type Name Description MigrationOperation operation the operation being tracked"
  },
  "api/LaunchDarkly.Sdk.Server.Migrations.MigrationOperation.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Migrations.MigrationOperation.html",
    "title": "Enum MigrationOperation | LaunchDarkly Dotnet Server SDK",
    "keywords": "Enum MigrationOperation The type of migration operation. Namespace: LaunchDarkly.Sdk.Server.Migrations Assembly: LaunchDarkly.ServerSdk.dll Syntax public enum MigrationOperation Fields Name Description Read A read operation. Write A write operation. Extension Methods MigrationOperationExtensions.ToDataModelString(MigrationOperation)"
  },
  "api/LaunchDarkly.Sdk.Server.Migrations.MigrationOperationExtensions.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Migrations.MigrationOperationExtensions.html",
    "title": "Class MigrationOperationExtensions | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class MigrationOperationExtensions Extension methods for migration operations. Inheritance object MigrationOperationExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server.Migrations Assembly: LaunchDarkly.ServerSdk.dll Syntax public static class MigrationOperationExtensions Methods | Edit this page View Source FromDataModelString(string) Convert a string value into an operation. Declaration public static MigrationOperation? FromDataModelString(string stringOperation) Parameters Type Name Description string stringOperation the operation as a string Returns Type Description MigrationOperation? a migration operation, or null if it cannot be converted | Edit this page View Source ToDataModelString(MigrationOperation) Get a string value for an operation. Declaration public static string ToDataModelString(this MigrationOperation operation) Parameters Type Name Description MigrationOperation operation the operation to get a string value for Returns Type Description string a string for the migration operation Remarks This is a string value that matches that in the data model."
  },
  "api/LaunchDarkly.Sdk.Server.Migrations.MigrationOrigin.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Migrations.MigrationOrigin.html",
    "title": "Enum MigrationOrigin | LaunchDarkly Dotnet Server SDK",
    "keywords": "Enum MigrationOrigin The origin/source for a migration step. Namespace: LaunchDarkly.Sdk.Server.Migrations Assembly: LaunchDarkly.ServerSdk.dll Syntax public enum MigrationOrigin Fields Name Description New Originates from the \"new\" implementation. Old Originates from the \"old\" implementation. Extension Methods MigrationOriginExtensions.ToDataModelString(MigrationOrigin)"
  },
  "api/LaunchDarkly.Sdk.Server.Migrations.MigrationOriginExtensions.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Migrations.MigrationOriginExtensions.html",
    "title": "Class MigrationOriginExtensions | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class MigrationOriginExtensions Extension methods for migration origins. Inheritance object MigrationOriginExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server.Migrations Assembly: LaunchDarkly.ServerSdk.dll Syntax public static class MigrationOriginExtensions Methods | Edit this page View Source FromDataModelString(string) Convert a string value into an origin. Declaration public static MigrationOrigin? FromDataModelString(string stringOrigin) Parameters Type Name Description string stringOrigin the origin as a string Returns Type Description MigrationOrigin? a migration origin, or null if it cannot be converted | Edit this page View Source ToDataModelString(MigrationOrigin) Get a string value for an origin. Declaration public static string ToDataModelString(this MigrationOrigin origin) Parameters Type Name Description MigrationOrigin origin the origin to get a string value for Returns Type Description string a string for the migration origin Remarks This is a string value that matches that in the data model."
  },
  "api/LaunchDarkly.Sdk.Server.Migrations.MigrationResult-1.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Migrations.MigrationResult-1.html",
    "title": "Struct MigrationResult<TResult> | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct MigrationResult<TResult> This class represents the result of a migration operation. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk.Server.Migrations Assembly: LaunchDarkly.ServerSdk.dll Syntax public struct MigrationResult<TResult> where TResult : class Type Parameters Name Description TResult the type of the result Remarks In the case of a read operation the result will be this type. Write operations may need to return multiple results and therefore use the MigrationWriteResult<TResult> type. Properties | Edit this page View Source Exception Any exception which happened for the operation. Will not be set if the result was successful. Declaration public Exception Exception { get; } Property Value Type Description Exception | Edit this page View Source IsSuccessful True if the result was a success. Declaration public bool IsSuccessful { get; } Property Value Type Description bool | Edit this page View Source Origin The origin of the result. Declaration public MigrationOrigin Origin { get; } Property Value Type Description MigrationOrigin | Edit this page View Source Value The value of a successful result. Declaration public TResult Value { get; } Property Value Type Description TResult Remarks A failed result will not set the value."
  },
  "api/LaunchDarkly.Sdk.Server.Migrations.MigrationSerialOrder.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Migrations.MigrationSerialOrder.html",
    "title": "Enum MigrationSerialOrder | LaunchDarkly Dotnet Server SDK",
    "keywords": "Enum MigrationSerialOrder When using serial execution controls the order reads are executed. Namespace: LaunchDarkly.Sdk.Server.Migrations Assembly: LaunchDarkly.ServerSdk.dll Syntax public enum MigrationSerialOrder Fields Name Description Fixed Always execute reads in the same order. Random Each time a read is performed randomize the order."
  },
  "api/LaunchDarkly.Sdk.Server.Migrations.MigrationStage.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Migrations.MigrationStage.html",
    "title": "Enum MigrationStage | LaunchDarkly Dotnet Server SDK",
    "keywords": "Enum MigrationStage Stage denotes one of six possible stages a technology migration could be a part of, progressing through the following order. Off DualWrite Shadow Live RampDown Complete Namespace: LaunchDarkly.Sdk.Server.Migrations Assembly: LaunchDarkly.ServerSdk.dll Syntax public enum MigrationStage Fields Name Description Complete Complete - migration is done. DualWrite DualWrite - write to both \"old\" and \"new\", \"old\" is authoritative for reads. Live Live - both \"new\" and \"old\" versions run with a preference for \"new\". Off Off - migration hasn't started, \"old\" is authoritative for reads and writes. RampDown RampDown - only read from \"new\", write to \"old\" and \"new\". Shadow Shadow - both \"new\" and \"old\" versions run with a preference for \"old\". Extension Methods MigrationStageExtensions.ToDataModelString(MigrationStage)"
  },
  "api/LaunchDarkly.Sdk.Server.Migrations.MigrationStageExtensions.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Migrations.MigrationStageExtensions.html",
    "title": "Class MigrationStageExtensions | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class MigrationStageExtensions Extension methods for migration stages. Inheritance object MigrationStageExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server.Migrations Assembly: LaunchDarkly.ServerSdk.dll Syntax public static class MigrationStageExtensions Methods | Edit this page View Source FromDataModelString(string) Convert a string value into a stage. Declaration public static MigrationStage? FromDataModelString(string stringStage) Parameters Type Name Description string stringStage Returns Type Description MigrationStage? a migration stage, or null if it cannot be converted | Edit this page View Source ToDataModelString(MigrationStage) Get a string value for a stage. Declaration public static string ToDataModelString(this MigrationStage stage) Parameters Type Name Description MigrationStage stage the stage to get a string value for Returns Type Description string a string for the migration stage Remarks This is a string value that matches that in the data model."
  },
  "api/LaunchDarkly.Sdk.Server.Migrations.MigrationVariation.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Migrations.MigrationVariation.html",
    "title": "Struct MigrationVariation | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct MigrationVariation The result of an MigrationVariation call. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk.Server.Migrations Assembly: LaunchDarkly.ServerSdk.dll Syntax public readonly struct MigrationVariation Properties | Edit this page View Source Stage The result of the flag evaluation. This will be either one of the flag's variations or the default value that was passed to MigrationVariation. Declaration public MigrationStage Stage { get; } Property Value Type Description MigrationStage | Edit this page View Source Tracker A tracker which can be used to generate analytics for the migration. Declaration public MigrationOpTracker Tracker { get; } Property Value Type Description MigrationOpTracker Methods | Edit this page View Source Deconstruct(out MigrationStage, out MigrationOpTracker) Deconstruct the MigrationVariation into the stage and tracker. Declaration public void Deconstruct(out MigrationStage stage, out MigrationOpTracker tracker) Parameters Type Name Description MigrationStage stage the stage of the variation MigrationOpTracker tracker the tracker for the variation Remarks var (stage, tracker) = client.MigrationVariation(flagKey, context, defaultStage);"
  },
  "api/LaunchDarkly.Sdk.Server.Migrations.MigrationWriteResult-1.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Migrations.MigrationWriteResult-1.html",
    "title": "Class MigrationWriteResult<TResult> | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class MigrationWriteResult<TResult> The result of a migration write. Inheritance object MigrationWriteResult<TResult> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server.Migrations Assembly: LaunchDarkly.ServerSdk.dll Syntax public class MigrationWriteResult<TResult> where TResult : class Type Parameters Name Description TResult the type of the result Remarks A migration write result will always include an authoritative result, and it may contain a non-authoritative result. Not all migration stages will execute both writes, and in the case of a write error from the authoritative source then the non-authoritative write will not be executed. Properties | Edit this page View Source Authoritative The authoritative result of the write. Declaration public MigrationResult<TResult> Authoritative { get; } Property Value Type Description MigrationResult<TResult> | Edit this page View Source NonAuthoritative The non-authoritative result of the write. Declaration public MigrationResult<TResult>? NonAuthoritative { get; } Property Value Type Description MigrationResult<TResult>?"
  },
  "api/LaunchDarkly.Sdk.Server.Migrations.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Migrations.html",
    "title": "Namespace LaunchDarkly.Sdk.Server.Migrations | LaunchDarkly Dotnet Server SDK",
    "keywords": "Namespace LaunchDarkly.Sdk.Server.Migrations Classes MigrationBuilder<TReadResult, TWriteResult, TReadInput, TWriteInput> This builder is used to construct Migration<TReadResult, TWriteResult, TReadInput, TWriteInput> instances. MigrationMethod Static class for creation MigrationMethod.Result<TResult> instances. MigrationOpTracker Used to track information related to a migration operation. MigrationOperationExtensions Extension methods for migration operations. MigrationOriginExtensions Extension methods for migration origins. MigrationStageExtensions Extension methods for migration stages. MigrationWriteResult<TResult> The result of a migration write. Structs MigrationExecution This class is used to control the execution mechanism for migrations. MigrationMethod.Result<TResult> Results of a method associated with a migration origin. MigrationResult<TResult> This class represents the result of a migration operation. MigrationVariation The result of an MigrationVariation call. Interfaces IMigration<TReadResult, TWriteResult, TReadInput, TWriteInput> Interface for managing technology migrations Enums MigrationExecutionMode Execution mode for a migration. MigrationOperation The type of migration operation. MigrationOrigin The origin/source for a migration step. MigrationSerialOrder When using serial execution controls the order reads are executed. MigrationStage Stage denotes one of six possible stages a technology migration could be a part of, progressing through the following order. Off DualWrite Shadow Live RampDown Complete"
  },
  "api/LaunchDarkly.Sdk.Server.Subsystems.BigSegmentStoreTypes.IMembership.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Subsystems.BigSegmentStoreTypes.IMembership.html",
    "title": "Interface BigSegmentStoreTypes.IMembership | LaunchDarkly Dotnet Server SDK",
    "keywords": "Interface BigSegmentStoreTypes.IMembership A query interface returned by GetMembershipAsync(string). Namespace: LaunchDarkly.Sdk.Server.Subsystems Assembly: LaunchDarkly.ServerSdk.dll Syntax public interface BigSegmentStoreTypes.IMembership Remarks It is associated with a single context, and provides the ability to check whether that context is included in or excluded from any number of Big Segments. This is an immutable snapshot of the state for this context at the time GetMembershipAsync(string) was called. Calling CheckMembership(string) should not cause the state to be queried again. The object should be safe for concurrent access by multiple threads. Methods | Edit this page View Source CheckMembership(string) Tests whether the context is explicitly included or explicitly excluded in the specified segment, or neither. Declaration bool? CheckMembership(string segmentRef) Parameters Type Name Description string segmentRef a string representing the segment query Returns Type Description bool? true/false membership state, or null if unspecified Remarks The segment is identified by a segmentRef which is not the same as the segment key: it includes the key but also versioning information that the SDK will provide. The store implementation should not be concerned with the format of this. If the context is explicitly included (regardless of whether the context is also explicitly excluded or not-- that is, inclusion takes priority over exclusion), the method returns a true value. If the context is explicitly excluded, and is not explicitly included, the method returns a false value. If the context's status in the segment is undefined, the method returns null. See Also NewMembershipFromSegmentRefs(IEnumerable<string>, IEnumerable<string>)"
  },
  "api/LaunchDarkly.Sdk.Server.Subsystems.BigSegmentStoreTypes.StoreMetadata.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Subsystems.BigSegmentStoreTypes.StoreMetadata.html",
    "title": "Struct BigSegmentStoreTypes.StoreMetadata | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct BigSegmentStoreTypes.StoreMetadata Values returned by GetMetadataAsync(). Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk.Server.Subsystems Assembly: LaunchDarkly.ServerSdk.dll Syntax public struct BigSegmentStoreTypes.StoreMetadata Properties | Edit this page View Source LastUpToDate The timestamp of the last update to the BigSegmentStore, if known. Declaration public UnixMillisecondTime? LastUpToDate { get; set; } Property Value Type Description UnixMillisecondTime?"
  },
  "api/LaunchDarkly.Sdk.Server.Subsystems.BigSegmentStoreTypes.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Subsystems.BigSegmentStoreTypes.html",
    "title": "Class BigSegmentStoreTypes | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class BigSegmentStoreTypes Types that are used by the IBigSegmentStore interface. Inheritance object BigSegmentStoreTypes Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server.Subsystems Assembly: LaunchDarkly.ServerSdk.dll Syntax public static class BigSegmentStoreTypes Methods | Edit this page View Source NewMembershipFromSegmentRefs(IEnumerable<string>, IEnumerable<string>) Convenience method for creating an implementation of BigSegmentStoreTypes.IMembership. Declaration public static BigSegmentStoreTypes.IMembership NewMembershipFromSegmentRefs(IEnumerable<string> includedSegmentRefs, IEnumerable<string> excludedSegmentRefs) Parameters Type Name Description IEnumerable<string> includedSegmentRefs the inclusion list (null is equivalent to an empty enumeration) IEnumerable<string> excludedSegmentRefs the exclusion list (null is equivalent to an empty enumeration) Returns Type Description BigSegmentStoreTypes.IMembership an BigSegmentStoreTypes.IMembership Remarks This method is intended to be used by Big Segment store implementations; application code does not need to use it. Store implementations are free to implement BigSegmentStoreTypes.IMembership in any way that they find convenient and efficient, depending on what format they obtain values in from the database, but this method provides a simple way to do it as long as there are enumerations of included and excluded segment references. As described in BigSegmentStoreTypes.IMembership, a segmentRef is not the same as the key property in the segment data model; it includes the key but also versioning information that the SDK will provide. The store implementation should not be concerned with the format of this. The returned object's CheckMembership(string) method will return true for any segmentRef that is in the included list, false for any segmentRef that is in the excluded list and not also in the included list (that is, inclusions override exclusions), and null for all others. The method is optimized to return a singleton empty membership object whenever the inclusion and exclusion lists are both empty. The returned object implements Equals(object) in such a way that it correctly tests equality when compared to any object returned from this factory method, but is always unequal to any other types of objects."
  },
  "api/LaunchDarkly.Sdk.Server.Subsystems.BigSegmentsConfiguration.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Subsystems.BigSegmentsConfiguration.html",
    "title": "Class BigSegmentsConfiguration | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class BigSegmentsConfiguration Encapsulates the SDK's configuration with regard to Big Segments. Inheritance object BigSegmentsConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server.Subsystems Assembly: LaunchDarkly.ServerSdk.dll Syntax public sealed class BigSegmentsConfiguration Remarks \"Big Segments\" are a specific type of segments. For more information, read the LaunchDarkly documentation about user segments: https://docs.launchdarkly.com/home/users/segments See BigSegmentsConfigurationBuilder for more details on these properties. Constructors | Edit this page View Source BigSegmentsConfiguration(IBigSegmentStore, int, TimeSpan, TimeSpan, TimeSpan) Constructs a new instance. Declaration public BigSegmentsConfiguration(IBigSegmentStore store, int contextCacheSize, TimeSpan contextCacheTime, TimeSpan statusPollInterval, TimeSpan staleAfter) Parameters Type Name Description IBigSegmentStore store value for Store int contextCacheSize value for ContextCacheSize TimeSpan contextCacheTime value for ContextCacheTime TimeSpan statusPollInterval value for StatusPollInterval TimeSpan staleAfter value for StaleAfter Properties | Edit this page View Source ContextCacheSize The value set by ContextCacheSize(int). Declaration public int ContextCacheSize { get; } Property Value Type Description int | Edit this page View Source ContextCacheTime The value set by ContextCacheTime(TimeSpan). Declaration public TimeSpan ContextCacheTime { get; } Property Value Type Description TimeSpan | Edit this page View Source StaleAfter The value set by StaleAfter(TimeSpan). Declaration public TimeSpan StaleAfter { get; } Property Value Type Description TimeSpan | Edit this page View Source StatusPollInterval The value set by StatusPollInterval(TimeSpan). Declaration public TimeSpan StatusPollInterval { get; } Property Value Type Description TimeSpan | Edit this page View Source Store The data store instance that is used for Big Segments data. Declaration public IBigSegmentStore Store { get; } Property Value Type Description IBigSegmentStore"
  },
  "api/LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.DataKind.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.DataKind.html",
    "title": "Class DataStoreTypes.DataKind | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class DataStoreTypes.DataKind Represents a separately namespaced collection of storable data items. Inheritance object DataStoreTypes.DataKind Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk.Server.Subsystems Assembly: LaunchDarkly.ServerSdk.dll Syntax public sealed class DataStoreTypes.DataKind Remarks The SDK passes instances of this type to the data store to specify whether it is referring to a feature flag, a user segment, etc. The data store implementation should not look for a specific data kind (such as feature flags), but should treat all data kinds generically. Constructors | Edit this page View Source DataKind(string, Func<ItemDescriptor, string>, Func<string, ItemDescriptor>) Constructor for use in testing. Declaration public DataKind(string name, Func<DataStoreTypes.ItemDescriptor, string> serializer, Func<string, DataStoreTypes.ItemDescriptor> deserializer) Parameters Type Name Description string name value for the Name property Func<DataStoreTypes.ItemDescriptor, string> serializer function to convert an item to a serialized string form Func<string, DataStoreTypes.ItemDescriptor> deserializer function to convert an item from a serialized string form Remarks Application code will not create DataStoreTypes.DataKind instances; the SDK maintains its own instances for the storable data types that it uses. Properties | Edit this page View Source Name A case-sensitive alphabetic string that uniquely identifies this data kind. Declaration public string Name { get; } Property Value Type Description string Remarks This is in effect a namespace for a collection of items of the same kind. Item keys must be unique within that namespace. Persistent data store implementations could use this string as part of a composite key or table name. Methods | Edit this page View Source Deserialize(string) Creates an item of this kind from its serialized representation. Declaration public DataStoreTypes.ItemDescriptor Deserialize(string serializedData) Parameters Type Name Description string serializedData the serialized representation Returns Type Description DataStoreTypes.ItemDescriptor an DataStoreTypes.ItemDescriptor describing the deserialized object Remarks The SDK uses this function to translate data that is returned by an IPersistentDataStore. Store implementations normally do not need to call it, except in a special case described in the documentation for IPersistentDataStore regarding updates. The returned DataStoreTypes.ItemDescriptor has two properties: Item, which is the deserialized object or a null value for a deleted item placeholder, and Version, which provides the object's version number regardless of whether it is deleted or not. | Edit this page View Source Serialize(ItemDescriptor) Returns a serialized representation of an item of this kind. Declaration public string Serialize(DataStoreTypes.ItemDescriptor item) Parameters Type Name Description DataStoreTypes.ItemDescriptor item an DataStoreTypes.ItemDescriptor Returns Type Description string the serialized representation Remarks The SDK uses this function to generate the data that is stored by an IPersistentDataStore. Store implementations normally do not need to call it, except in a special case described in the documentation for IPersistentDataStore regarding deleted item placeholders. | Edit this page View Source ToString() Declaration public override string ToString() Returns Type Description string Overrides object.ToString()"
  },
  "api/LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.FullDataSet-1.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.FullDataSet-1.html",
    "title": "Struct DataStoreTypes.FullDataSet<TDescriptor> | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct DataStoreTypes.FullDataSet<TDescriptor> Wrapper for a set of storable items being passed to a data store. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk.Server.Subsystems Assembly: LaunchDarkly.ServerSdk.dll Syntax public struct DataStoreTypes.FullDataSet<TDescriptor> Type Parameters Name Description TDescriptor will be DataStoreTypes.ItemDescriptor or DataStoreTypes.SerializedItemDescriptor Remarks Since the generic type signature for the data set is somewhat complicated (it is an ordered list of key-value pairs where each key is a DataStoreTypes.DataKind, and each value is another ordered list of key-value pairs for the individual data items), this type simplifies the declaration of data store methods and makes it easier to see what the type represents. Constructors | Edit this page View Source FullDataSet(IEnumerable<KeyValuePair<DataKind, KeyedItems<TDescriptor>>>) Constructs an instance of this wrapper type. Declaration public FullDataSet(IEnumerable<KeyValuePair<DataStoreTypes.DataKind, DataStoreTypes.KeyedItems<TDescriptor>>> data) Parameters Type Name Description IEnumerable<KeyValuePair<DataStoreTypes.DataKind, DataStoreTypes.KeyedItems<TDescriptor>>> data the data set Properties | Edit this page View Source Data The wrapped data set; may be empty, but will not be null. Declaration public IEnumerable<KeyValuePair<DataStoreTypes.DataKind, DataStoreTypes.KeyedItems<TDescriptor>>> Data { get; } Property Value Type Description IEnumerable<KeyValuePair<DataStoreTypes.DataKind, DataStoreTypes.KeyedItems<TDescriptor>>> Methods | Edit this page View Source Empty() Shortcut for constructing an empty data set. Declaration public static DataStoreTypes.FullDataSet<TDescriptor> Empty() Returns Type Description DataStoreTypes.FullDataSet<TDescriptor> an instance containing no data"
  },
  "api/LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.ItemDescriptor.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.ItemDescriptor.html",
    "title": "Struct DataStoreTypes.ItemDescriptor | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct DataStoreTypes.ItemDescriptor A versioned item (or placeholder) storeable in an IDataStore. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk.Server.Subsystems Assembly: LaunchDarkly.ServerSdk.dll Syntax public struct DataStoreTypes.ItemDescriptor Remarks This is used for data stores that directly store objects as-is, as the default in-memory store does. Items are typed as object; the store should not know or care what the actual object is. For any given key within a DataStoreTypes.DataKind, there can be either an existing item with a version, or a \"tombstone\" placeholder representing a deleted item (also with a version. Deleted item placeholders are used so that if an item is first updated with version N and then deleted with version N+1, but the SDK receives those changes out of order, version N will not overwrite the deletion. Persistent data stores use DataStoreTypes.SerializedItemDescriptor instead. Constructors | Edit this page View Source ItemDescriptor(int, object) Constructs an instance. Declaration public ItemDescriptor(int version, object item) Parameters Type Name Description int version the version number object item the data item, or null for a deleted item Properties | Edit this page View Source Item The data item, or null if this is a placeholder for a deleted item. Declaration public object Item { get; } Property Value Type Description object | Edit this page View Source Version The version number of this data, provided by the SDK. Declaration public int Version { get; } Property Value Type Description int Methods | Edit this page View Source Deleted(int) Shortcut for constructing a deleted item placeholder. Declaration public static DataStoreTypes.ItemDescriptor Deleted(int version) Parameters Type Name Description int version the version number Returns Type Description DataStoreTypes.ItemDescriptor the item descriptor | Edit this page View Source ToString() Declaration public override string ToString() Returns Type Description string Overrides ValueType.ToString()"
  },
  "api/LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.KeyedItems-1.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.KeyedItems-1.html",
    "title": "Struct DataStoreTypes.KeyedItems<TDescriptor> | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct DataStoreTypes.KeyedItems<TDescriptor> Wrapper for a set of storable items being passed to a data store, within a single DataStoreTypes.DataKind. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk.Server.Subsystems Assembly: LaunchDarkly.ServerSdk.dll Syntax public struct DataStoreTypes.KeyedItems<TDescriptor> Type Parameters Name Description TDescriptor Remarks This type exists only to provide a simpler type signature for data store methods, and to make it easier to see what the type represents. In particular, unlike an IDictionary<TKey, TValue>, the ordering of items may be significant (in the case of updates). Constructors | Edit this page View Source KeyedItems(IEnumerable<KeyValuePair<string, TDescriptor>>) Constructs an instance of this wrapper type. Declaration public KeyedItems(IEnumerable<KeyValuePair<string, TDescriptor>> items) Parameters Type Name Description IEnumerable<KeyValuePair<string, TDescriptor>> items the data set Properties | Edit this page View Source Items The wrapped data set; may be empty, but will not be null. Declaration public IEnumerable<KeyValuePair<string, TDescriptor>> Items { get; } Property Value Type Description IEnumerable<KeyValuePair<string, TDescriptor>> Methods | Edit this page View Source Empty() Shortcut for constructing an empty data set. Declaration public static DataStoreTypes.KeyedItems<TDescriptor> Empty() Returns Type Description DataStoreTypes.KeyedItems<TDescriptor> an instance containing no data"
  },
  "api/LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.SerializedItemDescriptor.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.SerializedItemDescriptor.html",
    "title": "Struct DataStoreTypes.SerializedItemDescriptor | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct DataStoreTypes.SerializedItemDescriptor A versioned item (or placeholder) storeable in an IPersistentDataStore or IPersistentDataStoreAsync. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk.Server.Subsystems Assembly: LaunchDarkly.ServerSdk.dll Syntax public struct DataStoreTypes.SerializedItemDescriptor Remarks This is equivalent to DataStoreTypes.ItemDescriptor, but is used for persistent data stores. The SDK will convert each data item to and from its serialized string form; the persistent data store deals only with the serialized form. Constructors | Edit this page View Source SerializedItemDescriptor(int, bool, string) Constructs an instance. Declaration public SerializedItemDescriptor(int version, bool deleted, string serializedItem) Parameters Type Name Description int version the version number bool deleted true if this is a deleted item placeholder string serializedItem the serialized data item (will not be null) Properties | Edit this page View Source Deleted True if this is a placeholder (tombstone) for a deleted item. Declaration public bool Deleted { get; } Property Value Type Description bool Remarks If this is true, SerializedItem may still contain a string representing the deleted item, but the persistent store implementation has the option of not storing it if it can represent the placeholder in a more efficient way. | Edit this page View Source SerializedItem The data item's serialized representatation. Declaration public string SerializedItem { get; } Property Value Type Description string Remarks This will never be null; for a deleted item placeholder, it will contain a special value that can be stored if necessary (see Deleted). | Edit this page View Source Version The version number of this data, provided by the SDK. Declaration public int Version { get; } Property Value Type Description int Methods | Edit this page View Source ToString() Declaration public override string ToString() Returns Type Description string Overrides ValueType.ToString()"
  },
  "api/LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Subsystems.DataStoreTypes.html",
    "title": "Class DataStoreTypes | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class DataStoreTypes Types that are used by the IDataStore interface. Inheritance object DataStoreTypes Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server.Subsystems Assembly: LaunchDarkly.ServerSdk.dll Syntax public static class DataStoreTypes"
  },
  "api/LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes.CustomEvent.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes.CustomEvent.html",
    "title": "Struct EventProcessorTypes.CustomEvent | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct EventProcessorTypes.CustomEvent Parameters for RecordCustomEvent(CustomEvent). Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk.Server.Subsystems Assembly: LaunchDarkly.ServerSdk.dll Syntax public struct EventProcessorTypes.CustomEvent Properties | Edit this page View Source Context The evaluation context. Some attributes may not be sent to LaunchDarkly if they are private. Declaration public Context Context { get; set; } Property Value Type Description Context | Edit this page View Source Data Custom data provided for the event. Declaration public LdValue Data { get; set; } Property Value Type Description LdValue | Edit this page View Source EventKey The event key. Declaration public string EventKey { get; set; } Property Value Type Description string | Edit this page View Source MetricValue An optional numeric value that can be used in analytics. Declaration public double? MetricValue { get; set; } Property Value Type Description double? | Edit this page View Source Timestamp Date/timestamp of the event. Declaration public UnixMillisecondTime Timestamp { get; set; } Property Value Type Description UnixMillisecondTime"
  },
  "api/LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes.EvaluationEvent.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes.EvaluationEvent.html",
    "title": "Struct EventProcessorTypes.EvaluationEvent | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct EventProcessorTypes.EvaluationEvent Parameters for RecordEvaluationEvent(EvaluationEvent). Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk.Server.Subsystems Assembly: LaunchDarkly.ServerSdk.dll Syntax public struct EventProcessorTypes.EvaluationEvent Properties | Edit this page View Source Context The evaluation context for the event. Some attributes may not be sent to LaunchDarkly if they are private. Declaration public Context Context { get; set; } Property Value Type Description Context | Edit this page View Source DebugEventsUntilDate If set, debug events are being generated until this date/time. Declaration public UnixMillisecondTime? DebugEventsUntilDate { get; set; } Property Value Type Description UnixMillisecondTime? | Edit this page View Source Default The default value of the flag. Declaration public LdValue Default { get; set; } Property Value Type Description LdValue | Edit this page View Source ExcludeFromSummaries If true the event will not be included in summaries. Declaration public bool ExcludeFromSummaries { get; set; } Property Value Type Description bool | Edit this page View Source FlagKey The unique key of the feature flag involved in the event. Declaration public string FlagKey { get; set; } Property Value Type Description string | Edit this page View Source FlagVersion The version of the flag. Declaration public int? FlagVersion { get; set; } Property Value Type Description int? | Edit this page View Source PrerequisiteOf The key of the flag that this flag is a prerequisite of, if any. Declaration public string PrerequisiteOf { get; set; } Property Value Type Description string | Edit this page View Source Reason An explanation of how the value was calculated, or null if the reason was not requested. Declaration public EvaluationReason? Reason { get; set; } Property Value Type Description EvaluationReason? | Edit this page View Source SamplingRatio Sampling ratio which determines is used for sampling the event. Declaration public long? SamplingRatio { get; set; } Property Value Type Description long? | Edit this page View Source Timestamp Date/timestamp of the event. Declaration public UnixMillisecondTime Timestamp { get; set; } Property Value Type Description UnixMillisecondTime | Edit this page View Source TrackEvents True if full-fidelity analytics events should be sent for this flag. Declaration public bool TrackEvents { get; set; } Property Value Type Description bool | Edit this page View Source Value The computed value of the flag. Declaration public LdValue Value { get; set; } Property Value Type Description LdValue | Edit this page View Source Variation The variation index for the computed value of the flag. Declaration public int? Variation { get; set; } Property Value Type Description int?"
  },
  "api/LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes.IdentifyEvent.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes.IdentifyEvent.html",
    "title": "Struct EventProcessorTypes.IdentifyEvent | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct EventProcessorTypes.IdentifyEvent Parameters for RecordIdentifyEvent(IdentifyEvent). Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk.Server.Subsystems Assembly: LaunchDarkly.ServerSdk.dll Syntax public struct EventProcessorTypes.IdentifyEvent Properties | Edit this page View Source Context The evaluation context. Some attributes may not be sent to LaunchDarkly if they are private. Declaration public Context Context { get; set; } Property Value Type Description Context | Edit this page View Source Timestamp Date/timestamp of the event. Declaration public UnixMillisecondTime Timestamp { get; set; } Property Value Type Description UnixMillisecondTime"
  },
  "api/LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes.MigrationOpEvent.ConsistentMeasurement.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes.MigrationOpEvent.ConsistentMeasurement.html",
    "title": "Struct EventProcessorTypes.MigrationOpEvent.ConsistentMeasurement | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct EventProcessorTypes.MigrationOpEvent.ConsistentMeasurement Consistency measurement. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk.Server.Subsystems Assembly: LaunchDarkly.ServerSdk.dll Syntax public struct EventProcessorTypes.MigrationOpEvent.ConsistentMeasurement Remarks Both measurements MUST be invoked if a consistency measurement is included. Properties | Edit this page View Source IsConsistent True if the measurement was consistent. Declaration public bool IsConsistent { get; set; } Property Value Type Description bool | Edit this page View Source SamplingRatio The sampling ratio for the consistency check. Declaration public long SamplingRatio { get; set; } Property Value Type Description long"
  },
  "api/LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes.MigrationOpEvent.ErrorMeasurement.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes.MigrationOpEvent.ErrorMeasurement.html",
    "title": "Struct EventProcessorTypes.MigrationOpEvent.ErrorMeasurement | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct EventProcessorTypes.MigrationOpEvent.ErrorMeasurement Error measurements for invoked methods. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk.Server.Subsystems Assembly: LaunchDarkly.ServerSdk.dll Syntax public struct EventProcessorTypes.MigrationOpEvent.ErrorMeasurement Remarks A method must be invoked for there to be any measurements associated with it. Properties | Edit this page View Source New True if any error happened for the new method. Declaration public bool New { get; set; } Property Value Type Description bool | Edit this page View Source Old True if any error happened for the old method. Declaration public bool Old { get; set; } Property Value Type Description bool"
  },
  "api/LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes.MigrationOpEvent.InvokedMeasurement.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes.MigrationOpEvent.InvokedMeasurement.html",
    "title": "Struct EventProcessorTypes.MigrationOpEvent.InvokedMeasurement | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct EventProcessorTypes.MigrationOpEvent.InvokedMeasurement Information about what origins were invoked. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk.Server.Subsystems Assembly: LaunchDarkly.ServerSdk.dll Syntax public struct EventProcessorTypes.MigrationOpEvent.InvokedMeasurement Remarks At lest one measurement must be invoked. Properties | Edit this page View Source New True if the new method was invoked. Declaration public bool New { get; set; } Property Value Type Description bool | Edit this page View Source Old True if the old method was invoked. Declaration public bool Old { get; set; } Property Value Type Description bool"
  },
  "api/LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes.MigrationOpEvent.LatencyMeasurement.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes.MigrationOpEvent.LatencyMeasurement.html",
    "title": "Struct EventProcessorTypes.MigrationOpEvent.LatencyMeasurement | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct EventProcessorTypes.MigrationOpEvent.LatencyMeasurement Latency measurements for invoked methods. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk.Server.Subsystems Assembly: LaunchDarkly.ServerSdk.dll Syntax public struct EventProcessorTypes.MigrationOpEvent.LatencyMeasurement Remarks A method must be invoked for there to be any measurements associated with it. Properties | Edit this page View Source New Latency of the new method, or null if the new method was not invoked. Declaration public long? New { get; set; } Property Value Type Description long? | Edit this page View Source Old Latency of the old method, or null if the old method was not invoked. Declaration public long? Old { get; set; } Property Value Type Description long?"
  },
  "api/LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes.MigrationOpEvent.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes.MigrationOpEvent.html",
    "title": "Struct EventProcessorTypes.MigrationOpEvent | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct EventProcessorTypes.MigrationOpEvent Parameters for RecordMigrationEvent(MigrationOpEvent) Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk.Server.Subsystems Assembly: LaunchDarkly.ServerSdk.dll Syntax public struct EventProcessorTypes.MigrationOpEvent Properties | Edit this page View Source Consistent The consistency measurement. Declaration public EventProcessorTypes.MigrationOpEvent.ConsistentMeasurement? Consistent { get; set; } Property Value Type Description EventProcessorTypes.MigrationOpEvent.ConsistentMeasurement? Remarks Should not be included if a consistency check was not performed. There are effectively 3 states, a consistency check was not performed, it was performed and it was inconsistent, it was performed and it was inconsistent. It is important to track these cases correctly for accurate analytics. | Edit this page View Source Context The evaluation context. Some attributes may not be sent to LaunchDarkly if they are private. Declaration public Context Context { get; set; } Property Value Type Description Context | Edit this page View Source Default The default value of the evaluation. Declaration public LdValue Default { get; set; } Property Value Type Description LdValue | Edit this page View Source Error The error measurement. Declaration public EventProcessorTypes.MigrationOpEvent.ErrorMeasurement? Error { get; set; } Property Value Type Description EventProcessorTypes.MigrationOpEvent.ErrorMeasurement? Remarks Should not be included if there were no errors during the migration. | Edit this page View Source FlagKey The flag key for the migration. Declaration public string FlagKey { get; set; } Property Value Type Description string | Edit this page View Source FlagVersion The version of the flag. Declaration public int? FlagVersion { get; set; } Property Value Type Description int? | Edit this page View Source Invoked The invoked measurement. Declaration public EventProcessorTypes.MigrationOpEvent.InvokedMeasurement Invoked { get; set; } Property Value Type Description EventProcessorTypes.MigrationOpEvent.InvokedMeasurement | Edit this page View Source Latency The latency measurement. Declaration public EventProcessorTypes.MigrationOpEvent.LatencyMeasurement? Latency { get; set; } Property Value Type Description EventProcessorTypes.MigrationOpEvent.LatencyMeasurement? Remarks Should not be included if no latency measurements were taken. | Edit this page View Source Operation The type of migration operation that was performed (read/write). Declaration public string Operation { get; set; } Property Value Type Description string | Edit this page View Source Reason The reason associated with the evaluation. Declaration public EvaluationReason? Reason { get; set; } Property Value Type Description EvaluationReason? | Edit this page View Source SamplingRatio The sampling ratio for this event. Declaration public long SamplingRatio { get; set; } Property Value Type Description long | Edit this page View Source Timestamp Date/timestamp of the event. Declaration public UnixMillisecondTime Timestamp { get; set; } Property Value Type Description UnixMillisecondTime | Edit this page View Source Value The value of the evaluation. Declaration public LdValue Value { get; set; } Property Value Type Description LdValue | Edit this page View Source Variation The variation for the evaluation. Declaration public int? Variation { get; set; } Property Value Type Description int?"
  },
  "api/LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Subsystems.EventProcessorTypes.html",
    "title": "Class EventProcessorTypes | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class EventProcessorTypes Parameter types for use by IEventProcessor implementations. Inheritance object EventProcessorTypes Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server.Subsystems Assembly: LaunchDarkly.ServerSdk.dll Syntax public static class EventProcessorTypes Remarks Application code normally does not need to use these types or interact directly with any IEventProcessor functionality. They are provided to allow a custom implementation or test fixture to be substituted for the SDK's normal analytics event logic. These types deliberately duplicate the corresponding parameter types that are defined in LaunchDarkly.InternalSdk. The point of this duplication is to keep all symbols from LaunchDarkly.InternalSdk out of the public SDK API so that application code will never depend on the implementation details in that assembly, which is versioned separately from the SDK and may change in backward-incompatible ways."
  },
  "api/LaunchDarkly.Sdk.Server.Subsystems.HookConfiguration.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Subsystems.HookConfiguration.html",
    "title": "Class HookConfiguration | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class HookConfiguration HookConfiguration represents the hooks that will be executed by the SDK at runtime. Inheritance object HookConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server.Subsystems Assembly: LaunchDarkly.ServerSdk.dll Syntax public sealed class HookConfiguration Constructors | Edit this page View Source HookConfiguration(IEnumerable<Hook>) Constructs a new configuration from a collection of hooks. Declaration public HookConfiguration(IEnumerable<Hook> hooks) Parameters Type Name Description IEnumerable<Hook> hooks the collection of hooks Properties | Edit this page View Source Hooks Collection of hooks. Declaration public IEnumerable<Hook> Hooks { get; } Property Value Type Description IEnumerable<Hook>"
  },
  "api/LaunchDarkly.Sdk.Server.Subsystems.HttpConfiguration.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Subsystems.HttpConfiguration.html",
    "title": "Class HttpConfiguration | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class HttpConfiguration Encapsulates top-level HTTP configuration that applies to all SDK components. Inheritance object HttpConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server.Subsystems Assembly: LaunchDarkly.ServerSdk.dll Syntax public sealed class HttpConfiguration Remarks Use HttpConfigurationBuilder to construct an instance. Constructors | Edit this page View Source HttpConfiguration(TimeSpan, IEnumerable<KeyValuePair<string, string>>, HttpMessageHandler, IWebProxy, TimeSpan) Constructs an instance, setting all properties. Declaration public HttpConfiguration(TimeSpan connectTimeout, IEnumerable<KeyValuePair<string, string>> defaultHeaders, HttpMessageHandler messageHandler, IWebProxy proxy, TimeSpan readTimeout) Parameters Type Name Description TimeSpan connectTimeout value for ConnectTimeout IEnumerable<KeyValuePair<string, string>> defaultHeaders value for DefaultHeaders HttpMessageHandler messageHandler value for MessageHandler IWebProxy proxy value for Proxy TimeSpan readTimeout value for ReadTimeout | Edit this page View Source HttpConfiguration(TimeSpan, IEnumerable<KeyValuePair<string, string>>, HttpMessageHandler, IWebProxy, TimeSpan, TimeSpan) Constructs an instance, setting all properties. Declaration public HttpConfiguration(TimeSpan connectTimeout, IEnumerable<KeyValuePair<string, string>> defaultHeaders, HttpMessageHandler messageHandler, IWebProxy proxy, TimeSpan readTimeout, TimeSpan responseStartTimeout) Parameters Type Name Description TimeSpan connectTimeout value for ConnectTimeout IEnumerable<KeyValuePair<string, string>> defaultHeaders value for DefaultHeaders HttpMessageHandler messageHandler value for MessageHandler IWebProxy proxy value for Proxy TimeSpan readTimeout value for ReadTimeout TimeSpan responseStartTimeout value for ResponseStartTimeout Properties | Edit this page View Source ConnectTimeout The network connection timeout. Declaration public TimeSpan ConnectTimeout { get; } Property Value Type Description TimeSpan Remarks This is the time allowed for the underlying HTTP client to connect to the LaunchDarkly server, for any individual network connection. Not all .NET platforms support setting a connection timeout. It is implemented as a property of System.Net.Http.SocketsHttpHandler in .NET Core 2.1+ and .NET 5+, but is unavailable in .NET Framework and .NET Standard. On platforms where it is not supported, only ResponseStartTimeout will be used. Since this is implemented only in SocketsHttpHandler, if you have specified some other HTTP handler implementation with HttpMessageHandler, the ConnectTimeout here will be ignored. See Also ResponseStartTimeout | Edit this page View Source DefaultHeaders HTTP headers to be added to all HTTP requests made by the SDK. Declaration public IEnumerable<KeyValuePair<string, string>> DefaultHeaders { get; } Property Value Type Description IEnumerable<KeyValuePair<string, string>> Remarks These include Authorization, User-Agent, and any headers that were specified with CustomHeader(string, string). | Edit this page View Source MessageHandler A custom handler for HTTP requests, or null to use the platform's default handler. Declaration public HttpMessageHandler MessageHandler { get; } Property Value Type Description HttpMessageHandler | Edit this page View Source Proxy The proxy configuration, if any. Declaration public IWebProxy Proxy { get; } Property Value Type Description IWebProxy Remarks This is only present if a proxy was specified programmatically with Proxy(IWebProxy), not if it was specified with an environment variable. | Edit this page View Source ReadTimeout The network read timeout (socket timeout). Declaration public TimeSpan ReadTimeout { get; } Property Value Type Description TimeSpan Remarks This is the amount of time without receiving data on a connection that the SDK will tolerate before signaling an error. This does not apply to the streaming connection used by StreamingDataSource(), which has its own non-configurable read timeout based on the expected behavior of the LaunchDarkly streaming service. | Edit this page View Source ResponseStartTimeout The maximum amount of time to wait for the beginning of an HTTP response. Declaration public TimeSpan ResponseStartTimeout { get; } Property Value Type Description TimeSpan Remarks This limits how long the SDK will wait from the time it begins trying to make a network connection for an individual HTTP request to the time it starts receiving any data from the server. It is equivalent to the Timeout property in HttpClient. It is not the same as StartWaitTime(TimeSpan), which limits the time for initializing the SDK regardless of how many individual HTTP requests are done in that time. See Also ConnectTimeout Methods | Edit this page View Source NewHttpClient() Helper method for creating an HTTP client instance using the configured properties. Declaration public HttpClient NewHttpClient() Returns Type Description HttpClient a client instance"
  },
  "api/LaunchDarkly.Sdk.Server.Subsystems.IBigSegmentStore.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Subsystems.IBigSegmentStore.html",
    "title": "Interface IBigSegmentStore | LaunchDarkly Dotnet Server SDK",
    "keywords": "Interface IBigSegmentStore Interface for a read-only data store that allows querying of user membership in Big Segments. Inherited Members IDisposable.Dispose() Namespace: LaunchDarkly.Sdk.Server.Subsystems Assembly: LaunchDarkly.ServerSdk.dll Syntax public interface IBigSegmentStore : IDisposable Remarks \"Big Segments\" are a specific type of user segments. For more information, read the LaunchDarkly documentation about user segments: https://docs.launchdarkly.com/home/users/segments All query methods of the store are asynchronous. Methods | Edit this page View Source GetMembershipAsync(string) Queries the store for a snapshot of the current segment state for a specific user. Declaration Task<BigSegmentStoreTypes.IMembership> GetMembershipAsync(string userHash) Parameters Type Name Description string userHash the hashed user identifier Returns Type Description Task<BigSegmentStoreTypes.IMembership> the user's segment membership state or null Remarks The userHash is a base64-encoded string produced by hashing the user key as defined by the Big Segments specification; the store implementation does not need to know the details of how this is done, because it deals only with already-hashed keys, but the string can be assumed to only contain characters that are valid in base64. If the store is working, but no membership state is found for this user, the method may return either null or an empty BigSegmentStoreTypes.IMembership. It should not throw an exception unless there is an unexpected database error or the retrieved data is malformed. | Edit this page View Source GetMetadataAsync() Returns information about the overall state of the store. Declaration Task<BigSegmentStoreTypes.StoreMetadata?> GetMetadataAsync() Returns Type Description Task<BigSegmentStoreTypes.StoreMetadata?> the store metadata or null Remarks This method will be called only when the SDK needs the latest state, so it should not be cached. If the store is working, but no metadata has been stored in it yet, the method should return null. It should not throw an exception unless there is an unexpected database error or the retrieved data is malformed."
  },
  "api/LaunchDarkly.Sdk.Server.Subsystems.IComponentConfigurer-1.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Subsystems.IComponentConfigurer-1.html",
    "title": "Interface IComponentConfigurer<T> | LaunchDarkly Dotnet Server SDK",
    "keywords": "Interface IComponentConfigurer<T> The common interface for SDK component factories and configuration builders. Applications should not need to implement this interface. Namespace: LaunchDarkly.Sdk.Server.Subsystems Assembly: LaunchDarkly.ServerSdk.dll Syntax public interface IComponentConfigurer<T> Type Parameters Name Description T the type of SDK component or configuration object being constructed Methods | Edit this page View Source Build(LdClientContext) Called internally by the SDK to create an implementation instance. Applications should not need to call this method. Declaration T Build(LdClientContext context) Parameters Type Name Description LdClientContext context provides configuration properties and other components from the current SDK client instance Returns Type Description T a instance of the component type"
  },
  "api/LaunchDarkly.Sdk.Server.Subsystems.IDataSource.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Subsystems.IDataSource.html",
    "title": "Interface IDataSource | LaunchDarkly Dotnet Server SDK",
    "keywords": "Interface IDataSource Interface for an object that receives updates to feature flags, user segments, and anything else that might come from LaunchDarkly. Inherited Members IDisposable.Dispose() Namespace: LaunchDarkly.Sdk.Server.Subsystems Assembly: LaunchDarkly.ServerSdk.dll Syntax public interface IDataSource : IDisposable Remarks This component uses a push model. When it is created, the SDK will provide a reference to an IDataSourceUpdates component, which is a write-only abstraction of the data store. The SDK never requests feature flag data from the IDataSource, it only looks at the last known data that was previously put into the store. Properties | Edit this page View Source Initialized Checks whether the data source has finished initializing. Declaration bool Initialized { get; } Property Value Type Description bool true if fully initialized Remarks This is true if it has received at least one full set of feature flag data from LaunchDarkly, or if it is never going to do so because we are deliberately offline. Methods | Edit this page View Source Start() Initializes the data source. This is called once from the LdClient constructor. Declaration Task<bool> Start() Returns Type Description Task<bool> a Task which is completed once the data source has finished starting up"
  },
  "api/LaunchDarkly.Sdk.Server.Subsystems.IDataSourceUpdates.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Subsystems.IDataSourceUpdates.html",
    "title": "Interface IDataSourceUpdates | LaunchDarkly Dotnet Server SDK",
    "keywords": "Interface IDataSourceUpdates Interface that an implementation of IDataSource will use to push data into the SDK. Namespace: LaunchDarkly.Sdk.Server.Subsystems Assembly: LaunchDarkly.ServerSdk.dll Syntax public interface IDataSourceUpdates Remarks The data source interacts with this object, rather than manipulating the data store directly, so that the SDK can perform any other necessary operations that must happen when data is updated. This object also provides a mechanism to report status changes. Component factories for IDataSource implementations will receive an implementation of this interface in the DataSourceUpdates property of LdClientContext. Properties | Edit this page View Source DataStoreStatusProvider An object that provides status tracking for the data store, if applicable. Declaration IDataStoreStatusProvider DataStoreStatusProvider { get; } Property Value Type Description IDataStoreStatusProvider Remarks This may be useful if the data source needs to be aware of storage problems that might require it to take some special action: for instance, if a database outage may have caused some data to be lost and therefore the data should be re-requested from LaunchDarkly. Methods | Edit this page View Source Init(FullDataSet<ItemDescriptor>) Completely overwrites the current contents of the data store with a set of items for each collection. Declaration bool Init(DataStoreTypes.FullDataSet<DataStoreTypes.ItemDescriptor> allData) Parameters Type Name Description DataStoreTypes.FullDataSet<DataStoreTypes.ItemDescriptor> allData a list of DataStoreTypes.DataKind instances and their corresponding data sets Returns Type Description bool true if the update succeeded, false if it failed | Edit this page View Source UpdateStatus(DataSourceState, ErrorInfo?) Informs the SDK of a change in the data source's status. Declaration void UpdateStatus(DataSourceState newState, DataSourceStatus.ErrorInfo? newError) Parameters Type Name Description DataSourceState newState the data source state DataSourceStatus.ErrorInfo? newError information about a new error, if any Remarks Data source implementations should use this method if they have any concept of being in a valid state, a temporarily disconnected state, or a permanently stopped state. If newState is different from the previous state, and/or newError is non-null, the SDK will start returning the new status(adding a timestamp for the change) from Status, and will trigger status change events to any registered listeners. A special case is that if newState is Interrupted, but the previous state was Initializing, the state will remain at Initializing because Interrupted is only meaningful after a successful startup. See Also IDataSourceStatusProvider | Edit this page View Source Upsert(DataKind, string, ItemDescriptor) Updates or inserts an item in the specified collection. For updates, the object will only be updated if the existing version is less than the new version. Declaration bool Upsert(DataStoreTypes.DataKind kind, string key, DataStoreTypes.ItemDescriptor item) Parameters Type Name Description DataStoreTypes.DataKind kind specifies which collection to use string key the unique key for the item within that collection DataStoreTypes.ItemDescriptor item the item to insert or update Returns Type Description bool true if the update succeeded, false if it failed Remarks The DataStoreTypes.ItemDescriptor may contain a null, to represent a placeholder for a deleted item."
  },
  "api/LaunchDarkly.Sdk.Server.Subsystems.IDataStore.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Subsystems.IDataStore.html",
    "title": "Interface IDataStore | LaunchDarkly Dotnet Server SDK",
    "keywords": "Interface IDataStore Interface for a data store that holds feature flags and related data received by the SDK. Inherited Members IDisposable.Dispose() Namespace: LaunchDarkly.Sdk.Server.Subsystems Assembly: LaunchDarkly.ServerSdk.dll Syntax public interface IDataStore : IDisposable Remarks Ordinarily, the only implementation of this interface is the default in-memory implementation, which holds references to actual SDK data model objects. Any data store implementation that uses an external store, such as a database, should instead use IPersistentDataStore or IPersistentDataStoreAsync. Implementations must be thread-safe. Properties | Edit this page View Source StatusMonitoringEnabled True if this data store implementation supports status monitoring. Declaration bool StatusMonitoringEnabled { get; } Property Value Type Description bool Remarks This is normally only true for persistent data stores created with PersistentDataStore(IComponentConfigurer<IPersistentDataStore>), but it could also be true for any custom IDataStore implementation that makes use of the IDataStoreUpdates mechanism. Returning true means that the store guarantees that if it ever enters an invalid state (that is, an operation has failed or it knows that operations cannot succeed at the moment), it will publish a status update, and will then publish another status update once it has returned to a valid state. The same value will be returned from StatusMonitoringEnabled. Methods | Edit this page View Source Get(DataKind, string) Retrieves an item from the specified collection, if available. Declaration DataStoreTypes.ItemDescriptor? Get(DataStoreTypes.DataKind kind, string key) Parameters Type Name Description DataStoreTypes.DataKind kind specifies which collection to use string key the unique key of the item within that collection Returns Type Description DataStoreTypes.ItemDescriptor? a versioned item that contains the stored data (or placeholder for deleted data); null if the key is unknown Remarks If the item has been deleted and the store contains a placeholder, it should return that placeholder rather than null. | Edit this page View Source GetAll(DataKind) Retrieves all items from the specified collection. Declaration DataStoreTypes.KeyedItems<DataStoreTypes.ItemDescriptor> GetAll(DataStoreTypes.DataKind kind) Parameters Type Name Description DataStoreTypes.DataKind kind specifies which collection to use Returns Type Description DataStoreTypes.KeyedItems<DataStoreTypes.ItemDescriptor> a collection of key-value pairs; the ordering is not significant Remarks If the store contains placeholders for deleted items, it should include them in the results, not filter them out. | Edit this page View Source Init(FullDataSet<ItemDescriptor>) Overwrites the store's contents with a set of items for each collection. Declaration void Init(DataStoreTypes.FullDataSet<DataStoreTypes.ItemDescriptor> allData) Parameters Type Name Description DataStoreTypes.FullDataSet<DataStoreTypes.ItemDescriptor> allData a list of DataStoreTypes.DataKind instances and their corresponding data sets Remarks All previous data should be discarded, regardless of versioning. The update should be done atomically. If it cannot be done atomically, then the store must first add or update each item in the same order that they are given in the input data, and then delete any previously stored items that were not in the input data. | Edit this page View Source Initialized() Checks whether this store has been initialized with any data yet. Declaration bool Initialized() Returns Type Description bool true if the store contains data Remarks This is defined as a method rather than a property to emphasize that it may be an operation that involves I/O; some data stores need to do a database query to see if there is existing data. | Edit this page View Source Upsert(DataKind, string, ItemDescriptor) Updates or inserts an item in the specified collection. For updates, the object will only be updated if the existing version is less than the new version. Declaration bool Upsert(DataStoreTypes.DataKind kind, string key, DataStoreTypes.ItemDescriptor item) Parameters Type Name Description DataStoreTypes.DataKind kind specifies which collection to use string key the unique key for the item within that collection DataStoreTypes.ItemDescriptor item the item to insert or update Returns Type Description bool true if the item was updated; false if it was not updated because the store contains an equal or greater version Remarks The SDK may pass an DataStoreTypes.ItemDescriptor that contains a null, to represent a placeholder for a deleted item. In that case, assuming the version is greater than any existing version of that item, the store should retain that placeholder rather than simply not storing anything. See Also IPersistentDataStore IPersistentDataStoreAsync"
  },
  "api/LaunchDarkly.Sdk.Server.Subsystems.IDataStoreUpdates.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Subsystems.IDataStoreUpdates.html",
    "title": "Interface IDataStoreUpdates | LaunchDarkly Dotnet Server SDK",
    "keywords": "Interface IDataStoreUpdates Interface that an implementation of IDataStore can use to report information back to the SDK. Namespace: LaunchDarkly.Sdk.Server.Subsystems Assembly: LaunchDarkly.ServerSdk.dll Syntax public interface IDataStoreUpdates Remarks Component factories for IDataStore implementations will receive an implementation of this interface in the DataStoreUpdates property of LdClientContext. Methods | Edit this page View Source UpdateStatus(DataStoreStatus) Reports a change in the data store's operational status. Declaration void UpdateStatus(DataStoreStatus newStatus) Parameters Type Name Description DataStoreStatus newStatus the updated status properties Remarks This is what makes the status monitoring mechanisms in IDataStoreStatusProvider work."
  },
  "api/LaunchDarkly.Sdk.Server.Subsystems.IDiagnosticDescription.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Subsystems.IDiagnosticDescription.html",
    "title": "Interface IDiagnosticDescription | LaunchDarkly Dotnet Server SDK",
    "keywords": "Interface IDiagnosticDescription Optional interface for components to describe their own configuration. Namespace: LaunchDarkly.Sdk.Server.Subsystems Assembly: LaunchDarkly.ServerSdk.dll Syntax public interface IDiagnosticDescription Remarks The SDK uses a simplified JSON representation of its configuration when recording diagnostics data. Any configuration/component builder class that implements IComponentConfigurer<T> may choose to contribute values to this representation, although the SDK may or may not use them. The DescribeConfiguration(LdClientContext) method should return either Nullor a JSON value. For custom components, the value must be a string that describes the basic nature of this component implementation (e.g. \"Redis\"). Built-in LaunchDarkly components may instead return a JSON object containing multiple properties specific to the LaunchDarkly diagnostic schema. Methods | Edit this page View Source DescribeConfiguration(LdClientContext) Called internally by the SDK to inspect the configuration. Applications do not need to call this method. Declaration LdValue DescribeConfiguration(LdClientContext context) Parameters Type Name Description LdClientContext context SDK configuration/component information Returns Type Description LdValue a JSON value"
  },
  "api/LaunchDarkly.Sdk.Server.Subsystems.IEventProcessor.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Subsystems.IEventProcessor.html",
    "title": "Interface IEventProcessor | LaunchDarkly Dotnet Server SDK",
    "keywords": "Interface IEventProcessor Interface for an object that can send or store analytics events. Inherited Members IDisposable.Dispose() Namespace: LaunchDarkly.Sdk.Server.Subsystems Assembly: LaunchDarkly.ServerSdk.dll Syntax public interface IEventProcessor : IDisposable Remarks Application code normally does not need to interact with IEventProcessor or its related parameter types. They are provided to allow a custom implementation or test fixture to be substituted for the SDK's normal analytics event logic. All of the Record methods must return as soon as possible without waiting for events to be delivered; event delivery is done asynchronously by a background task. Methods | Edit this page View Source Flush() Specifies that any buffered events should be sent as soon as possible, rather than waiting for the next flush interval. Declaration void Flush() See Also Flush() | Edit this page View Source FlushAndWait(TimeSpan) Specifies that any buffered events should be sent synchronously now. Declaration bool FlushAndWait(TimeSpan timeout) Parameters Type Name Description TimeSpan timeout Returns Type Description bool See Also FlushAndWait(TimeSpan) | Edit this page View Source RecordCustomEvent(CustomEvent) Records a custom event. Declaration void RecordCustomEvent(EventProcessorTypes.CustomEvent e) Parameters Type Name Description EventProcessorTypes.CustomEvent e parameters for a custom event | Edit this page View Source RecordEvaluationEvent(EvaluationEvent) Records the action of evaluating a feature flag. Declaration void RecordEvaluationEvent(EventProcessorTypes.EvaluationEvent e) Parameters Type Name Description EventProcessorTypes.EvaluationEvent e parameters for an evaluation event Remarks Depending on the feature flag properties and event properties, this may be transmitted to the events service as an individual event, or may only be added into summary data. | Edit this page View Source RecordIdentifyEvent(IdentifyEvent) Records a set of user properties. Declaration void RecordIdentifyEvent(EventProcessorTypes.IdentifyEvent e) Parameters Type Name Description EventProcessorTypes.IdentifyEvent e parameters for an identify event | Edit this page View Source RecordMigrationEvent(MigrationOpEvent) Records a migration operation evnet. Declaration void RecordMigrationEvent(EventProcessorTypes.MigrationOpEvent e) Parameters Type Name Description EventProcessorTypes.MigrationOpEvent e parameters for a migration op event"
  },
  "api/LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStore.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStore.html",
    "title": "Interface IPersistentDataStore | LaunchDarkly Dotnet Server SDK",
    "keywords": "Interface IPersistentDataStore Interface for a data store that holds feature flags and related data in a serialized form. Inherited Members IDisposable.Dispose() Namespace: LaunchDarkly.Sdk.Server.Subsystems Assembly: LaunchDarkly.ServerSdk.dll Syntax public interface IPersistentDataStore : IDisposable Remarks This interface should be used for database integrations, or any other data store implementation that stores data in some external service. The SDK will take care of converting between its own internal data model and a serialized string form; the data store interacts only with the serialized form. The SDK will also provide its own caching layer on top of the persistent data store; the data store implementation should not provide caching, but simply do every query or update that the SDK tells it to do. Implementations must be thread-safe. Implementations that use a task-based asynchronous pattern can use IPersistentDataStoreAsync instead. Conceptually, each item in the store is a DataStoreTypes.SerializedItemDescriptor which always has a version number, and can represent either a serialized object or a placeholder (tombstone) for a deleted item. There are two approaches a persistent store implementation can use for persisting this data: Preferably, it should store the version number and the Deleted state separately so that the object does not need to be fully deserialized to read them. In this case, deleted item placeholders can ignore the value of SerializedItem on writes and can set it to null on reads. The store should never call Deserialize(string) or Serialize(ItemDescriptor) in this case. If that isn't possible, then the store should simply persist the exact string from SerializedItem on writes, and return the persisted string on reads -- setting Version to zero and Deleted to false. The string is guaranteed to provide the SDK with enough information to infer the version and the deleted state. On updates, the store will have to call Deserialize(string) in order to inspect the version number of the existing item if any. Error handling is defined as follows: if any data store operation encounters a database error, or is otherwise unable to complete its task, it should throw an exception to make the SDK aware of this. The SDK will log the exception and will assume that the data store is now in a non-operational state; the SDK will then start polling IsStoreAvailable() to determine when the store has started working again. Methods | Edit this page View Source Get(DataKind, string) Retrieves an item from the specified collection, if available. Declaration DataStoreTypes.SerializedItemDescriptor? Get(DataStoreTypes.DataKind kind, string key) Parameters Type Name Description DataStoreTypes.DataKind kind specifies which collection to use string key the unique key of the item within that collection Returns Type Description DataStoreTypes.SerializedItemDescriptor? a versioned item that contains the stored data (or placeholder for deleted data); null if the key is unknown Remarks If the key is not known at all, the method should return null. Otherwise, it should return a DataStoreTypes.SerializedItemDescriptor as follows: If the version number and deletion state can be determined without fully deserializing the item, then the store should set those properties in the DataStoreTypes.SerializedItemDescriptor (and can set SerializedItem to null for deleted items). Otherwise, it should simply set SerializedItem to the exact string that was persisted, and can leave the other properties as zero/false. The SDK will inspect the properties of the item after deserializing it to fill in the rest of the information. | Edit this page View Source GetAll(DataKind) Retrieves all items from the specified collection. Declaration DataStoreTypes.KeyedItems<DataStoreTypes.SerializedItemDescriptor> GetAll(DataStoreTypes.DataKind kind) Parameters Type Name Description DataStoreTypes.DataKind kind specifies which collection to use Returns Type Description DataStoreTypes.KeyedItems<DataStoreTypes.SerializedItemDescriptor> a collection of key-value pairs; the ordering is not significant Remarks If the store contains placeholders for deleted items, it should include them in the results, not filter them out. See Get(DataKind, string) for how to set the properties of the DataStoreTypes.SerializedItemDescriptor for each item. | Edit this page View Source Init(FullDataSet<SerializedItemDescriptor>) Overwrites the store's contents with a set of items for each collection. Declaration void Init(DataStoreTypes.FullDataSet<DataStoreTypes.SerializedItemDescriptor> allData) Parameters Type Name Description DataStoreTypes.FullDataSet<DataStoreTypes.SerializedItemDescriptor> allData a list of DataStoreTypes.DataKind instances and their corresponding data sets Remarks All previous data should be discarded, regardless of versioning. The update should be done atomically. If it cannot be done atomically, then the store must first add or update each item in the same order that they are given in the input data, and then delete any previously stored items that were not in the input data. | Edit this page View Source Initialized() Returns true if this store has been initialized. Declaration bool Initialized() Returns Type Description bool true if the store has been initialized Remarks In a shared data store, the implementation should be able to detect this state even if Init(FullDataSet<SerializedItemDescriptor>) was called in a different process, i.e. it must query the underlying data store in some way. The method does not need to worry about caching this value; the SDK will call it rarely. | Edit this page View Source IsStoreAvailable() Tests whether the data store seems to be functioning normally. Declaration bool IsStoreAvailable() Returns Type Description bool true if the underlying data store is reachable Remarks This should not be a detailed test of different kinds of operations, but just the smallest possible operation to determine whether (for instance) we can reach the database. Whenever one of the store's other methods throws an exception, the SDK will assume that it may have become unavailable (e.g. the database connection was lost). The SDK will then call IsStoreAvailable() at intervals until it returns true. | Edit this page View Source Upsert(DataKind, string, SerializedItemDescriptor) Updates or inserts an item in the specified collection. For updates, the object will only be updated if the existing version is less than the new version. Declaration bool Upsert(DataStoreTypes.DataKind kind, string key, DataStoreTypes.SerializedItemDescriptor item) Parameters Type Name Description DataStoreTypes.DataKind kind specifies which collection to use string key the unique key for the item within that collection DataStoreTypes.SerializedItemDescriptor item the item to insert or update Returns Type Description bool true if the item was updated; false if it was not updated because the store contains an equal or greater version Remarks The SDK may pass an DataStoreTypes.ItemDescriptor that contains a null, to represent a placeholder for a deleted item. In that case, assuming the version is greater than any existing version of that item, the store should retain that placeholder rather than simply not storing anything. See Also IPersistentDataStoreAsync IDataStore"
  },
  "api/LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStoreAsync.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Subsystems.IPersistentDataStoreAsync.html",
    "title": "Interface IPersistentDataStoreAsync | LaunchDarkly Dotnet Server SDK",
    "keywords": "Interface IPersistentDataStoreAsync Interface for a data store that holds feature flags and related data in a serialized form. Inherited Members IDisposable.Dispose() Namespace: LaunchDarkly.Sdk.Server.Subsystems Assembly: LaunchDarkly.ServerSdk.dll Syntax public interface IPersistentDataStoreAsync : IDisposable Remarks This is exactly equivalent to IPersistentDataStore, but for implementations that use a task-based asynchronous pattern. Methods | Edit this page View Source GetAllAsync(DataKind) Equivalent to GetAll(DataKind). Declaration Task<DataStoreTypes.KeyedItems<DataStoreTypes.SerializedItemDescriptor>> GetAllAsync(DataStoreTypes.DataKind kind) Parameters Type Name Description DataStoreTypes.DataKind kind specifies which collection to use Returns Type Description Task<DataStoreTypes.KeyedItems<DataStoreTypes.SerializedItemDescriptor>> a collection of key-value pairs; the ordering is not significant | Edit this page View Source GetAsync(DataKind, string) Equivalent to Get(DataKind, string). Declaration Task<DataStoreTypes.SerializedItemDescriptor?> GetAsync(DataStoreTypes.DataKind kind, string key) Parameters Type Name Description DataStoreTypes.DataKind kind specifies which collection to use string key the unique key of the item within that collection Returns Type Description Task<DataStoreTypes.SerializedItemDescriptor?> a versioned item that contains the stored data (or placeholder for deleted data); null if the key is unknown | Edit this page View Source InitAsync(FullDataSet<SerializedItemDescriptor>) Equivalent to Init(FullDataSet<SerializedItemDescriptor>). Declaration Task InitAsync(DataStoreTypes.FullDataSet<DataStoreTypes.SerializedItemDescriptor> allData) Parameters Type Name Description DataStoreTypes.FullDataSet<DataStoreTypes.SerializedItemDescriptor> allData a list of DataStoreTypes.DataKind instances and their corresponding data sets Returns Type Description Task | Edit this page View Source InitializedAsync() Equivalent to Initialized(). Declaration Task<bool> InitializedAsync() Returns Type Description Task<bool> | Edit this page View Source IsStoreAvailableAsync() Tests whether the data store seems to be functioning normally. Declaration Task<bool> IsStoreAvailableAsync() Returns Type Description Task<bool> true if the underlying data store is reachable Remarks This should not be a detailed test of different kinds of operations, but just the smallest possible operation to determine whether (for instance) we can reach the database. Whenever one of the store's other methods throws an exception, the SDK will assume that it may have become unavailable (e.g. the database connection was lost). The SDK will then call IsStoreAvailable() at intervals until it returns true. | Edit this page View Source UpsertAsync(DataKind, string, SerializedItemDescriptor) Equivalent to Upsert(DataKind, string, SerializedItemDescriptor). Declaration Task<bool> UpsertAsync(DataStoreTypes.DataKind kind, string key, DataStoreTypes.SerializedItemDescriptor item) Parameters Type Name Description DataStoreTypes.DataKind kind specifies which collection to use string key the unique key for the item within that collection DataStoreTypes.SerializedItemDescriptor item the item to insert or update Returns Type Description Task<bool> true if the item was updated; false if it was not updated because the store contains an equal or greater version"
  },
  "api/LaunchDarkly.Sdk.Server.Subsystems.LdClientContext.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Subsystems.LdClientContext.html",
    "title": "Class LdClientContext | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class LdClientContext Encapsulates SDK client context when creating components. Inheritance object LdClientContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server.Subsystems Assembly: LaunchDarkly.ServerSdk.dll Syntax public sealed class LdClientContext Remarks The SDK passes this object to component factories/configuration builders that implement the IComponentConfigurer<T> interface, to provide them with necessary configuration properties, as well as references to other components that they may need to access. This class also has non-public properties that are relevant only to internal SDK implementation code and are not accessible to custom components. Constructors | Edit this page View Source LdClientContext(string) Basic constructor that sets only the SDK key and uses defaults for all other properties. Declaration public LdClientContext(string sdkKey) Parameters Type Name Description string sdkKey the SDK key | Edit this page View Source LdClientContext(string, IDataSourceUpdates, IDataStoreUpdates, HttpConfiguration, Logger, bool, ServiceEndpoints) Constructs a new instance with only the public properties. Declaration public LdClientContext(string sdkKey, IDataSourceUpdates dataSourceUpdates, IDataStoreUpdates dataStoreUpdates, HttpConfiguration http, Logger logger, bool offline, ServiceEndpoints serviceEndpoints) Parameters Type Name Description string sdkKey the SDK key IDataSourceUpdates dataSourceUpdates value for DataSourceUpdates, normally null IDataStoreUpdates dataStoreUpdates value for DataStoreUpdates, normally null HttpConfiguration http the HTTP configuration; if null, a default configuration is used Logger logger the base logger; if null, logging is disabled bool offline true if the SDK should be entirely offline ServiceEndpoints serviceEndpoints custom service endpoints; if null, defaults are used Remarks This constructor is only for convenience in testing. It does not set internal properties that are normally computed in the LdClient constructor. Properties | Edit this page View Source DataSourceUpdates A component that IDataSource implementations use to deliver data and status updates to the SDK. Declaration public IDataSourceUpdates DataSourceUpdates { get; } Property Value Type Description IDataSourceUpdates Remarks This property is only set when the SDK is calling an IDataSource factory. Otherwise it is null. | Edit this page View Source DataStoreUpdates A component that IDataStore implementations use to deliver status updates to the SDK. Declaration public IDataStoreUpdates DataStoreUpdates { get; } Property Value Type Description IDataStoreUpdates Remarks This property is only set when the SDK is calling an IDataStore factory. Otherwise it is null. | Edit this page View Source Http The HTTP configuration for the current client instance. Declaration public HttpConfiguration Http { get; } Property Value Type Description HttpConfiguration Remarks All SDK components that make HTTP requests must use this configuration unless there is a specific reason they cannot (for instance, streaming connections cannot use the ConnectTimeout property). This property is null during early stages of SDK initialization where the HTTP configuration has not yet been created. | Edit this page View Source Logger The base logger for all SDK components to use. Declaration public Logger Logger { get; } Property Value Type Description Logger Remarks Components should use the methods of the LaunchDarkly.Logging API to write log messages which will be output or discarded as appropriate by the logging framework. This is the main logger for the SDK; components that want to tag their log messages with a more specific logger name can use the SubLogger method: for instance, if the base logger's name is \"LaunchDarkly.Sdk\", an event-processing component could use SubLogger(\"Events\") to get a logger whose name is \"LaunchDarkly.Sdk.Events\". This property will never be null; if logging is disabled, it will be set to a stub logger that produces no output. | Edit this page View Source Offline True if the SDK was configured to be completely offline. Declaration public bool Offline { get; } Property Value Type Description bool | Edit this page View Source SdkKey The configured SDK key. Declaration public string SdkKey { get; } Property Value Type Description string | Edit this page View Source ServiceEndpoints Defines the base service URIs used by SDK components. Declaration public ServiceEndpoints ServiceEndpoints { get; } Property Value Type Description ServiceEndpoints"
  },
  "api/LaunchDarkly.Sdk.Server.Subsystems.LoggingConfiguration.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Subsystems.LoggingConfiguration.html",
    "title": "Class LoggingConfiguration | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class LoggingConfiguration Encapsulates the SDK's general logging configuration. Inheritance object LoggingConfiguration Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Namespace: LaunchDarkly.Sdk.Server.Subsystems Assembly: LaunchDarkly.ServerSdk.dll Syntax public sealed class LoggingConfiguration Constructors | Edit this page View Source LoggingConfiguration(string, ILogAdapter, TimeSpan?) Constructs a new instance. Declaration public LoggingConfiguration(string baseLoggerName, ILogAdapter logAdapter, TimeSpan? logDataSourceOutageAsErrorAfter) Parameters Type Name Description string baseLoggerName value for BaseLoggerName ILogAdapter logAdapter value for LogAdapter TimeSpan? logDataSourceOutageAsErrorAfter value for LogDataSourceOutageAsErrorAfter Properties | Edit this page View Source BaseLoggerName The configured base logger name, or null to use the default. Declaration public string BaseLoggerName { get; } Property Value Type Description string See Also BaseLoggerName(string) | Edit this page View Source LogAdapter The implementation of logging that the SDK will use. Declaration public ILogAdapter LogAdapter { get; } Property Value Type Description ILogAdapter See Also Adapter(ILogAdapter) | Edit this page View Source LogDataSourceOutageAsErrorAfter The time threshold, if any, after which the SDK will log a data source outage at Error level instead of Warn level. Declaration public TimeSpan? LogDataSourceOutageAsErrorAfter { get; } Property Value Type Description TimeSpan? See Also LogDataSourceOutageAsErrorAfter(TimeSpan?)"
  },
  "api/LaunchDarkly.Sdk.Server.Subsystems.html": {
    "href": "api/LaunchDarkly.Sdk.Server.Subsystems.html",
    "title": "Namespace LaunchDarkly.Sdk.Server.Subsystems | LaunchDarkly Dotnet Server SDK",
    "keywords": "Namespace LaunchDarkly.Sdk.Server.Subsystems Classes BigSegmentStoreTypes Types that are used by the IBigSegmentStore interface. BigSegmentsConfiguration Encapsulates the SDK's configuration with regard to Big Segments. DataStoreTypes Types that are used by the IDataStore interface. DataStoreTypes.DataKind Represents a separately namespaced collection of storable data items. EventProcessorTypes Parameter types for use by IEventProcessor implementations. HookConfiguration HookConfiguration represents the hooks that will be executed by the SDK at runtime. HttpConfiguration Encapsulates top-level HTTP configuration that applies to all SDK components. LdClientContext Encapsulates SDK client context when creating components. LoggingConfiguration Encapsulates the SDK's general logging configuration. Structs BigSegmentStoreTypes.StoreMetadata Values returned by GetMetadataAsync(). DataStoreTypes.FullDataSet<TDescriptor> Wrapper for a set of storable items being passed to a data store. DataStoreTypes.ItemDescriptor A versioned item (or placeholder) storeable in an IDataStore. DataStoreTypes.KeyedItems<TDescriptor> Wrapper for a set of storable items being passed to a data store, within a single DataStoreTypes.DataKind. DataStoreTypes.SerializedItemDescriptor A versioned item (or placeholder) storeable in an IPersistentDataStore or IPersistentDataStoreAsync. EventProcessorTypes.CustomEvent Parameters for RecordCustomEvent(CustomEvent). EventProcessorTypes.EvaluationEvent Parameters for RecordEvaluationEvent(EvaluationEvent). EventProcessorTypes.IdentifyEvent Parameters for RecordIdentifyEvent(IdentifyEvent). EventProcessorTypes.MigrationOpEvent Parameters for RecordMigrationEvent(MigrationOpEvent) EventProcessorTypes.MigrationOpEvent.ConsistentMeasurement Consistency measurement. EventProcessorTypes.MigrationOpEvent.ErrorMeasurement Error measurements for invoked methods. EventProcessorTypes.MigrationOpEvent.InvokedMeasurement Information about what origins were invoked. EventProcessorTypes.MigrationOpEvent.LatencyMeasurement Latency measurements for invoked methods. Interfaces BigSegmentStoreTypes.IMembership A query interface returned by GetMembershipAsync(string). IBigSegmentStore Interface for a read-only data store that allows querying of user membership in Big Segments. IComponentConfigurer<T> The common interface for SDK component factories and configuration builders. Applications should not need to implement this interface. IDataSource Interface for an object that receives updates to feature flags, user segments, and anything else that might come from LaunchDarkly. IDataSourceUpdates Interface that an implementation of IDataSource will use to push data into the SDK. IDataStore Interface for a data store that holds feature flags and related data received by the SDK. IDataStoreUpdates Interface that an implementation of IDataStore can use to report information back to the SDK. IDiagnosticDescription Optional interface for components to describe their own configuration. IEventProcessor Interface for an object that can send or store analytics events. IPersistentDataStore Interface for a data store that holds feature flags and related data in a serialized form. IPersistentDataStoreAsync Interface for a data store that holds feature flags and related data in a serialized form."
  },
  "api/LaunchDarkly.Sdk.Server.html": {
    "href": "api/LaunchDarkly.Sdk.Server.html",
    "title": "Namespace LaunchDarkly.Sdk.Server | LaunchDarkly Dotnet Server SDK",
    "keywords": "Namespace LaunchDarkly.Sdk.Server Classes Components Provides factories for the standard implementations of LaunchDarkly component interfaces. Configuration Configuration options for LdClient. This class should normally be constructed with Builder(string). ConfigurationBuilder A mutable object that uses the Builder pattern to specify properties for a Configuration object. DataModel Contains information about the internal data model for feature flags and user segments. FeatureFlagsState A snapshot of the state of all feature flags with regard to a specific user. See calling AllFlagsState(Context, params FlagsStateOption[]). FeatureFlagsStateBuilder A builder for constructing FeatureFlagsState instances. FlagsStateOption Optional parameters that can be passed to AllFlagsState(Context, params FlagsStateOption[]). ILdClientExtensions Convenience methods that extend the ILdClient interface. LdClient A client for the LaunchDarkly API. Client instances are thread-safe. Applications should instantiate a single LdClient for the lifetime of their application."
  },
  "api/LaunchDarkly.Sdk.UnixMillisecondTime.html": {
    "href": "api/LaunchDarkly.Sdk.UnixMillisecondTime.html",
    "title": "Struct UnixMillisecondTime | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct UnixMillisecondTime Implements IEquatable<UnixMillisecondTime> IComparable<UnixMillisecondTime> IJsonSerializable Inherited Members ValueType.ToString() object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk Assembly: LaunchDarkly.CommonSdk.dll Syntax [JsonConverter(typeof(LdJsonConverters.UnixMillisecondTimeConverter))] public struct UnixMillisecondTime : IEquatable<UnixMillisecondTime>, IComparable<UnixMillisecondTime>, IJsonSerializable Fields Epoch Declaration public static readonly DateTime Epoch Field Value Type Description DateTime Properties AsDateTime Declaration public DateTime AsDateTime { get; } Property Value Type Description DateTime Now Declaration public static UnixMillisecondTime Now { get; } Property Value Type Description UnixMillisecondTime Value Declaration public long Value { get; } Property Value Type Description long Methods CompareTo(UnixMillisecondTime) Declaration public int CompareTo(UnixMillisecondTime other) Parameters Type Name Description UnixMillisecondTime other Returns Type Description int Equals(UnixMillisecondTime) Declaration public bool Equals(UnixMillisecondTime other) Parameters Type Name Description UnixMillisecondTime other Returns Type Description bool Equals(object) Declaration public override bool Equals(object other) Parameters Type Name Description object other Returns Type Description bool Overrides ValueType.Equals(object) FromDateTime(DateTime) Declaration public static UnixMillisecondTime FromDateTime(DateTime dateTime) Parameters Type Name Description DateTime dateTime Returns Type Description UnixMillisecondTime GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode() OfMillis(long) Declaration public static UnixMillisecondTime OfMillis(long millis) Parameters Type Name Description long millis Returns Type Description UnixMillisecondTime PlusMillis(long) Declaration public UnixMillisecondTime PlusMillis(long millis) Parameters Type Name Description long millis Returns Type Description UnixMillisecondTime Operators operator ==(UnixMillisecondTime, UnixMillisecondTime) Declaration public static bool operator ==(UnixMillisecondTime a, UnixMillisecondTime b) Parameters Type Name Description UnixMillisecondTime a UnixMillisecondTime b Returns Type Description bool operator >(UnixMillisecondTime, UnixMillisecondTime) Declaration public static bool operator >(UnixMillisecondTime a, UnixMillisecondTime b) Parameters Type Name Description UnixMillisecondTime a UnixMillisecondTime b Returns Type Description bool operator >=(UnixMillisecondTime, UnixMillisecondTime) Declaration public static bool operator >=(UnixMillisecondTime a, UnixMillisecondTime b) Parameters Type Name Description UnixMillisecondTime a UnixMillisecondTime b Returns Type Description bool operator !=(UnixMillisecondTime, UnixMillisecondTime) Declaration public static bool operator !=(UnixMillisecondTime a, UnixMillisecondTime b) Parameters Type Name Description UnixMillisecondTime a UnixMillisecondTime b Returns Type Description bool operator <(UnixMillisecondTime, UnixMillisecondTime) Declaration public static bool operator <(UnixMillisecondTime a, UnixMillisecondTime b) Parameters Type Name Description UnixMillisecondTime a UnixMillisecondTime b Returns Type Description bool operator <=(UnixMillisecondTime, UnixMillisecondTime) Declaration public static bool operator <=(UnixMillisecondTime a, UnixMillisecondTime b) Parameters Type Name Description UnixMillisecondTime a UnixMillisecondTime b Returns Type Description bool Implements IEquatable<T> IComparable<T> IJsonSerializable"
  },
  "api/LaunchDarkly.Sdk.User.html": {
    "href": "api/LaunchDarkly.Sdk.User.html",
    "title": "Class User | LaunchDarkly Dotnet Server SDK",
    "keywords": "Class User Inheritance object User Implements IEquatable<User> IJsonSerializable Inherited Members object.GetType() object.MemberwiseClone() object.ToString() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk Assembly: LaunchDarkly.CommonSdk.dll Syntax [JsonConverter(typeof(LdJsonConverters.UserConverter))] public class User : IEquatable<User>, IJsonSerializable Constructors User(string, string, string, string, string, string, string, string, string, bool?, ImmutableDictionary<string, LdValue>, ImmutableHashSet<string>) Declaration public User(string key, string secondary, string ip, string country, string firstName, string lastName, string name, string avatar, string email, bool? anonymous, ImmutableDictionary<string, LdValue> custom, ImmutableHashSet<string> privateAttributeNames) Parameters Type Name Description string key string secondary string ip string country string firstName string lastName string name string avatar string email bool? anonymous ImmutableDictionary<string, LdValue> custom ImmutableHashSet<string> privateAttributeNames Properties Anonymous Declaration public bool Anonymous { get; } Property Value Type Description bool Avatar Declaration public string Avatar { get; } Property Value Type Description string Country Declaration public string Country { get; } Property Value Type Description string Custom Declaration public IImmutableDictionary<string, LdValue> Custom { get; } Property Value Type Description IImmutableDictionary<string, LdValue> Email Declaration public string Email { get; } Property Value Type Description string FirstName Declaration public string FirstName { get; } Property Value Type Description string IPAddress Declaration public string IPAddress { get; } Property Value Type Description string Key Declaration public string Key { get; } Property Value Type Description string LastName Declaration public string LastName { get; } Property Value Type Description string Name Declaration public string Name { get; } Property Value Type Description string PrivateAttributeNames Declaration public IImmutableSet<string> PrivateAttributeNames { get; } Property Value Type Description IImmutableSet<string> Methods Builder(User) Declaration public static IUserBuilder Builder(User fromUser) Parameters Type Name Description User fromUser Returns Type Description IUserBuilder Builder(string) Declaration public static IUserBuilder Builder(string key) Parameters Type Name Description string key Returns Type Description IUserBuilder Equals(User) Declaration public bool Equals(User u) Parameters Type Name Description User u Returns Type Description bool Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides object.Equals(object) GetAttribute(UserAttribute) Declaration public LdValue GetAttribute(UserAttribute attribute) Parameters Type Name Description UserAttribute attribute Returns Type Description LdValue GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides object.GetHashCode() WithKey(string) Declaration public static User WithKey(string key) Parameters Type Name Description string key Returns Type Description User Implements IEquatable<T> IJsonSerializable"
  },
  "api/LaunchDarkly.Sdk.UserAttribute.html": {
    "href": "api/LaunchDarkly.Sdk.UserAttribute.html",
    "title": "Struct UserAttribute | LaunchDarkly Dotnet Server SDK",
    "keywords": "Struct UserAttribute Implements IEquatable<UserAttribute> Inherited Members object.GetType() object.Equals(object, object) object.ReferenceEquals(object, object) Namespace: LaunchDarkly.Sdk Assembly: LaunchDarkly.CommonSdk.dll Syntax public struct UserAttribute : IEquatable<UserAttribute> Fields Anonymous Declaration public static readonly UserAttribute Anonymous Field Value Type Description UserAttribute Avatar Declaration public static readonly UserAttribute Avatar Field Value Type Description UserAttribute Country Declaration public static readonly UserAttribute Country Field Value Type Description UserAttribute Email Declaration public static readonly UserAttribute Email Field Value Type Description UserAttribute FirstName Declaration public static readonly UserAttribute FirstName Field Value Type Description UserAttribute IPAddress Declaration public static readonly UserAttribute IPAddress Field Value Type Description UserAttribute Key Declaration public static readonly UserAttribute Key Field Value Type Description UserAttribute LastName Declaration public static readonly UserAttribute LastName Field Value Type Description UserAttribute Name Declaration public static readonly UserAttribute Name Field Value Type Description UserAttribute Properties AttributeName Declaration public string AttributeName { get; } Property Value Type Description string BuiltIn Declaration public bool BuiltIn { get; } Property Value Type Description bool Methods Equals(UserAttribute) Declaration public bool Equals(UserAttribute a) Parameters Type Name Description UserAttribute a Returns Type Description bool Equals(object) Declaration public override bool Equals(object obj) Parameters Type Name Description object obj Returns Type Description bool Overrides ValueType.Equals(object) ForName(string) Declaration public static UserAttribute ForName(string name) Parameters Type Name Description string name Returns Type Description UserAttribute GetHashCode() Declaration public override int GetHashCode() Returns Type Description int Overrides ValueType.GetHashCode() ToString() Declaration public override string ToString() Returns Type Description string Overrides ValueType.ToString() Operators operator ==(UserAttribute, UserAttribute) Declaration public static bool operator ==(UserAttribute a, UserAttribute b) Parameters Type Name Description UserAttribute a UserAttribute b Returns Type Description bool operator !=(UserAttribute, UserAttribute) Declaration public static bool operator !=(UserAttribute a, UserAttribute b) Parameters Type Name Description UserAttribute a UserAttribute b Returns Type Description bool Implements IEquatable<T>"
  },
  "api/LaunchDarkly.Sdk.html": {
    "href": "api/LaunchDarkly.Sdk.html",
    "title": "Namespace LaunchDarkly.Sdk | LaunchDarkly Dotnet Server SDK",
    "keywords": "Namespace LaunchDarkly.Sdk Classes ApplicationInfoBuilder ContextBuilder ContextMultiBuilder LdValue.ArrayBuilder LdValue.Convert LdValue.Converter<T> LdValue.ObjectBuilder User Structs ApplicationInfo AttributeRef Context ContextKind EvaluationDetail<T> EvaluationReason LdValue UnixMillisecondTime UserAttribute Interfaces IUserBuilder IUserBuilderCanMakeAttributePrivate Enums BigSegmentsStatus EvaluationErrorKind EvaluationReasonKind LdValueType"
  },
  "contract-tests/README.html": {
    "href": "contract-tests/README.html",
    "title": "SDK contract test service | LaunchDarkly Dotnet Server SDK",
    "keywords": "SDK contract test service This directory contains an implementation of the cross-platform SDK testing protocol defined by https://github.com/launchdarkly/sdk-test-harness. See that project's README for details of this protocol, and the kinds of SDK capabilities that are relevant to the contract tests. This code should not need to be updated unless the SDK has added or removed such capabilities. To run these tests locally, run make contract-tests from the SDK project root directory. This downloads the correct version of the test harness tool automatically. Or, to test against an in-progress local version of the test harness, run make start-contract-test-service from the SDK project root directory; then, in the root directory of the sdk-test-harness project, build the test harness and run it from the command line. Currently, the project does not automatically detect the available target frameworks. It will default to building and running for .NET Core 3.1. To use a different target framework, set the environment variable TESTFRAMEWORK to the name of the application runtime framework (such as netcoreapp3.1), and set the environment variable BUILDFRAMEWORKS (note the S at the end) to the target framework that the SDK should be built for (which may or may not be the same)."
  },
  "docs-src/README.html": {
    "href": "docs-src/README.html",
    "title": "Notes on in-code documentation for this project | LaunchDarkly Dotnet Server SDK",
    "keywords": "Notes on in-code documentation for this project All public types, methods, and properties should have documentation comments in the standard C# XML comment format. These will be automatically included in the HTML documentation that is generated on release. Non-public items may have documentation comments as well, since those may be helpful to other developers working on this project, but they will not be included in the HTML documentation. The HTML documentation also includes documentation comments from LaunchDarkly.CommonSdk. These are included automatically when the documentation is built on release, so that developers can see a single unified API in the documentation rather than having to look in two packages. The docs-src subdirectory contains additional Markdown content that is included in the documentation build, as follows: namespaces/<Fully.Qualified.Name.Of.Namespace>.md: A file that is used as the description of a specific namespace. The first line is the summary, which will appear on both the landing page and the API page for the namespace; the rest of the file is the full description, which will appear on the API page for the namespace. Markdown text can include hyperlinks to namespaces, types, etc. using the syntax <xref:Fully.Qualified.Name.Of.Thing>."
  },
  "docs-src/namespaces/LaunchDarkly.Sdk.Json.html": {
    "href": "docs-src/namespaces/LaunchDarkly.Sdk.Json.html",
    "title": "| LaunchDarkly Dotnet Server SDK",
    "keywords": "Helper classes and methods for interoperability with JSON. The NuGet package containing these types is LaunchDarkly.CommonSdk. Normally you should not need to reference that package directly; it is loaded automatically as a dependency of the main SDK package. Any LaunchDarkly SDK type that has the marker interface IJsonSerializable has a canonical JSON encoding that is consistent across all LaunchDarkly SDKs. There are three ways to convert any such type to or from JSON: When using the System.Text.Json API, these types already have the necessary attributes to behave correctly. You may use the LdJsonSerialization methods SerializeObject<T>(T) and DeserializeObject<T>(string) to convert to or from a JSON-encoded string. Earlier versions of the LaunchDarkly SDKs used Newtonsoft.Json for JSON serialization, but current versions have no such third-party dependency. Therefore, these types will not work correctly with the reflection-based JsonConvert methods in Newtonsoft.Json without some extra logic. There is an add-on package, LaunchDarkly.CommonSdk.JsonNet, that provides an adapter to make this work; alternatively, you can call SerializeObject<T>(T) and put the resulting JSON output into a Newtonsoft.Json.Linq.JRaw value."
  },
  "docs-src/namespaces/LaunchDarkly.Sdk.Server.Integrations.html": {
    "href": "docs-src/namespaces/LaunchDarkly.Sdk.Server.Integrations.html",
    "title": "| LaunchDarkly Dotnet Server SDK",
    "keywords": "Tools for configuring how the SDK connects to LaunchDarkly, or to other software components. This package contains the configuration builders for standard SDK components such as StreamingDataSourceBuilder; the PersistentDataStoreBuilder builder for use with database integrations (the specific database integrations themselves are provided by add-on libraries); and the test fixtures FileData and TestData."
  },
  "docs-src/namespaces/LaunchDarkly.Sdk.Server.Interfaces.html": {
    "href": "docs-src/namespaces/LaunchDarkly.Sdk.Server.Interfaces.html",
    "title": "| LaunchDarkly Dotnet Server SDK",
    "keywords": "Interfaces and types that are part of the public API, but not needed for basic use of the SDK. Types in this namespace include: ILdClient, which allows the SDK client to be referenced via an interface rather than the concrete type LdClient (if for instance you want to create a mock implementation for testing). Types like IFlagTracker that provide a facade for some part of the SDK API; these are returned by properties like FlagTracker. Concrete types that are used as parameters within these interfaces, like FlagChangeEvent"
  },
  "docs-src/namespaces/LaunchDarkly.Sdk.Server.Subsystems.html": {
    "href": "docs-src/namespaces/LaunchDarkly.Sdk.Server.Subsystems.html",
    "title": "| LaunchDarkly Dotnet Server SDK",
    "keywords": "Interfaces for implementation of custom LaunchDarkly components. Most applications will not need to refer to these types. You will use them if you are creating a plugin component, such as a database integration. They are also used as interfaces for the built-in SDK components, so that plugin components can be used interchangeably with those: for instance, the configuration method DataStore(IComponentConfigurer<IDataStore>) references IDataStore as an abstraction for the data store component. The namespace also includes concrete types that are used as parameters within these interfaces."
  },
  "docs-src/namespaces/LaunchDarkly.Sdk.Server.html": {
    "href": "docs-src/namespaces/LaunchDarkly.Sdk.Server.html",
    "title": "| LaunchDarkly Dotnet Server SDK",
    "keywords": "The main namespace for the LaunchDarkly server-side .NET SDK. You will most often use LdClient (the SDK client) and Configuration (configuration options for the client), as well as the Context type from LaunchDarkly.Sdk."
  },
  "docs-src/namespaces/LaunchDarkly.Sdk.html": {
    "href": "docs-src/namespaces/LaunchDarkly.Sdk.html",
    "title": "| LaunchDarkly Dotnet Server SDK",
    "keywords": "The base namespace for all LaunchDarkly .NET-based SDKs, containing common types. Types in this namespace are part of the overall LaunchDarkly model, shared by both server-side and client-side SDKs. The one you will use most often is Context. The NuGet package containing these types is LaunchDarkly.CommonSdk. Normally you should not need to reference that package directly; it is loaded automatically as a dependency of the main SDK package."
  },
  "index.html": {
    "href": "index.html",
    "title": "LaunchDarkly Server-Side SDK for .NET | LaunchDarkly Dotnet Server SDK",
    "keywords": "LaunchDarkly Server-Side SDK for .NET For first time users, visit our LaunchDarkly Docs page. Within these docs, the LdClient and the ContextBuilder are good starting points to explore from. This site contains the full API reference for the LaunchDarkly.ServerSdk package, as well as the LaunchDarkly.CommonSdk package that is included automatically as a dependency of the SDK. For source code, see the GitHub repository. The developer notes there include links to other repositories used in the SDK. Namespaces LaunchDarkly.Sdk: The base namespace for all LaunchDarkly .NET-based SDKs, containing common types. LaunchDarkly.Sdk.Server: The main namespace for the LaunchDarkly server-side .NET SDK. LaunchDarkly.Sdk.Json: Helper classes and methods for interoperability with JSON. LaunchDarkly.Sdk.Server.Integrations: Tools for configuring how the SDK connects to LaunchDarkly, or to other software components. LaunchDarkly.Sdk.Server.Interfaces: Interfaces and types that are part of the public API, but not needed for basic use of the SDK. LaunchDarkly.Sdk.Server.Subsystem: Interfaces for implementation of custom LaunchDarkly components."
  },
  "src/Internal/BigSegments/NamespaceReadme.html": {
    "href": "src/Internal/BigSegments/NamespaceReadme.html",
    "title": "| LaunchDarkly Dotnet Server SDK",
    "keywords": "This is an internal namespace for SDK implementation types related to the SDK's Big Segments functionality. It does not include implementations of specific Big Segment store integrations such as Redis. Those are implemented in separate repositories such as https://github.com/launchdarkly/dotnet-server-sdk-redis. These types should not be public and should not appear in documentation."
  },
  "src/Internal/DataSources/NamespaceReadme.html": {
    "href": "src/Internal/DataSources/NamespaceReadme.html",
    "title": "| LaunchDarkly Dotnet Server SDK",
    "keywords": "This is an internal namespace for SDK implementation types related to SDK data sources, such as the streaming and polling clients, and the file data fixture. These types should not be public and should not appear in documentation."
  },
  "src/Internal/DataStores/NamespaceReadme.html": {
    "href": "src/Internal/DataStores/NamespaceReadme.html",
    "title": "| LaunchDarkly Dotnet Server SDK",
    "keywords": "This is an internal namespace for IDataStore implementations and related internal SDK types. These types should not be public and should not appear in documentation. The implementations for specific database integrations are in separate packages such as LaunchDarkly.ServerSdk.Redis, but this namespace contains the standard PersistentStoreWrapper that is used with all of them."
  },
  "src/Internal/Evaluation/NamespaceReadme.html": {
    "href": "src/Internal/Evaluation/NamespaceReadme.html",
    "title": "| LaunchDarkly Dotnet Server SDK",
    "keywords": "This is an internal namespace for the SDK's flag evaluation logic and related types. These types should not be public and should not appear in documentation."
  },
  "src/Internal/Events/NamespaceReadme.html": {
    "href": "src/Internal/Events/NamespaceReadme.html",
    "title": "| LaunchDarkly Dotnet Server SDK",
    "keywords": "This is an internal namespace for types related to analytics event processing. Most of the implementation of analytics events is in the LaunchDarkly.InternalSdk package. However, to insulate the public API against changes in internal architecture, none of those types are surfaced directly in the SDK. Instead, we provide a public IEventProcessor interface with a default implementation that delegates to the underlying internal code. These types should not be public and should not appear in documentation."
  },
  "src/Internal/Model/NamespaceReadme.html": {
    "href": "src/Internal/Model/NamespaceReadme.html",
    "title": "| LaunchDarkly Dotnet Server SDK",
    "keywords": "This is an internal namespace for the SDK's feature flag and segment data model and related types. These types should not be public and should not appear in documentation."
  },
  "src/Internal/NamespaceReadme.html": {
    "href": "src/Internal/NamespaceReadme.html",
    "title": "| LaunchDarkly Dotnet Server SDK",
    "keywords": "This is an internal namespace for SDK implementation types. Most non-public SDK code should be in one of the more specific sub-namespaces; types should only be put directly into this namespace if they do not fall into one of those specific areas of functionality. These types should not be public and should not appear in documentation. The namespace LaunchDarkly.Sdk.Server.Subsystems is not for the implementations of components like data stores and data sources; that is for the public interfaces and parameter types that describe those components abstractly."
  }
}